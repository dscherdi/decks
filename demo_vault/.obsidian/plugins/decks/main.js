/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};

// node_modules/sql.js/dist/sql-wasm.js
var require_sql_wasm = __commonJS({
  "node_modules/sql.js/dist/sql-wasm.js"(exports, module2) {
    var initSqlJsPromise = void 0;
    var initSqlJs2 = function(moduleConfig) {
      if (initSqlJsPromise) {
        return initSqlJsPromise;
      }
      initSqlJsPromise = new Promise(function(resolveModule, reject) {
        var Module = typeof moduleConfig !== "undefined" ? moduleConfig : {};
        var originalOnAbortFunction = Module["onAbort"];
        Module["onAbort"] = function(errorThatCausedAbort) {
          reject(new Error(errorThatCausedAbort));
          if (originalOnAbortFunction) {
            originalOnAbortFunction(errorThatCausedAbort);
          }
        };
        Module["postRun"] = Module["postRun"] || [];
        Module["postRun"].push(function() {
          resolveModule(Module);
        });
        module2 = void 0;
        var f;
        f || (f = typeof Module != "undefined" ? Module : {});
        var aa = "object" == typeof window, ba = "undefined" != typeof WorkerGlobalScope, ca = "object" == typeof process && "object" == typeof process.versions && "string" == typeof process.versions.node && "renderer" != process.type;
        "use strict";
        f.onRuntimeInitialized = function() {
          function a(g, l) {
            switch (typeof l) {
              case "boolean":
                dc(g, l ? 1 : 0);
                break;
              case "number":
                ec(g, l);
                break;
              case "string":
                fc(g, l, -1, -1);
                break;
              case "object":
                if (null === l)
                  lb(g);
                else if (null != l.length) {
                  var n = da(l, ea);
                  gc(g, n, l.length, -1);
                  fa(n);
                } else
                  va(g, "Wrong API use : tried to return a value of an unknown type (" + l + ").", -1);
                break;
              default:
                lb(g);
            }
          }
          function b(g, l) {
            for (var n = [], r = 0; r < g; r += 1) {
              var t = m(l + 4 * r, "i32"), y = hc(t);
              if (1 === y || 2 === y)
                t = ic(t);
              else if (3 === y)
                t = jc(t);
              else if (4 === y) {
                y = t;
                t = kc(y);
                y = lc(y);
                for (var L = new Uint8Array(t), J = 0; J < t; J += 1)
                  L[J] = p[y + J];
                t = L;
              } else
                t = null;
              n.push(t);
            }
            return n;
          }
          function c(g, l) {
            this.Qa = g;
            this.db = l;
            this.Oa = 1;
            this.lb = [];
          }
          function d(g, l) {
            this.db = l;
            l = ha(g) + 1;
            this.eb = ia(l);
            if (null === this.eb)
              throw Error("Unable to allocate memory for the SQL string");
            u(g, x, this.eb, l);
            this.kb = this.eb;
            this.Za = this.pb = null;
          }
          function e(g) {
            this.filename = "dbfile_" + (4294967295 * Math.random() >>> 0);
            if (null != g) {
              var l = this.filename, n = "/", r = l;
              n && (n = "string" == typeof n ? n : ja(n), r = l ? ka(n + "/" + l) : n);
              l = la(true, true);
              r = ma(r, l);
              if (g) {
                if ("string" == typeof g) {
                  n = Array(g.length);
                  for (var t = 0, y = g.length; t < y; ++t)
                    n[t] = g.charCodeAt(t);
                  g = n;
                }
                na(r, l | 146);
                n = oa(r, 577);
                pa(n, g, 0, g.length, 0);
                qa(n);
                na(r, l);
              }
            }
            this.handleError(q(this.filename, h));
            this.db = m(h, "i32");
            ob(this.db);
            this.fb = {};
            this.Sa = {};
          }
          var h = z(4), k = f.cwrap, q = k("sqlite3_open", "number", ["string", "number"]), w = k("sqlite3_close_v2", "number", ["number"]), v = k("sqlite3_exec", "number", ["number", "string", "number", "number", "number"]), C = k("sqlite3_changes", "number", ["number"]), G = k("sqlite3_prepare_v2", "number", ["number", "string", "number", "number", "number"]), pb = k("sqlite3_sql", "string", ["number"]), nc = k("sqlite3_normalized_sql", "string", ["number"]), qb = k("sqlite3_prepare_v2", "number", ["number", "number", "number", "number", "number"]), oc = k("sqlite3_bind_text", "number", ["number", "number", "number", "number", "number"]), rb = k("sqlite3_bind_blob", "number", ["number", "number", "number", "number", "number"]), pc = k("sqlite3_bind_double", "number", ["number", "number", "number"]), qc = k(
            "sqlite3_bind_int",
            "number",
            ["number", "number", "number"]
          ), rc = k("sqlite3_bind_parameter_index", "number", ["number", "string"]), sc = k("sqlite3_step", "number", ["number"]), tc = k("sqlite3_errmsg", "string", ["number"]), uc = k("sqlite3_column_count", "number", ["number"]), vc = k("sqlite3_data_count", "number", ["number"]), wc = k("sqlite3_column_double", "number", ["number", "number"]), sb = k("sqlite3_column_text", "string", ["number", "number"]), xc = k("sqlite3_column_blob", "number", ["number", "number"]), yc = k("sqlite3_column_bytes", "number", [
            "number",
            "number"
          ]), zc = k("sqlite3_column_type", "number", ["number", "number"]), Ac = k("sqlite3_column_name", "string", ["number", "number"]), Bc = k("sqlite3_reset", "number", ["number"]), Cc = k("sqlite3_clear_bindings", "number", ["number"]), Dc = k("sqlite3_finalize", "number", ["number"]), tb = k("sqlite3_create_function_v2", "number", "number string number number number number number number number".split(" ")), hc = k("sqlite3_value_type", "number", ["number"]), kc = k("sqlite3_value_bytes", "number", ["number"]), jc = k(
            "sqlite3_value_text",
            "string",
            ["number"]
          ), lc = k("sqlite3_value_blob", "number", ["number"]), ic = k("sqlite3_value_double", "number", ["number"]), ec = k("sqlite3_result_double", "", ["number", "number"]), lb = k("sqlite3_result_null", "", ["number"]), fc = k("sqlite3_result_text", "", ["number", "string", "number", "number"]), gc = k("sqlite3_result_blob", "", ["number", "number", "number", "number"]), dc = k("sqlite3_result_int", "", ["number", "number"]), va = k("sqlite3_result_error", "", ["number", "string", "number"]), ub = k(
            "sqlite3_aggregate_context",
            "number",
            ["number", "number"]
          ), ob = k("RegisterExtensionFunctions", "number", ["number"]), vb = k("sqlite3_update_hook", "number", ["number", "number", "number"]);
          c.prototype.bind = function(g) {
            if (!this.Qa)
              throw "Statement closed";
            this.reset();
            return Array.isArray(g) ? this.Cb(g) : null != g && "object" === typeof g ? this.Db(g) : true;
          };
          c.prototype.step = function() {
            if (!this.Qa)
              throw "Statement closed";
            this.Oa = 1;
            var g = sc(this.Qa);
            switch (g) {
              case 100:
                return true;
              case 101:
                return false;
              default:
                throw this.db.handleError(g);
            }
          };
          c.prototype.wb = function(g) {
            null == g && (g = this.Oa, this.Oa += 1);
            return wc(this.Qa, g);
          };
          c.prototype.Gb = function(g) {
            null == g && (g = this.Oa, this.Oa += 1);
            g = sb(this.Qa, g);
            if ("function" !== typeof BigInt)
              throw Error("BigInt is not supported");
            return BigInt(g);
          };
          c.prototype.Hb = function(g) {
            null == g && (g = this.Oa, this.Oa += 1);
            return sb(this.Qa, g);
          };
          c.prototype.getBlob = function(g) {
            null == g && (g = this.Oa, this.Oa += 1);
            var l = yc(this.Qa, g);
            g = xc(this.Qa, g);
            for (var n = new Uint8Array(l), r = 0; r < l; r += 1)
              n[r] = p[g + r];
            return n;
          };
          c.prototype.get = function(g, l) {
            l = l || {};
            null != g && this.bind(g) && this.step();
            g = [];
            for (var n = vc(this.Qa), r = 0; r < n; r += 1)
              switch (zc(this.Qa, r)) {
                case 1:
                  var t = l.useBigInt ? this.Gb(r) : this.wb(r);
                  g.push(t);
                  break;
                case 2:
                  g.push(this.wb(r));
                  break;
                case 3:
                  g.push(this.Hb(r));
                  break;
                case 4:
                  g.push(this.getBlob(r));
                  break;
                default:
                  g.push(null);
              }
            return g;
          };
          c.prototype.getColumnNames = function() {
            for (var g = [], l = uc(this.Qa), n = 0; n < l; n += 1)
              g.push(Ac(this.Qa, n));
            return g;
          };
          c.prototype.getAsObject = function(g, l) {
            g = this.get(g, l);
            l = this.getColumnNames();
            for (var n = {}, r = 0; r < l.length; r += 1)
              n[l[r]] = g[r];
            return n;
          };
          c.prototype.getSQL = function() {
            return pb(this.Qa);
          };
          c.prototype.getNormalizedSQL = function() {
            return nc(this.Qa);
          };
          c.prototype.run = function(g) {
            null != g && this.bind(g);
            this.step();
            return this.reset();
          };
          c.prototype.sb = function(g, l) {
            null == l && (l = this.Oa, this.Oa += 1);
            g = ra(g);
            var n = da(g, ea);
            this.lb.push(n);
            this.db.handleError(oc(this.Qa, l, n, g.length - 1, 0));
          };
          c.prototype.Bb = function(g, l) {
            null == l && (l = this.Oa, this.Oa += 1);
            var n = da(g, ea);
            this.lb.push(n);
            this.db.handleError(rb(
              this.Qa,
              l,
              n,
              g.length,
              0
            ));
          };
          c.prototype.rb = function(g, l) {
            null == l && (l = this.Oa, this.Oa += 1);
            this.db.handleError((g === (g | 0) ? qc : pc)(this.Qa, l, g));
          };
          c.prototype.Eb = function(g) {
            null == g && (g = this.Oa, this.Oa += 1);
            rb(this.Qa, g, 0, 0, 0);
          };
          c.prototype.tb = function(g, l) {
            null == l && (l = this.Oa, this.Oa += 1);
            switch (typeof g) {
              case "string":
                this.sb(g, l);
                return;
              case "number":
                this.rb(g, l);
                return;
              case "bigint":
                this.sb(g.toString(), l);
                return;
              case "boolean":
                this.rb(g + 0, l);
                return;
              case "object":
                if (null === g) {
                  this.Eb(l);
                  return;
                }
                if (null != g.length) {
                  this.Bb(
                    g,
                    l
                  );
                  return;
                }
            }
            throw "Wrong API use : tried to bind a value of an unknown type (" + g + ").";
          };
          c.prototype.Db = function(g) {
            var l = this;
            Object.keys(g).forEach(function(n) {
              var r = rc(l.Qa, n);
              0 !== r && l.tb(g[n], r);
            });
            return true;
          };
          c.prototype.Cb = function(g) {
            for (var l = 0; l < g.length; l += 1)
              this.tb(g[l], l + 1);
            return true;
          };
          c.prototype.reset = function() {
            this.freemem();
            return 0 === Cc(this.Qa) && 0 === Bc(this.Qa);
          };
          c.prototype.freemem = function() {
            for (var g; void 0 !== (g = this.lb.pop()); )
              fa(g);
          };
          c.prototype.free = function() {
            this.freemem();
            var g = 0 === Dc(this.Qa);
            delete this.db.fb[this.Qa];
            this.Qa = 0;
            return g;
          };
          d.prototype.next = function() {
            if (null === this.eb)
              return { done: true };
            null !== this.Za && (this.Za.free(), this.Za = null);
            if (!this.db.db)
              throw this.mb(), Error("Database closed");
            var g = sa(), l = z(4);
            ta(h);
            ta(l);
            try {
              this.db.handleError(qb(this.db.db, this.kb, -1, h, l));
              this.kb = m(l, "i32");
              var n = m(h, "i32");
              if (0 === n)
                return this.mb(), { done: true };
              this.Za = new c(n, this.db);
              this.db.fb[n] = this.Za;
              return { value: this.Za, done: false };
            } catch (r) {
              throw this.pb = ua(this.kb), this.mb(), r;
            } finally {
              wa(g);
            }
          };
          d.prototype.mb = function() {
            fa(this.eb);
            this.eb = null;
          };
          d.prototype.getRemainingSQL = function() {
            return null !== this.pb ? this.pb : ua(this.kb);
          };
          "function" === typeof Symbol && "symbol" === typeof Symbol.iterator && (d.prototype[Symbol.iterator] = function() {
            return this;
          });
          e.prototype.run = function(g, l) {
            if (!this.db)
              throw "Database closed";
            if (l) {
              g = this.prepare(g, l);
              try {
                g.step();
              } finally {
                g.free();
              }
            } else
              this.handleError(v(this.db, g, 0, 0, h));
            return this;
          };
          e.prototype.exec = function(g, l, n) {
            if (!this.db)
              throw "Database closed";
            var r = sa(), t = null;
            try {
              var y = xa(g), L = z(4);
              for (g = []; 0 !== m(y, "i8"); ) {
                ta(h);
                ta(L);
                this.handleError(qb(this.db, y, -1, h, L));
                var J = m(h, "i32");
                y = m(L, "i32");
                if (0 !== J) {
                  var I = null;
                  t = new c(J, this);
                  for (null != l && t.bind(l); t.step(); )
                    null === I && (I = { columns: t.getColumnNames(), values: [] }, g.push(I)), I.values.push(t.get(null, n));
                  t.free();
                }
              }
              return g;
            } catch (M) {
              throw t && t.free(), M;
            } finally {
              wa(r);
            }
          };
          e.prototype.each = function(g, l, n, r, t) {
            "function" === typeof l && (r = n, n = l, l = void 0);
            g = this.prepare(g, l);
            try {
              for (; g.step(); )
                n(g.getAsObject(
                  null,
                  t
                ));
            } finally {
              g.free();
            }
            if ("function" === typeof r)
              return r();
          };
          e.prototype.prepare = function(g, l) {
            ta(h);
            this.handleError(G(this.db, g, -1, h, 0));
            g = m(h, "i32");
            if (0 === g)
              throw "Nothing to prepare";
            var n = new c(g, this);
            null != l && n.bind(l);
            return this.fb[g] = n;
          };
          e.prototype.iterateStatements = function(g) {
            return new d(g, this);
          };
          e.prototype["export"] = function() {
            Object.values(this.fb).forEach(function(l) {
              l.free();
            });
            Object.values(this.Sa).forEach(A);
            this.Sa = {};
            this.handleError(w(this.db));
            var g = ya(this.filename);
            this.handleError(q(
              this.filename,
              h
            ));
            this.db = m(h, "i32");
            ob(this.db);
            return g;
          };
          e.prototype.close = function() {
            null !== this.db && (Object.values(this.fb).forEach(function(g) {
              g.free();
            }), Object.values(this.Sa).forEach(A), this.Sa = {}, this.Ya && (A(this.Ya), this.Ya = void 0), this.handleError(w(this.db)), za("/" + this.filename), this.db = null);
          };
          e.prototype.handleError = function(g) {
            if (0 === g)
              return null;
            g = tc(this.db);
            throw Error(g);
          };
          e.prototype.getRowsModified = function() {
            return C(this.db);
          };
          e.prototype.create_function = function(g, l) {
            Object.prototype.hasOwnProperty.call(
              this.Sa,
              g
            ) && (A(this.Sa[g]), delete this.Sa[g]);
            var n = Aa(function(r, t, y) {
              t = b(t, y);
              try {
                var L = l.apply(null, t);
              } catch (J) {
                va(r, J, -1);
                return;
              }
              a(r, L);
            }, "viii");
            this.Sa[g] = n;
            this.handleError(tb(this.db, g, l.length, 1, 0, n, 0, 0, 0));
            return this;
          };
          e.prototype.create_aggregate = function(g, l) {
            var n = l.init || function() {
              return null;
            }, r = l.finalize || function(I) {
              return I;
            }, t = l.step;
            if (!t)
              throw "An aggregate function must have a step function in " + g;
            var y = {};
            Object.hasOwnProperty.call(this.Sa, g) && (A(this.Sa[g]), delete this.Sa[g]);
            l = g + "__finalize";
            Object.hasOwnProperty.call(this.Sa, l) && (A(this.Sa[l]), delete this.Sa[l]);
            var L = Aa(function(I, M, Ra) {
              var X = ub(I, 1);
              Object.hasOwnProperty.call(y, X) || (y[X] = n());
              M = b(M, Ra);
              M = [y[X]].concat(M);
              try {
                y[X] = t.apply(null, M);
              } catch (Fc) {
                delete y[X], va(I, Fc, -1);
              }
            }, "viii"), J = Aa(function(I) {
              var M = ub(I, 1);
              try {
                var Ra = r(y[M]);
              } catch (X) {
                delete y[M];
                va(I, X, -1);
                return;
              }
              a(I, Ra);
              delete y[M];
            }, "vi");
            this.Sa[g] = L;
            this.Sa[l] = J;
            this.handleError(tb(this.db, g, t.length - 1, 1, 0, 0, L, J, 0));
            return this;
          };
          e.prototype.updateHook = function(g) {
            this.Ya && (vb(this.db, 0, 0), A(this.Ya), this.Ya = void 0);
            g && (this.Ya = Aa(function(l, n, r, t, y) {
              switch (n) {
                case 18:
                  l = "insert";
                  break;
                case 23:
                  l = "update";
                  break;
                case 9:
                  l = "delete";
                  break;
                default:
                  throw "unknown operationCode in updateHook callback: " + n;
              }
              r = r ? B(x, r) : "";
              t = t ? B(x, t) : "";
              if (y > Number.MAX_SAFE_INTEGER)
                throw "rowId too big to fit inside a Number";
              g(l, r, t, Number(y));
            }, "viiiij"), vb(this.db, this.Ya, 0));
          };
          f.Database = e;
        };
        var Ba = { ...f }, Ca = "./this.program", Da = (a, b) => {
          throw b;
        }, D = "", Ea, Fa;
        if (ca) {
          var fs = require("fs");
          require("path");
          D = __dirname + "/";
          Fa = (a) => {
            a = Ga(a) ? new URL(a) : a;
            return fs.readFileSync(a);
          };
          Ea = async (a) => {
            a = Ga(a) ? new URL(a) : a;
            return fs.readFileSync(a, void 0);
          };
          !f.thisProgram && 1 < process.argv.length && (Ca = process.argv[1].replace(/\\/g, "/"));
          process.argv.slice(2);
          "undefined" != typeof module2 && (module2.exports = f);
          Da = (a, b) => {
            process.exitCode = a;
            throw b;
          };
        } else if (aa || ba)
          ba ? D = self.location.href : "undefined" != typeof document && document.currentScript && (D = document.currentScript.src), D = D.startsWith("blob:") ? "" : D.slice(0, D.replace(/[?#].*/, "").lastIndexOf("/") + 1), ba && (Fa = (a) => {
            var b = new XMLHttpRequest();
            b.open("GET", a, false);
            b.responseType = "arraybuffer";
            b.send(null);
            return new Uint8Array(b.response);
          }), Ea = async (a) => {
            if (Ga(a))
              return new Promise((c, d) => {
                var e = new XMLHttpRequest();
                e.open("GET", a, true);
                e.responseType = "arraybuffer";
                e.onload = () => {
                  200 == e.status || 0 == e.status && e.response ? c(e.response) : d(e.status);
                };
                e.onerror = d;
                e.send(null);
              });
            var b = await fetch(a, { credentials: "same-origin" });
            if (b.ok)
              return b.arrayBuffer();
            throw Error(b.status + " : " + b.url);
          };
        var Ha = f.print || console.log.bind(console), Ia = f.printErr || console.error.bind(console);
        Object.assign(f, Ba);
        Ba = null;
        f.thisProgram && (Ca = f.thisProgram);
        var Ja = f.wasmBinary, Ka, La = false, Ma, p, x, Na, E, F, Oa, H, Pa, Ga = (a) => a.startsWith("file://");
        function Qa() {
          var a = Ka.buffer;
          f.HEAP8 = p = new Int8Array(a);
          f.HEAP16 = Na = new Int16Array(a);
          f.HEAPU8 = x = new Uint8Array(a);
          f.HEAPU16 = new Uint16Array(a);
          f.HEAP32 = E = new Int32Array(a);
          f.HEAPU32 = F = new Uint32Array(a);
          f.HEAPF32 = Oa = new Float32Array(a);
          f.HEAPF64 = Pa = new Float64Array(a);
          f.HEAP64 = H = new BigInt64Array(a);
          f.HEAPU64 = new BigUint64Array(a);
        }
        var K = 0, Sa = null;
        function Ta(a) {
          var _a;
          (_a = f.onAbort) == null ? void 0 : _a.call(f, a);
          a = "Aborted(" + a + ")";
          Ia(a);
          La = true;
          throw new WebAssembly.RuntimeError(a + ". Build with -sASSERTIONS for more info.");
        }
        var Ua;
        async function Va(a) {
          if (!Ja)
            try {
              var b = await Ea(a);
              return new Uint8Array(b);
            } catch (e) {
            }
          if (a == Ua && Ja)
            a = new Uint8Array(Ja);
          else if (Fa)
            a = Fa(a);
          else
            throw "both async and sync fetching of the wasm failed";
          return a;
        }
        async function Wa(a, b) {
          try {
            var c = await Va(a);
            return await WebAssembly.instantiate(c, b);
          } catch (d) {
            Ia(`failed to asynchronously prepare wasm: ${d}`), Ta(d);
          }
        }
        async function Xa(a) {
          var b = Ua;
          if (!Ja && "function" == typeof WebAssembly.instantiateStreaming && !Ga(b) && !ca)
            try {
              var c = fetch(b, { credentials: "same-origin" });
              return await WebAssembly.instantiateStreaming(c, a);
            } catch (d) {
              Ia(`wasm streaming compile failed: ${d}`), Ia("falling back to ArrayBuffer instantiation");
            }
          return Wa(b, a);
        }
        class Ya {
          constructor(a) {
            __publicField(this, "name", "ExitStatus");
            this.message = `Program terminated with exit(${a})`;
            this.status = a;
          }
        }
        var Za = (a) => {
          for (; 0 < a.length; )
            a.shift()(f);
        }, $a = [], ab = [], bb = () => {
          var a = f.preRun.shift();
          ab.unshift(a);
        };
        function m(a, b = "i8") {
          b.endsWith("*") && (b = "*");
          switch (b) {
            case "i1":
              return p[a];
            case "i8":
              return p[a];
            case "i16":
              return Na[a >> 1];
            case "i32":
              return E[a >> 2];
            case "i64":
              return H[a >> 3];
            case "float":
              return Oa[a >> 2];
            case "double":
              return Pa[a >> 3];
            case "*":
              return F[a >> 2];
            default:
              Ta(`invalid type for getValue: ${b}`);
          }
        }
        var cb = f.noExitRuntime || true;
        function ta(a) {
          var b = "i32";
          b.endsWith("*") && (b = "*");
          switch (b) {
            case "i1":
              p[a] = 0;
              break;
            case "i8":
              p[a] = 0;
              break;
            case "i16":
              Na[a >> 1] = 0;
              break;
            case "i32":
              E[a >> 2] = 0;
              break;
            case "i64":
              H[a >> 3] = BigInt(0);
              break;
            case "float":
              Oa[a >> 2] = 0;
              break;
            case "double":
              Pa[a >> 3] = 0;
              break;
            case "*":
              F[a >> 2] = 0;
              break;
            default:
              Ta(`invalid type for setValue: ${b}`);
          }
        }
        var db = "undefined" != typeof TextDecoder ? new TextDecoder() : void 0, B = (a, b = 0, c = NaN) => {
          var d = b + c;
          for (c = b; a[c] && !(c >= d); )
            ++c;
          if (16 < c - b && a.buffer && db)
            return db.decode(a.subarray(b, c));
          for (d = ""; b < c; ) {
            var e = a[b++];
            if (e & 128) {
              var h = a[b++] & 63;
              if (192 == (e & 224))
                d += String.fromCharCode((e & 31) << 6 | h);
              else {
                var k = a[b++] & 63;
                e = 224 == (e & 240) ? (e & 15) << 12 | h << 6 | k : (e & 7) << 18 | h << 12 | k << 6 | a[b++] & 63;
                65536 > e ? d += String.fromCharCode(e) : (e -= 65536, d += String.fromCharCode(55296 | e >> 10, 56320 | e & 1023));
              }
            } else
              d += String.fromCharCode(e);
          }
          return d;
        }, ua = (a, b) => a ? B(x, a, b) : "", eb = (a, b) => {
          for (var c = 0, d = a.length - 1; 0 <= d; d--) {
            var e = a[d];
            "." === e ? a.splice(d, 1) : ".." === e ? (a.splice(d, 1), c++) : c && (a.splice(d, 1), c--);
          }
          if (b)
            for (; c; c--)
              a.unshift("..");
          return a;
        }, ka = (a) => {
          var b = "/" === a.charAt(0), c = "/" === a.slice(-1);
          (a = eb(a.split("/").filter((d) => !!d), !b).join("/")) || b || (a = ".");
          a && c && (a += "/");
          return (b ? "/" : "") + a;
        }, fb = (a) => {
          var b = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/.exec(a).slice(1);
          a = b[0];
          b = b[1];
          if (!a && !b)
            return ".";
          b && (b = b.slice(0, -1));
          return a + b;
        }, gb = (a) => a && a.match(/([^\/]+|\/)\/*$/)[1], hb = () => {
          if (ca) {
            var a = require("crypto");
            return (b) => a.randomFillSync(b);
          }
          return (b) => crypto.getRandomValues(b);
        }, ib = (a) => {
          (ib = hb())(a);
        }, jb = (...a) => {
          for (var b = "", c = false, d = a.length - 1; -1 <= d && !c; d--) {
            c = 0 <= d ? a[d] : "/";
            if ("string" != typeof c)
              throw new TypeError("Arguments to path.resolve must be strings");
            if (!c)
              return "";
            b = c + "/" + b;
            c = "/" === c.charAt(0);
          }
          b = eb(b.split("/").filter((e) => !!e), !c).join("/");
          return (c ? "/" : "") + b || ".";
        }, kb = [], ha = (a) => {
          for (var b = 0, c = 0; c < a.length; ++c) {
            var d = a.charCodeAt(c);
            127 >= d ? b++ : 2047 >= d ? b += 2 : 55296 <= d && 57343 >= d ? (b += 4, ++c) : b += 3;
          }
          return b;
        }, u = (a, b, c, d) => {
          if (!(0 < d))
            return 0;
          var e = c;
          d = c + d - 1;
          for (var h = 0; h < a.length; ++h) {
            var k = a.charCodeAt(h);
            if (55296 <= k && 57343 >= k) {
              var q = a.charCodeAt(++h);
              k = 65536 + ((k & 1023) << 10) | q & 1023;
            }
            if (127 >= k) {
              if (c >= d)
                break;
              b[c++] = k;
            } else {
              if (2047 >= k) {
                if (c + 1 >= d)
                  break;
                b[c++] = 192 | k >> 6;
              } else {
                if (65535 >= k) {
                  if (c + 2 >= d)
                    break;
                  b[c++] = 224 | k >> 12;
                } else {
                  if (c + 3 >= d)
                    break;
                  b[c++] = 240 | k >> 18;
                  b[c++] = 128 | k >> 12 & 63;
                }
                b[c++] = 128 | k >> 6 & 63;
              }
              b[c++] = 128 | k & 63;
            }
          }
          b[c] = 0;
          return c - e;
        }, ra = (a, b) => {
          var c = Array(ha(a) + 1);
          a = u(a, c, 0, c.length);
          b && (c.length = a);
          return c;
        }, mb = [];
        function nb(a, b) {
          mb[a] = { input: [], output: [], cb: b };
          wb(a, xb);
        }
        var xb = { open(a) {
          var b = mb[a.node.rdev];
          if (!b)
            throw new N(43);
          a.tty = b;
          a.seekable = false;
        }, close(a) {
          a.tty.cb.fsync(a.tty);
        }, fsync(a) {
          a.tty.cb.fsync(a.tty);
        }, read(a, b, c, d) {
          if (!a.tty || !a.tty.cb.xb)
            throw new N(60);
          for (var e = 0, h = 0; h < d; h++) {
            try {
              var k = a.tty.cb.xb(a.tty);
            } catch (q) {
              throw new N(29);
            }
            if (void 0 === k && 0 === e)
              throw new N(6);
            if (null === k || void 0 === k)
              break;
            e++;
            b[c + h] = k;
          }
          e && (a.node.atime = Date.now());
          return e;
        }, write(a, b, c, d) {
          if (!a.tty || !a.tty.cb.qb)
            throw new N(60);
          try {
            for (var e = 0; e < d; e++)
              a.tty.cb.qb(a.tty, b[c + e]);
          } catch (h) {
            throw new N(29);
          }
          d && (a.node.mtime = a.node.ctime = Date.now());
          return e;
        } }, yb = { xb() {
          a: {
            if (!kb.length) {
              var a = null;
              if (ca) {
                var b = Buffer.alloc(256), c = 0, d = process.stdin.fd;
                try {
                  c = fs.readSync(d, b, 0, 256);
                } catch (e) {
                  if (e.toString().includes("EOF"))
                    c = 0;
                  else
                    throw e;
                }
                0 < c && (a = b.slice(0, c).toString("utf-8"));
              } else
                "undefined" != typeof window && "function" == typeof window.prompt && (a = window.prompt("Input: "), null !== a && (a += "\n"));
              if (!a) {
                a = null;
                break a;
              }
              kb = ra(a, true);
            }
            a = kb.shift();
          }
          return a;
        }, qb(a, b) {
          null === b || 10 === b ? (Ha(B(a.output)), a.output = []) : 0 != b && a.output.push(b);
        }, fsync(a) {
          var _a;
          0 < ((_a = a.output) == null ? void 0 : _a.length) && (Ha(B(a.output)), a.output = []);
        }, Tb() {
          return { Ob: 25856, Qb: 5, Nb: 191, Pb: 35387, Mb: [3, 28, 127, 21, 4, 0, 1, 0, 17, 19, 26, 0, 18, 15, 23, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] };
        }, Ub() {
          return 0;
        }, Vb() {
          return [24, 80];
        } }, zb = { qb(a, b) {
          null === b || 10 === b ? (Ia(B(a.output)), a.output = []) : 0 != b && a.output.push(b);
        }, fsync(a) {
          var _a;
          0 < ((_a = a.output) == null ? void 0 : _a.length) && (Ia(B(a.output)), a.output = []);
        } }, O = { Wa: null, Xa() {
          return O.createNode(null, "/", 16895, 0);
        }, createNode(a, b, c, d) {
          if (24576 === (c & 61440) || 4096 === (c & 61440))
            throw new N(63);
          O.Wa || (O.Wa = { dir: { node: { Ta: O.La.Ta, Ua: O.La.Ua, lookup: O.La.lookup, hb: O.La.hb, rename: O.La.rename, unlink: O.La.unlink, rmdir: O.La.rmdir, readdir: O.La.readdir, symlink: O.La.symlink }, stream: { Va: O.Ma.Va } }, file: { node: { Ta: O.La.Ta, Ua: O.La.Ua }, stream: { Va: O.Ma.Va, read: O.Ma.read, write: O.Ma.write, ib: O.Ma.ib, jb: O.Ma.jb } }, link: { node: { Ta: O.La.Ta, Ua: O.La.Ua, readlink: O.La.readlink }, stream: {} }, ub: { node: { Ta: O.La.Ta, Ua: O.La.Ua }, stream: Ab } });
          c = Bb(a, b, c, d);
          P(c.mode) ? (c.La = O.Wa.dir.node, c.Ma = O.Wa.dir.stream, c.Na = {}) : 32768 === (c.mode & 61440) ? (c.La = O.Wa.file.node, c.Ma = O.Wa.file.stream, c.Ra = 0, c.Na = null) : 40960 === (c.mode & 61440) ? (c.La = O.Wa.link.node, c.Ma = O.Wa.link.stream) : 8192 === (c.mode & 61440) && (c.La = O.Wa.ub.node, c.Ma = O.Wa.ub.stream);
          c.atime = c.mtime = c.ctime = Date.now();
          a && (a.Na[b] = c, a.atime = a.mtime = a.ctime = c.atime);
          return c;
        }, Sb(a) {
          return a.Na ? a.Na.subarray ? a.Na.subarray(0, a.Ra) : new Uint8Array(a.Na) : new Uint8Array(0);
        }, La: { Ta(a) {
          var b = {};
          b.dev = 8192 === (a.mode & 61440) ? a.id : 1;
          b.ino = a.id;
          b.mode = a.mode;
          b.nlink = 1;
          b.uid = 0;
          b.gid = 0;
          b.rdev = a.rdev;
          P(a.mode) ? b.size = 4096 : 32768 === (a.mode & 61440) ? b.size = a.Ra : 40960 === (a.mode & 61440) ? b.size = a.link.length : b.size = 0;
          b.atime = new Date(a.atime);
          b.mtime = new Date(a.mtime);
          b.ctime = new Date(a.ctime);
          b.blksize = 4096;
          b.blocks = Math.ceil(b.size / b.blksize);
          return b;
        }, Ua(a, b) {
          for (var c of ["mode", "atime", "mtime", "ctime"])
            null != b[c] && (a[c] = b[c]);
          void 0 !== b.size && (b = b.size, a.Ra != b && (0 == b ? (a.Na = null, a.Ra = 0) : (c = a.Na, a.Na = new Uint8Array(b), c && a.Na.set(c.subarray(0, Math.min(b, a.Ra))), a.Ra = b)));
        }, lookup() {
          throw O.vb;
        }, hb(a, b, c, d) {
          return O.createNode(a, b, c, d);
        }, rename(a, b, c) {
          try {
            var d = Q(b, c);
          } catch (h) {
          }
          if (d) {
            if (P(a.mode))
              for (var e in d.Na)
                throw new N(55);
            Cb(d);
          }
          delete a.parent.Na[a.name];
          b.Na[c] = a;
          a.name = c;
          b.ctime = b.mtime = a.parent.ctime = a.parent.mtime = Date.now();
        }, unlink(a, b) {
          delete a.Na[b];
          a.ctime = a.mtime = Date.now();
        }, rmdir(a, b) {
          var c = Q(a, b), d;
          for (d in c.Na)
            throw new N(55);
          delete a.Na[b];
          a.ctime = a.mtime = Date.now();
        }, readdir(a) {
          return [".", "..", ...Object.keys(a.Na)];
        }, symlink(a, b, c) {
          a = O.createNode(a, b, 41471, 0);
          a.link = c;
          return a;
        }, readlink(a) {
          if (40960 !== (a.mode & 61440))
            throw new N(28);
          return a.link;
        } }, Ma: { read(a, b, c, d, e) {
          var h = a.node.Na;
          if (e >= a.node.Ra)
            return 0;
          a = Math.min(a.node.Ra - e, d);
          if (8 < a && h.subarray)
            b.set(h.subarray(e, e + a), c);
          else
            for (d = 0; d < a; d++)
              b[c + d] = h[e + d];
          return a;
        }, write(a, b, c, d, e, h) {
          b.buffer === p.buffer && (h = false);
          if (!d)
            return 0;
          a = a.node;
          a.mtime = a.ctime = Date.now();
          if (b.subarray && (!a.Na || a.Na.subarray)) {
            if (h)
              return a.Na = b.subarray(c, c + d), a.Ra = d;
            if (0 === a.Ra && 0 === e)
              return a.Na = b.slice(c, c + d), a.Ra = d;
            if (e + d <= a.Ra)
              return a.Na.set(b.subarray(
                c,
                c + d
              ), e), d;
          }
          h = e + d;
          var k = a.Na ? a.Na.length : 0;
          k >= h || (h = Math.max(h, k * (1048576 > k ? 2 : 1.125) >>> 0), 0 != k && (h = Math.max(h, 256)), k = a.Na, a.Na = new Uint8Array(h), 0 < a.Ra && a.Na.set(k.subarray(0, a.Ra), 0));
          if (a.Na.subarray && b.subarray)
            a.Na.set(b.subarray(c, c + d), e);
          else
            for (h = 0; h < d; h++)
              a.Na[e + h] = b[c + h];
          a.Ra = Math.max(a.Ra, e + d);
          return d;
        }, Va(a, b, c) {
          1 === c ? b += a.position : 2 === c && 32768 === (a.node.mode & 61440) && (b += a.node.Ra);
          if (0 > b)
            throw new N(28);
          return b;
        }, ib(a, b, c, d, e) {
          if (32768 !== (a.node.mode & 61440))
            throw new N(43);
          a = a.node.Na;
          if (e & 2 || !a || a.buffer !== p.buffer) {
            e = true;
            d = 65536 * Math.ceil(b / 65536);
            var h = Db(65536, d);
            h && x.fill(0, h, h + d);
            d = h;
            if (!d)
              throw new N(48);
            if (a) {
              if (0 < c || c + b < a.length)
                a.subarray ? a = a.subarray(c, c + b) : a = Array.prototype.slice.call(a, c, c + b);
              p.set(a, d);
            }
          } else
            e = false, d = a.byteOffset;
          return { Kb: d, Ab: e };
        }, jb(a, b, c, d) {
          O.Ma.write(a, b, 0, d, c, false);
          return 0;
        } } }, la = (a, b) => {
          var c = 0;
          a && (c |= 365);
          b && (c |= 146);
          return c;
        }, Eb = null, Fb = {}, Gb = [], Hb = 1, R = null, Ib = false, Jb = true, Kb = {}, N = class {
          constructor(a) {
            __publicField(this, "name", "ErrnoError");
            this.Pa = a;
          }
        }, Lb = class {
          constructor() {
            __publicField(this, "gb", {});
            __publicField(this, "node", null);
          }
          get flags() {
            return this.gb.flags;
          }
          set flags(a) {
            this.gb.flags = a;
          }
          get position() {
            return this.gb.position;
          }
          set position(a) {
            this.gb.position = a;
          }
        }, Mb = class {
          constructor(a, b, c, d) {
            __publicField(this, "La", {});
            __publicField(this, "Ma", {});
            __publicField(this, "ab", null);
            a || (a = this);
            this.parent = a;
            this.Xa = a.Xa;
            this.id = Hb++;
            this.name = b;
            this.mode = c;
            this.rdev = d;
            this.atime = this.mtime = this.ctime = Date.now();
          }
          get read() {
            return 365 === (this.mode & 365);
          }
          set read(a) {
            a ? this.mode |= 365 : this.mode &= -366;
          }
          get write() {
            return 146 === (this.mode & 146);
          }
          set write(a) {
            a ? this.mode |= 146 : this.mode &= -147;
          }
        };
        function S(a, b = {}) {
          var _a;
          if (!a)
            throw new N(44);
          (_a = b.nb) != null ? _a : b.nb = true;
          "/" === a.charAt(0) || (a = "//" + a);
          var c = 0;
          a:
            for (; 40 > c; c++) {
              a = a.split("/").filter((q) => !!q);
              for (var d = Eb, e = "/", h = 0; h < a.length; h++) {
                var k = h === a.length - 1;
                if (k && b.parent)
                  break;
                if ("." !== a[h])
                  if (".." === a[h])
                    e = fb(e), d = d.parent;
                  else {
                    e = ka(e + "/" + a[h]);
                    try {
                      d = Q(d, a[h]);
                    } catch (q) {
                      if (44 === (q == null ? void 0 : q.Pa) && k && b.Jb)
                        return { path: e };
                      throw q;
                    }
                    !d.ab || k && !b.nb || (d = d.ab.root);
                    if (40960 === (d.mode & 61440) && (!k || b.$a)) {
                      if (!d.La.readlink)
                        throw new N(52);
                      d = d.La.readlink(d);
                      "/" === d.charAt(0) || (d = fb(e) + "/" + d);
                      a = d + "/" + a.slice(h + 1).join("/");
                      continue a;
                    }
                  }
              }
              return { path: e, node: d };
            }
          throw new N(32);
        }
        function ja(a) {
          for (var b; ; ) {
            if (a === a.parent)
              return a = a.Xa.zb, b ? "/" !== a[a.length - 1] ? `${a}/${b}` : a + b : a;
            b = b ? `${a.name}/${b}` : a.name;
            a = a.parent;
          }
        }
        function Nb(a, b) {
          for (var c = 0, d = 0; d < b.length; d++)
            c = (c << 5) - c + b.charCodeAt(d) | 0;
          return (a + c >>> 0) % R.length;
        }
        function Cb(a) {
          var b = Nb(a.parent.id, a.name);
          if (R[b] === a)
            R[b] = a.bb;
          else
            for (b = R[b]; b; ) {
              if (b.bb === a) {
                b.bb = a.bb;
                break;
              }
              b = b.bb;
            }
        }
        function Q(a, b) {
          var c = P(a.mode) ? (c = Ob(a, "x")) ? c : a.La.lookup ? 0 : 2 : 54;
          if (c)
            throw new N(c);
          for (c = R[Nb(a.id, b)]; c; c = c.bb) {
            var d = c.name;
            if (c.parent.id === a.id && d === b)
              return c;
          }
          return a.La.lookup(a, b);
        }
        function Bb(a, b, c, d) {
          a = new Mb(a, b, c, d);
          b = Nb(a.parent.id, a.name);
          a.bb = R[b];
          return R[b] = a;
        }
        function P(a) {
          return 16384 === (a & 61440);
        }
        function Pb(a) {
          var b = ["r", "w", "rw"][a & 3];
          a & 512 && (b += "w");
          return b;
        }
        function Ob(a, b) {
          if (Jb)
            return 0;
          if (!b.includes("r") || a.mode & 292) {
            if (b.includes("w") && !(a.mode & 146) || b.includes("x") && !(a.mode & 73))
              return 2;
          } else
            return 2;
          return 0;
        }
        function Qb(a, b) {
          if (!P(a.mode))
            return 54;
          try {
            return Q(a, b), 20;
          } catch (c) {
          }
          return Ob(a, "wx");
        }
        function Rb(a, b, c) {
          try {
            var d = Q(a, b);
          } catch (e) {
            return e.Pa;
          }
          if (a = Ob(a, "wx"))
            return a;
          if (c) {
            if (!P(d.mode))
              return 54;
            if (d === d.parent || "/" === ja(d))
              return 10;
          } else if (P(d.mode))
            return 31;
          return 0;
        }
        function Sb(a) {
          if (!a)
            throw new N(63);
          return a;
        }
        function T(a) {
          a = Gb[a];
          if (!a)
            throw new N(8);
          return a;
        }
        function Tb(a, b = -1) {
          a = Object.assign(new Lb(), a);
          if (-1 == b)
            a: {
              for (b = 0; 4096 >= b; b++)
                if (!Gb[b])
                  break a;
              throw new N(33);
            }
          a.fd = b;
          return Gb[b] = a;
        }
        function Ub(a, b = -1) {
          var _a, _b;
          a = Tb(a, b);
          (_b = (_a = a.Ma) == null ? void 0 : _a.Rb) == null ? void 0 : _b.call(_a, a);
          return a;
        }
        function Vb(a, b, c) {
          var d = a == null ? void 0 : a.Ma.Ua;
          a = d ? a : b;
          d != null ? d : d = b.La.Ua;
          Sb(d);
          d(a, c);
        }
        var Ab = { open(a) {
          var _a, _b;
          a.Ma = Fb[a.node.rdev].Ma;
          (_b = (_a = a.Ma).open) == null ? void 0 : _b.call(_a, a);
        }, Va() {
          throw new N(70);
        } };
        function wb(a, b) {
          Fb[a] = { Ma: b };
        }
        function Wb(a, b) {
          var c = "/" === b;
          if (c && Eb)
            throw new N(10);
          if (!c && b) {
            var d = S(b, { nb: false });
            b = d.path;
            d = d.node;
            if (d.ab)
              throw new N(10);
            if (!P(d.mode))
              throw new N(54);
          }
          b = { type: a, Wb: {}, zb: b, Ib: [] };
          a = a.Xa(b);
          a.Xa = b;
          b.root = a;
          c ? Eb = a : d && (d.ab = b, d.Xa && d.Xa.Ib.push(b));
        }
        function Xb(a, b, c) {
          var d = S(a, { parent: true }).node;
          a = gb(a);
          if (!a)
            throw new N(28);
          if ("." === a || ".." === a)
            throw new N(20);
          var e = Qb(d, a);
          if (e)
            throw new N(e);
          if (!d.La.hb)
            throw new N(63);
          return d.La.hb(d, a, b, c);
        }
        function ma(a, b = 438) {
          return Xb(a, b & 4095 | 32768, 0);
        }
        function U(a, b = 511) {
          return Xb(a, b & 1023 | 16384, 0);
        }
        function Yb(a, b, c) {
          "undefined" == typeof c && (c = b, b = 438);
          Xb(a, b | 8192, c);
        }
        function Zb(a, b) {
          if (!jb(a))
            throw new N(44);
          var c = S(b, { parent: true }).node;
          if (!c)
            throw new N(44);
          b = gb(b);
          var d = Qb(c, b);
          if (d)
            throw new N(d);
          if (!c.La.symlink)
            throw new N(63);
          c.La.symlink(c, b, a);
        }
        function $b(a) {
          var b = S(a, { parent: true }).node;
          a = gb(a);
          var c = Q(b, a), d = Rb(b, a, true);
          if (d)
            throw new N(d);
          if (!b.La.rmdir)
            throw new N(63);
          if (c.ab)
            throw new N(10);
          b.La.rmdir(b, a);
          Cb(c);
        }
        function za(a) {
          var b = S(a, { parent: true }).node;
          if (!b)
            throw new N(44);
          a = gb(a);
          var c = Q(b, a), d = Rb(b, a, false);
          if (d)
            throw new N(d);
          if (!b.La.unlink)
            throw new N(63);
          if (c.ab)
            throw new N(10);
          b.La.unlink(b, a);
          Cb(c);
        }
        function ac(a, b) {
          a = S(a, { $a: !b }).node;
          return Sb(a.La.Ta)(a);
        }
        function bc(a, b, c, d) {
          Vb(a, b, { mode: c & 4095 | b.mode & -4096, ctime: Date.now(), Fb: d });
        }
        function na(a, b) {
          a = "string" == typeof a ? S(a, { $a: true }).node : a;
          bc(null, a, b);
        }
        function cc(a, b, c) {
          if (P(b.mode))
            throw new N(31);
          if (32768 !== (b.mode & 61440))
            throw new N(28);
          var d = Ob(b, "w");
          if (d)
            throw new N(d);
          Vb(a, b, { size: c, timestamp: Date.now() });
        }
        function oa(a, b, c = 438) {
          if ("" === a)
            throw new N(44);
          if ("string" == typeof b) {
            var d = { r: 0, "r+": 2, w: 577, "w+": 578, a: 1089, "a+": 1090 }[b];
            if ("undefined" == typeof d)
              throw Error(`Unknown file open mode: ${b}`);
            b = d;
          }
          c = b & 64 ? c & 4095 | 32768 : 0;
          if ("object" == typeof a)
            d = a;
          else {
            var e = a.endsWith("/");
            a = S(a, { $a: !(b & 131072), Jb: true });
            d = a.node;
            a = a.path;
          }
          var h = false;
          if (b & 64)
            if (d) {
              if (b & 128)
                throw new N(20);
            } else {
              if (e)
                throw new N(31);
              d = Xb(a, c | 511, 0);
              h = true;
            }
          if (!d)
            throw new N(44);
          8192 === (d.mode & 61440) && (b &= -513);
          if (b & 65536 && !P(d.mode))
            throw new N(54);
          if (!h && (e = d ? 40960 === (d.mode & 61440) ? 32 : P(d.mode) && ("r" !== Pb(b) || b & 576) ? 31 : Ob(d, Pb(b)) : 44))
            throw new N(e);
          b & 512 && !h && (e = d, e = "string" == typeof e ? S(e, { $a: true }).node : e, cc(null, e, 0));
          b &= -131713;
          e = Tb({ node: d, path: ja(d), flags: b, seekable: true, position: 0, Ma: d.Ma, Lb: [], error: false });
          e.Ma.open && e.Ma.open(e);
          h && na(d, c & 511);
          !f.logReadFiles || b & 1 || a in Kb || (Kb[a] = 1);
          return e;
        }
        function qa(a) {
          if (null === a.fd)
            throw new N(8);
          a.ob && (a.ob = null);
          try {
            a.Ma.close && a.Ma.close(a);
          } catch (b) {
            throw b;
          } finally {
            Gb[a.fd] = null;
          }
          a.fd = null;
        }
        function mc(a, b, c) {
          if (null === a.fd)
            throw new N(8);
          if (!a.seekable || !a.Ma.Va)
            throw new N(70);
          if (0 != c && 1 != c && 2 != c)
            throw new N(28);
          a.position = a.Ma.Va(a, b, c);
          a.Lb = [];
        }
        function Ec(a, b, c, d, e) {
          if (0 > d || 0 > e)
            throw new N(28);
          if (null === a.fd)
            throw new N(8);
          if (1 === (a.flags & 2097155))
            throw new N(8);
          if (P(a.node.mode))
            throw new N(31);
          if (!a.Ma.read)
            throw new N(28);
          var h = "undefined" != typeof e;
          if (!h)
            e = a.position;
          else if (!a.seekable)
            throw new N(70);
          b = a.Ma.read(a, b, c, d, e);
          h || (a.position += b);
          return b;
        }
        function pa(a, b, c, d, e) {
          if (0 > d || 0 > e)
            throw new N(28);
          if (null === a.fd)
            throw new N(8);
          if (0 === (a.flags & 2097155))
            throw new N(8);
          if (P(a.node.mode))
            throw new N(31);
          if (!a.Ma.write)
            throw new N(28);
          a.seekable && a.flags & 1024 && mc(a, 0, 2);
          var h = "undefined" != typeof e;
          if (!h)
            e = a.position;
          else if (!a.seekable)
            throw new N(70);
          b = a.Ma.write(a, b, c, d, e, void 0);
          h || (a.position += b);
          return b;
        }
        function ya(a) {
          var b = "binary";
          if ("utf8" !== b && "binary" !== b)
            throw Error(`Invalid encoding type "${b}"`);
          var c;
          var d = oa(a, d || 0);
          a = ac(a).size;
          var e = new Uint8Array(a);
          Ec(d, e, 0, a, 0);
          "utf8" === b ? c = B(e) : "binary" === b && (c = e);
          qa(d);
          return c;
        }
        function V(a, b, c) {
          var _a;
          a = ka("/dev/" + a);
          var d = la(!!b, !!c);
          (_a = V.yb) != null ? _a : V.yb = 64;
          var e = V.yb++ << 8 | 0;
          wb(e, { open(h) {
            h.seekable = false;
          }, close() {
            var _a2;
            ((_a2 = c == null ? void 0 : c.buffer) == null ? void 0 : _a2.length) && c(10);
          }, read(h, k, q, w) {
            for (var v = 0, C = 0; C < w; C++) {
              try {
                var G = b();
              } catch (pb) {
                throw new N(29);
              }
              if (void 0 === G && 0 === v)
                throw new N(6);
              if (null === G || void 0 === G)
                break;
              v++;
              k[q + C] = G;
            }
            v && (h.node.atime = Date.now());
            return v;
          }, write(h, k, q, w) {
            for (var v = 0; v < w; v++)
              try {
                c(k[q + v]);
              } catch (C) {
                throw new N(29);
              }
            w && (h.node.mtime = h.node.ctime = Date.now());
            return v;
          } });
          Yb(a, d, e);
        }
        var W = {};
        function Gc(a, b, c) {
          if ("/" === b.charAt(0))
            return b;
          a = -100 === a ? "/" : T(a).path;
          if (0 == b.length) {
            if (!c)
              throw new N(44);
            return a;
          }
          return a + "/" + b;
        }
        function Hc(a, b) {
          E[a >> 2] = b.dev;
          E[a + 4 >> 2] = b.mode;
          F[a + 8 >> 2] = b.nlink;
          E[a + 12 >> 2] = b.uid;
          E[a + 16 >> 2] = b.gid;
          E[a + 20 >> 2] = b.rdev;
          H[a + 24 >> 3] = BigInt(b.size);
          E[a + 32 >> 2] = 4096;
          E[a + 36 >> 2] = b.blocks;
          var c = b.atime.getTime(), d = b.mtime.getTime(), e = b.ctime.getTime();
          H[a + 40 >> 3] = BigInt(Math.floor(c / 1e3));
          F[a + 48 >> 2] = c % 1e3 * 1e6;
          H[a + 56 >> 3] = BigInt(Math.floor(d / 1e3));
          F[a + 64 >> 2] = d % 1e3 * 1e6;
          H[a + 72 >> 3] = BigInt(Math.floor(e / 1e3));
          F[a + 80 >> 2] = e % 1e3 * 1e6;
          H[a + 88 >> 3] = BigInt(b.ino);
          return 0;
        }
        var Ic = void 0, Jc = () => {
          var a = E[+Ic >> 2];
          Ic += 4;
          return a;
        }, Kc = 0, Lc = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335], Mc = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334], Nc = {}, Oc = (a) => {
          var _a;
          Ma = a;
          cb || 0 < Kc || ((_a = f.onExit) == null ? void 0 : _a.call(f, a), La = true);
          Da(a, new Ya(a));
        }, Pc = (a) => {
          if (!La)
            try {
              if (a(), !(cb || 0 < Kc))
                try {
                  Ma = a = Ma, Oc(a);
                } catch (b) {
                  b instanceof Ya || "unwind" == b || Da(1, b);
                }
            } catch (b) {
              b instanceof Ya || "unwind" == b || Da(1, b);
            }
        }, Qc = {}, Sc = () => {
          if (!Rc) {
            var a = { USER: "web_user", LOGNAME: "web_user", PATH: "/", PWD: "/", HOME: "/home/web_user", LANG: ("object" == typeof navigator && navigator.languages && navigator.languages[0] || "C").replace("-", "_") + ".UTF-8", _: Ca || "./this.program" }, b;
            for (b in Qc)
              void 0 === Qc[b] ? delete a[b] : a[b] = Qc[b];
            var c = [];
            for (b in a)
              c.push(`${b}=${a[b]}`);
            Rc = c;
          }
          return Rc;
        }, Rc, xa = (a) => {
          var b = ha(a) + 1, c = z(b);
          u(a, x, c, b);
          return c;
        }, Tc = (a, b, c, d) => {
          var e = { string: (v) => {
            var C = 0;
            null !== v && void 0 !== v && 0 !== v && (C = xa(v));
            return C;
          }, array: (v) => {
            var C = z(v.length);
            p.set(v, C);
            return C;
          } };
          a = f["_" + a];
          var h = [], k = 0;
          if (d)
            for (var q = 0; q < d.length; q++) {
              var w = e[c[q]];
              w ? (0 === k && (k = sa()), h[q] = w(d[q])) : h[q] = d[q];
            }
          c = a(...h);
          return c = function(v) {
            0 !== k && wa(k);
            return "string" === b ? v ? B(x, v) : "" : "boolean" === b ? !!v : v;
          }(c);
        }, ea = 0, da = (a, b) => {
          b = 1 == b ? z(a.length) : ia(a.length);
          a.subarray || a.slice || (a = new Uint8Array(a));
          x.set(a, b);
          return b;
        }, Uc, Vc = [], Y, A = (a) => {
          Uc.delete(Y.get(a));
          Y.set(a, null);
          Vc.push(a);
        }, Aa = (a, b) => {
          if (!Uc) {
            Uc = /* @__PURE__ */ new WeakMap();
            var c = Y.length;
            if (Uc)
              for (var d = 0; d < 0 + c; d++) {
                var e = Y.get(d);
                e && Uc.set(e, d);
              }
          }
          if (c = Uc.get(a) || 0)
            return c;
          if (Vc.length)
            c = Vc.pop();
          else {
            try {
              Y.grow(1);
            } catch (w) {
              if (!(w instanceof RangeError))
                throw w;
              throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
            }
            c = Y.length - 1;
          }
          try {
            Y.set(c, a);
          } catch (w) {
            if (!(w instanceof TypeError))
              throw w;
            if ("function" == typeof WebAssembly.Function) {
              var h = WebAssembly.Function;
              d = { i: "i32", j: "i64", f: "f32", d: "f64", e: "externref", p: "i32" };
              e = { parameters: [], results: "v" == b[0] ? [] : [d[b[0]]] };
              for (var k = 1; k < b.length; ++k)
                e.parameters.push(d[b[k]]);
              b = new h(e, a);
            } else {
              d = [1];
              e = b.slice(0, 1);
              b = b.slice(1);
              k = { i: 127, p: 127, j: 126, f: 125, d: 124, e: 111 };
              d.push(96);
              var q = b.length;
              128 > q ? d.push(q) : d.push(q % 128 | 128, q >> 7);
              for (h of b)
                d.push(k[h]);
              "v" == e ? d.push(0) : d.push(1, k[e]);
              b = [0, 97, 115, 109, 1, 0, 0, 0, 1];
              h = d.length;
              128 > h ? b.push(h) : b.push(h % 128 | 128, h >> 7);
              b.push(...d);
              b.push(2, 7, 1, 1, 101, 1, 102, 0, 0, 7, 5, 1, 1, 102, 0, 0);
              b = new WebAssembly.Module(new Uint8Array(b));
              b = new WebAssembly.Instance(b, { e: { f: a } }).exports.f;
            }
            Y.set(c, b);
          }
          Uc.set(a, c);
          return c;
        };
        R = Array(4096);
        Wb(O, "/");
        U("/tmp");
        U("/home");
        U("/home/web_user");
        (function() {
          U("/dev");
          wb(259, { read: () => 0, write: (d, e, h, k) => k, Va: () => 0 });
          Yb("/dev/null", 259);
          nb(1280, yb);
          nb(1536, zb);
          Yb("/dev/tty", 1280);
          Yb("/dev/tty1", 1536);
          var a = new Uint8Array(1024), b = 0, c = () => {
            0 === b && (ib(a), b = a.byteLength);
            return a[--b];
          };
          V("random", c);
          V("urandom", c);
          U("/dev/shm");
          U("/dev/shm/tmp");
        })();
        (function() {
          U("/proc");
          var a = U("/proc/self");
          U("/proc/self/fd");
          Wb({ Xa() {
            var b = Bb(a, "fd", 16895, 73);
            b.Ma = { Va: O.Ma.Va };
            b.La = { lookup(c, d) {
              c = +d;
              var e = T(c);
              c = { parent: null, Xa: { zb: "fake" }, La: { readlink: () => e.path }, id: c + 1 };
              return c.parent = c;
            }, readdir() {
              return Array.from(Gb.entries()).filter(([, c]) => c).map(([c]) => c.toString());
            } };
            return b;
          } }, "/proc/self/fd");
        })();
        O.vb = new N(44);
        O.vb.stack = "<generic error, no stack>";
        var Xc = { a: (a, b, c, d) => Ta(`Assertion failed: ${a ? B(x, a) : ""}, at: ` + [b ? b ? B(x, b) : "" : "unknown filename", c, d ? d ? B(x, d) : "" : "unknown function"]), i: function(a, b) {
          try {
            return a = a ? B(x, a) : "", na(a, b), 0;
          } catch (c) {
            if ("undefined" == typeof W || "ErrnoError" !== c.name)
              throw c;
            return -c.Pa;
          }
        }, L: function(a, b, c) {
          try {
            b = b ? B(x, b) : "";
            b = Gc(a, b);
            if (c & -8)
              return -28;
            var d = S(b, { $a: true }).node;
            if (!d)
              return -44;
            a = "";
            c & 4 && (a += "r");
            c & 2 && (a += "w");
            c & 1 && (a += "x");
            return a && Ob(d, a) ? -2 : 0;
          } catch (e) {
            if ("undefined" == typeof W || "ErrnoError" !== e.name)
              throw e;
            return -e.Pa;
          }
        }, j: function(a, b) {
          try {
            var c = T(a);
            bc(c, c.node, b, false);
            return 0;
          } catch (d) {
            if ("undefined" == typeof W || "ErrnoError" !== d.name)
              throw d;
            return -d.Pa;
          }
        }, h: function(a) {
          try {
            var b = T(a);
            Vb(b, b.node, { timestamp: Date.now(), Fb: false });
            return 0;
          } catch (c) {
            if ("undefined" == typeof W || "ErrnoError" !== c.name)
              throw c;
            return -c.Pa;
          }
        }, b: function(a, b, c) {
          Ic = c;
          try {
            var d = T(a);
            switch (b) {
              case 0:
                var e = Jc();
                if (0 > e)
                  break;
                for (; Gb[e]; )
                  e++;
                return Ub(d, e).fd;
              case 1:
              case 2:
                return 0;
              case 3:
                return d.flags;
              case 4:
                return e = Jc(), d.flags |= e, 0;
              case 12:
                return e = Jc(), Na[e + 0 >> 1] = 2, 0;
              case 13:
              case 14:
                return 0;
            }
            return -28;
          } catch (h) {
            if ("undefined" == typeof W || "ErrnoError" !== h.name)
              throw h;
            return -h.Pa;
          }
        }, g: function(a, b) {
          try {
            var c = T(a), d = c.node, e = c.Ma.Ta;
            a = e ? c : d;
            e != null ? e : e = d.La.Ta;
            Sb(e);
            var h = e(a);
            return Hc(b, h);
          } catch (k) {
            if ("undefined" == typeof W || "ErrnoError" !== k.name)
              throw k;
            return -k.Pa;
          }
        }, H: function(a, b) {
          b = -9007199254740992 > b || 9007199254740992 < b ? NaN : Number(b);
          try {
            if (isNaN(b))
              return 61;
            var c = T(a);
            if (0 > b || 0 === (c.flags & 2097155))
              throw new N(28);
            cc(c, c.node, b);
            return 0;
          } catch (d) {
            if ("undefined" == typeof W || "ErrnoError" !== d.name)
              throw d;
            return -d.Pa;
          }
        }, G: function(a, b) {
          try {
            if (0 === b)
              return -28;
            var c = ha("/") + 1;
            if (b < c)
              return -68;
            u("/", x, a, b);
            return c;
          } catch (d) {
            if ("undefined" == typeof W || "ErrnoError" !== d.name)
              throw d;
            return -d.Pa;
          }
        }, K: function(a, b) {
          try {
            return a = a ? B(x, a) : "", Hc(b, ac(a, true));
          } catch (c) {
            if ("undefined" == typeof W || "ErrnoError" !== c.name)
              throw c;
            return -c.Pa;
          }
        }, C: function(a, b, c) {
          try {
            return b = b ? B(x, b) : "", b = Gc(a, b), U(b, c), 0;
          } catch (d) {
            if ("undefined" == typeof W || "ErrnoError" !== d.name)
              throw d;
            return -d.Pa;
          }
        }, J: function(a, b, c, d) {
          try {
            b = b ? B(x, b) : "";
            var e = d & 256;
            b = Gc(a, b, d & 4096);
            return Hc(c, e ? ac(b, true) : ac(b));
          } catch (h) {
            if ("undefined" == typeof W || "ErrnoError" !== h.name)
              throw h;
            return -h.Pa;
          }
        }, x: function(a, b, c, d) {
          Ic = d;
          try {
            b = b ? B(x, b) : "";
            b = Gc(a, b);
            var e = d ? Jc() : 0;
            return oa(b, c, e).fd;
          } catch (h) {
            if ("undefined" == typeof W || "ErrnoError" !== h.name)
              throw h;
            return -h.Pa;
          }
        }, v: function(a, b, c, d) {
          try {
            b = b ? B(x, b) : "";
            b = Gc(a, b);
            if (0 >= d)
              return -28;
            var e = S(b).node;
            if (!e)
              throw new N(44);
            if (!e.La.readlink)
              throw new N(28);
            var h = e.La.readlink(e);
            var k = Math.min(d, ha(h)), q = p[c + k];
            u(h, x, c, d + 1);
            p[c + k] = q;
            return k;
          } catch (w) {
            if ("undefined" == typeof W || "ErrnoError" !== w.name)
              throw w;
            return -w.Pa;
          }
        }, u: function(a) {
          try {
            return a = a ? B(x, a) : "", $b(a), 0;
          } catch (b) {
            if ("undefined" == typeof W || "ErrnoError" !== b.name)
              throw b;
            return -b.Pa;
          }
        }, f: function(a, b) {
          try {
            return a = a ? B(x, a) : "", Hc(b, ac(a));
          } catch (c) {
            if ("undefined" == typeof W || "ErrnoError" !== c.name)
              throw c;
            return -c.Pa;
          }
        }, r: function(a, b, c) {
          try {
            return b = b ? B(x, b) : "", b = Gc(a, b), 0 === c ? za(b) : 512 === c ? $b(b) : Ta("Invalid flags passed to unlinkat"), 0;
          } catch (d) {
            if ("undefined" == typeof W || "ErrnoError" !== d.name)
              throw d;
            return -d.Pa;
          }
        }, q: function(a, b, c) {
          try {
            b = b ? B(x, b) : "";
            b = Gc(a, b, true);
            var d = Date.now(), e, h;
            if (c) {
              var k = F[c >> 2] + 4294967296 * E[c + 4 >> 2], q = E[c + 8 >> 2];
              1073741823 == q ? e = d : 1073741822 == q ? e = null : e = 1e3 * k + q / 1e6;
              c += 16;
              k = F[c >> 2] + 4294967296 * E[c + 4 >> 2];
              q = E[c + 8 >> 2];
              1073741823 == q ? h = d : 1073741822 == q ? h = null : h = 1e3 * k + q / 1e6;
            } else
              h = e = d;
            if (null !== (h != null ? h : e)) {
              a = e;
              var w = S(b, { $a: true }).node;
              Sb(w.La.Ua)(w, { atime: a, mtime: h });
            }
            return 0;
          } catch (v) {
            if ("undefined" == typeof W || "ErrnoError" !== v.name)
              throw v;
            return -v.Pa;
          }
        }, m: () => Ta(""), l: () => {
          cb = false;
          Kc = 0;
        }, A: function(a, b) {
          a = -9007199254740992 > a || 9007199254740992 < a ? NaN : Number(a);
          a = new Date(1e3 * a);
          E[b >> 2] = a.getSeconds();
          E[b + 4 >> 2] = a.getMinutes();
          E[b + 8 >> 2] = a.getHours();
          E[b + 12 >> 2] = a.getDate();
          E[b + 16 >> 2] = a.getMonth();
          E[b + 20 >> 2] = a.getFullYear() - 1900;
          E[b + 24 >> 2] = a.getDay();
          var c = a.getFullYear();
          E[b + 28 >> 2] = (0 !== c % 4 || 0 === c % 100 && 0 !== c % 400 ? Mc : Lc)[a.getMonth()] + a.getDate() - 1 | 0;
          E[b + 36 >> 2] = -(60 * a.getTimezoneOffset());
          c = new Date(
            a.getFullYear(),
            6,
            1
          ).getTimezoneOffset();
          var d = new Date(a.getFullYear(), 0, 1).getTimezoneOffset();
          E[b + 32 >> 2] = (c != d && a.getTimezoneOffset() == Math.min(d, c)) | 0;
        }, y: function(a, b, c, d, e, h, k) {
          e = -9007199254740992 > e || 9007199254740992 < e ? NaN : Number(e);
          try {
            if (isNaN(e))
              return 61;
            var q = T(d);
            if (0 !== (b & 2) && 0 === (c & 2) && 2 !== (q.flags & 2097155))
              throw new N(2);
            if (1 === (q.flags & 2097155))
              throw new N(2);
            if (!q.Ma.ib)
              throw new N(43);
            if (!a)
              throw new N(28);
            var w = q.Ma.ib(q, a, e, b, c);
            var v = w.Kb;
            E[h >> 2] = w.Ab;
            F[k >> 2] = v;
            return 0;
          } catch (C) {
            if ("undefined" == typeof W || "ErrnoError" !== C.name)
              throw C;
            return -C.Pa;
          }
        }, z: function(a, b, c, d, e, h) {
          h = -9007199254740992 > h || 9007199254740992 < h ? NaN : Number(h);
          try {
            var k = T(e);
            if (c & 2) {
              c = h;
              if (32768 !== (k.node.mode & 61440))
                throw new N(43);
              if (!(d & 2)) {
                var q = x.slice(a, a + b);
                k.Ma.jb && k.Ma.jb(k, q, c, b, d);
              }
            }
          } catch (w) {
            if ("undefined" == typeof W || "ErrnoError" !== w.name)
              throw w;
            return -w.Pa;
          }
        }, n: (a, b) => {
          Nc[a] && (clearTimeout(Nc[a].id), delete Nc[a]);
          if (!b)
            return 0;
          var c = setTimeout(() => {
            delete Nc[a];
            Pc(() => Wc(a, performance.now()));
          }, b);
          Nc[a] = {
            id: c,
            Xb: b
          };
          return 0;
        }, B: (a, b, c, d) => {
          var e = (/* @__PURE__ */ new Date()).getFullYear(), h = new Date(e, 0, 1).getTimezoneOffset();
          e = new Date(e, 6, 1).getTimezoneOffset();
          F[a >> 2] = 60 * Math.max(h, e);
          E[b >> 2] = Number(h != e);
          b = (k) => {
            var q = Math.abs(k);
            return `UTC${0 <= k ? "-" : "+"}${String(Math.floor(q / 60)).padStart(2, "0")}${String(q % 60).padStart(2, "0")}`;
          };
          a = b(h);
          b = b(e);
          e < h ? (u(a, x, c, 17), u(b, x, d, 17)) : (u(a, x, d, 17), u(b, x, c, 17));
        }, d: () => Date.now(), s: () => 2147483648, c: () => performance.now(), o: (a) => {
          var b = x.length;
          a >>>= 0;
          if (2147483648 < a)
            return false;
          for (var c = 1; 4 >= c; c *= 2) {
            var d = b * (1 + 0.2 / c);
            d = Math.min(d, a + 100663296);
            a: {
              d = (Math.min(2147483648, 65536 * Math.ceil(Math.max(a, d) / 65536)) - Ka.buffer.byteLength + 65535) / 65536 | 0;
              try {
                Ka.grow(d);
                Qa();
                var e = 1;
                break a;
              } catch (h) {
              }
              e = void 0;
            }
            if (e)
              return true;
          }
          return false;
        }, E: (a, b) => {
          var c = 0;
          Sc().forEach((d, e) => {
            var h = b + c;
            e = F[a + 4 * e >> 2] = h;
            for (h = 0; h < d.length; ++h)
              p[e++] = d.charCodeAt(h);
            p[e] = 0;
            c += d.length + 1;
          });
          return 0;
        }, F: (a, b) => {
          var c = Sc();
          F[a >> 2] = c.length;
          var d = 0;
          c.forEach((e) => d += e.length + 1);
          F[b >> 2] = d;
          return 0;
        }, e: function(a) {
          try {
            var b = T(a);
            qa(b);
            return 0;
          } catch (c) {
            if ("undefined" == typeof W || "ErrnoError" !== c.name)
              throw c;
            return c.Pa;
          }
        }, p: function(a, b) {
          try {
            var c = T(a);
            p[b] = c.tty ? 2 : P(c.mode) ? 3 : 40960 === (c.mode & 61440) ? 7 : 4;
            Na[b + 2 >> 1] = 0;
            H[b + 8 >> 3] = BigInt(0);
            H[b + 16 >> 3] = BigInt(0);
            return 0;
          } catch (d) {
            if ("undefined" == typeof W || "ErrnoError" !== d.name)
              throw d;
            return d.Pa;
          }
        }, w: function(a, b, c, d) {
          try {
            a: {
              var e = T(a);
              a = b;
              for (var h, k = b = 0; k < c; k++) {
                var q = F[a >> 2], w = F[a + 4 >> 2];
                a += 8;
                var v = Ec(e, p, q, w, h);
                if (0 > v) {
                  var C = -1;
                  break a;
                }
                b += v;
                if (v < w)
                  break;
                "undefined" != typeof h && (h += v);
              }
              C = b;
            }
            F[d >> 2] = C;
            return 0;
          } catch (G) {
            if ("undefined" == typeof W || "ErrnoError" !== G.name)
              throw G;
            return G.Pa;
          }
        }, D: function(a, b, c, d) {
          b = -9007199254740992 > b || 9007199254740992 < b ? NaN : Number(b);
          try {
            if (isNaN(b))
              return 61;
            var e = T(a);
            mc(e, b, c);
            H[d >> 3] = BigInt(e.position);
            e.ob && 0 === b && 0 === c && (e.ob = null);
            return 0;
          } catch (h) {
            if ("undefined" == typeof W || "ErrnoError" !== h.name)
              throw h;
            return h.Pa;
          }
        }, I: function(a) {
          var _a;
          try {
            var b = T(a);
            return ((_a = b.Ma) == null ? void 0 : _a.fsync) ? b.Ma.fsync(b) : 0;
          } catch (c) {
            if ("undefined" == typeof W || "ErrnoError" !== c.name)
              throw c;
            return c.Pa;
          }
        }, t: function(a, b, c, d) {
          try {
            a: {
              var e = T(a);
              a = b;
              for (var h, k = b = 0; k < c; k++) {
                var q = F[a >> 2], w = F[a + 4 >> 2];
                a += 8;
                var v = pa(e, p, q, w, h);
                if (0 > v) {
                  var C = -1;
                  break a;
                }
                b += v;
                if (v < w)
                  break;
                "undefined" != typeof h && (h += v);
              }
              C = b;
            }
            F[d >> 2] = C;
            return 0;
          } catch (G) {
            if ("undefined" == typeof W || "ErrnoError" !== G.name)
              throw G;
            return G.Pa;
          }
        }, k: Oc }, Z;
        (async function() {
          var _a;
          function a(c) {
            var _a2;
            Z = c.exports;
            Ka = Z.M;
            Qa();
            Y = Z.O;
            K--;
            (_a2 = f.monitorRunDependencies) == null ? void 0 : _a2.call(f, K);
            0 == K && Sa && (c = Sa, Sa = null, c());
            return Z;
          }
          K++;
          (_a = f.monitorRunDependencies) == null ? void 0 : _a.call(f, K);
          var b = { a: Xc };
          if (f.instantiateWasm)
            return new Promise((c) => {
              f.instantiateWasm(b, (d, e) => {
                a(d, e);
                c(d.exports);
              });
            });
          Ua != null ? Ua : Ua = f.locateFile ? f.locateFile("sql-wasm.wasm", D) : D + "sql-wasm.wasm";
          return a((await Xa(b)).instance);
        })();
        f._sqlite3_free = (a) => (f._sqlite3_free = Z.P)(a);
        f._sqlite3_value_text = (a) => (f._sqlite3_value_text = Z.Q)(a);
        f._sqlite3_prepare_v2 = (a, b, c, d, e) => (f._sqlite3_prepare_v2 = Z.R)(a, b, c, d, e);
        f._sqlite3_step = (a) => (f._sqlite3_step = Z.S)(a);
        f._sqlite3_reset = (a) => (f._sqlite3_reset = Z.T)(a);
        f._sqlite3_exec = (a, b, c, d, e) => (f._sqlite3_exec = Z.U)(a, b, c, d, e);
        f._sqlite3_finalize = (a) => (f._sqlite3_finalize = Z.V)(a);
        f._sqlite3_column_name = (a, b) => (f._sqlite3_column_name = Z.W)(a, b);
        f._sqlite3_column_text = (a, b) => (f._sqlite3_column_text = Z.X)(a, b);
        f._sqlite3_column_type = (a, b) => (f._sqlite3_column_type = Z.Y)(a, b);
        f._sqlite3_errmsg = (a) => (f._sqlite3_errmsg = Z.Z)(a);
        f._sqlite3_clear_bindings = (a) => (f._sqlite3_clear_bindings = Z._)(a);
        f._sqlite3_value_blob = (a) => (f._sqlite3_value_blob = Z.$)(a);
        f._sqlite3_value_bytes = (a) => (f._sqlite3_value_bytes = Z.aa)(a);
        f._sqlite3_value_double = (a) => (f._sqlite3_value_double = Z.ba)(a);
        f._sqlite3_value_int = (a) => (f._sqlite3_value_int = Z.ca)(a);
        f._sqlite3_value_type = (a) => (f._sqlite3_value_type = Z.da)(a);
        f._sqlite3_result_blob = (a, b, c, d) => (f._sqlite3_result_blob = Z.ea)(a, b, c, d);
        f._sqlite3_result_double = (a, b) => (f._sqlite3_result_double = Z.fa)(a, b);
        f._sqlite3_result_error = (a, b, c) => (f._sqlite3_result_error = Z.ga)(a, b, c);
        f._sqlite3_result_int = (a, b) => (f._sqlite3_result_int = Z.ha)(a, b);
        f._sqlite3_result_int64 = (a, b) => (f._sqlite3_result_int64 = Z.ia)(a, b);
        f._sqlite3_result_null = (a) => (f._sqlite3_result_null = Z.ja)(a);
        f._sqlite3_result_text = (a, b, c, d) => (f._sqlite3_result_text = Z.ka)(a, b, c, d);
        f._sqlite3_aggregate_context = (a, b) => (f._sqlite3_aggregate_context = Z.la)(a, b);
        f._sqlite3_column_count = (a) => (f._sqlite3_column_count = Z.ma)(a);
        f._sqlite3_data_count = (a) => (f._sqlite3_data_count = Z.na)(a);
        f._sqlite3_column_blob = (a, b) => (f._sqlite3_column_blob = Z.oa)(a, b);
        f._sqlite3_column_bytes = (a, b) => (f._sqlite3_column_bytes = Z.pa)(a, b);
        f._sqlite3_column_double = (a, b) => (f._sqlite3_column_double = Z.qa)(a, b);
        f._sqlite3_bind_blob = (a, b, c, d, e) => (f._sqlite3_bind_blob = Z.ra)(a, b, c, d, e);
        f._sqlite3_bind_double = (a, b, c) => (f._sqlite3_bind_double = Z.sa)(a, b, c);
        f._sqlite3_bind_int = (a, b, c) => (f._sqlite3_bind_int = Z.ta)(a, b, c);
        f._sqlite3_bind_text = (a, b, c, d, e) => (f._sqlite3_bind_text = Z.ua)(a, b, c, d, e);
        f._sqlite3_bind_parameter_index = (a, b) => (f._sqlite3_bind_parameter_index = Z.va)(a, b);
        f._sqlite3_sql = (a) => (f._sqlite3_sql = Z.wa)(a);
        f._sqlite3_normalized_sql = (a) => (f._sqlite3_normalized_sql = Z.xa)(a);
        f._sqlite3_changes = (a) => (f._sqlite3_changes = Z.ya)(a);
        f._sqlite3_close_v2 = (a) => (f._sqlite3_close_v2 = Z.za)(a);
        f._sqlite3_create_function_v2 = (a, b, c, d, e, h, k, q, w) => (f._sqlite3_create_function_v2 = Z.Aa)(a, b, c, d, e, h, k, q, w);
        f._sqlite3_update_hook = (a, b, c) => (f._sqlite3_update_hook = Z.Ba)(a, b, c);
        f._sqlite3_open = (a, b) => (f._sqlite3_open = Z.Ca)(a, b);
        var ia = f._malloc = (a) => (ia = f._malloc = Z.Da)(a), fa = f._free = (a) => (fa = f._free = Z.Ea)(a);
        f._RegisterExtensionFunctions = (a) => (f._RegisterExtensionFunctions = Z.Fa)(a);
        var Db = (a, b) => (Db = Z.Ga)(a, b), Wc = (a, b) => (Wc = Z.Ha)(a, b), wa = (a) => (wa = Z.Ia)(a), z = (a) => (z = Z.Ja)(a), sa = () => (sa = Z.Ka)();
        f.stackSave = () => sa();
        f.stackRestore = (a) => wa(a);
        f.stackAlloc = (a) => z(a);
        f.cwrap = (a, b, c, d) => {
          var e = !c || c.every((h) => "number" === h || "boolean" === h);
          return "string" !== b && e && !d ? f["_" + a] : (...h) => Tc(a, b, c, h);
        };
        f.addFunction = Aa;
        f.removeFunction = A;
        f.UTF8ToString = ua;
        f.ALLOC_NORMAL = ea;
        f.allocate = da;
        f.allocateUTF8OnStack = xa;
        function Yc() {
          function a() {
            var _a;
            f.calledRun = true;
            if (!La) {
              if (!f.noFSInit && !Ib) {
                var b, c;
                Ib = true;
                d != null ? d : d = f.stdin;
                b != null ? b : b = f.stdout;
                c != null ? c : c = f.stderr;
                d ? V("stdin", d) : Zb("/dev/tty", "/dev/stdin");
                b ? V("stdout", null, b) : Zb("/dev/tty", "/dev/stdout");
                c ? V("stderr", null, c) : Zb("/dev/tty1", "/dev/stderr");
                oa("/dev/stdin", 0);
                oa("/dev/stdout", 1);
                oa("/dev/stderr", 1);
              }
              Z.N();
              Jb = false;
              (_a = f.onRuntimeInitialized) == null ? void 0 : _a.call(f);
              if (f.postRun)
                for ("function" == typeof f.postRun && (f.postRun = [f.postRun]); f.postRun.length; ) {
                  var d = f.postRun.shift();
                  $a.unshift(d);
                }
              Za($a);
            }
          }
          if (0 < K)
            Sa = Yc;
          else {
            if (f.preRun)
              for ("function" == typeof f.preRun && (f.preRun = [f.preRun]); f.preRun.length; )
                bb();
            Za(ab);
            0 < K ? Sa = Yc : f.setStatus ? (f.setStatus("Running..."), setTimeout(() => {
              setTimeout(() => f.setStatus(""), 1);
              a();
            }, 1)) : a();
          }
        }
        if (f.preInit)
          for ("function" == typeof f.preInit && (f.preInit = [f.preInit]); 0 < f.preInit.length; )
            f.preInit.pop()();
        Yc();
        return Module;
      });
      return initSqlJsPromise;
    };
    if (typeof exports === "object" && typeof module2 === "object") {
      module2.exports = initSqlJs2;
      module2.exports.default = initSqlJs2;
    } else if (typeof define === "function" && define["amd"]) {
      define([], function() {
        return initSqlJs2;
      });
    } else if (typeof exports === "object") {
      exports["Module"] = initSqlJs2;
    }
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => DecksPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian10 = require("obsidian");

// src/database/DatabaseService.ts
var import_sql = __toESM(require_sql_wasm());

// src/algorithm/fsrs-weights.ts
var FSRS_WEIGHTS_STANDARD = [
  0.4072,
  1.1829,
  3.1262,
  15.4722,
  7.2102,
  0.5316,
  1.0651,
  0.0234,
  1.616,
  0.1544,
  1.0824,
  1.9813,
  0.0953,
  0.2975,
  2.2042,
  0.2407,
  2.9466
];
var FSRS_WEIGHTS_SUBDAY = [
  1 / 1440,
  // w[0] - Again: 1 minute
  5 / 1440,
  // w[1] - Hard: 5 minutes
  10 / 1440,
  // w[2] - Good: 10 minutes
  40 / 1440,
  // w[3] - Easy: 40 minutes
  // Keep FSRS-4.5 defaults for remaining parameters
  7.2102,
  0.5316,
  1.0651,
  0.0234,
  1.616,
  0.1544,
  1.0824,
  1.9813,
  0.0953,
  0.2975,
  2.2042,
  0.2407,
  2.9466
];
var DEFAULT_FSRS_WEIGHTS = FSRS_WEIGHTS_STANDARD;
var PROFILE_CONFIG = {
  INTENSIVE: {
    weights: FSRS_WEIGHTS_SUBDAY,
    minMinutes: 1,
    maximumIntervalDays: 36500
  },
  STANDARD: {
    weights: FSRS_WEIGHTS_STANDARD,
    minMinutes: 1440,
    // 1 day minimum
    maximumIntervalDays: 36500
  }
};
var DEFAULT_FSRS_PARAMETERS = {
  w: DEFAULT_FSRS_WEIGHTS,
  requestRetention: 0.9,
  maximumInterval: 36500,
  minMinutes: 1440
};
function getWeightsForProfile(profile) {
  return PROFILE_CONFIG[profile].weights;
}
function getMinMinutesForProfile(profile) {
  return PROFILE_CONFIG[profile].minMinutes;
}
function getMaxIntervalDaysForProfile(profile) {
  return PROFILE_CONFIG[profile].maximumIntervalDays;
}
function validateFSRSWeights(weights) {
  if (!Array.isArray(weights) || weights.length !== 17) {
    return false;
  }
  return weights.every((w) => isFinite(w));
}
function createSubDayWeights(againMinutes = 1, hardMinutes = 6, goodMinutes = 10, easyMinutes = 1440) {
  return [
    againMinutes / 1440,
    // w[0] - Again stability
    hardMinutes / 1440,
    // w[1] - Hard stability
    goodMinutes / 1440,
    // w[2] - Good stability
    easyMinutes / 1440,
    // w[3] - Easy stability
    ...DEFAULT_FSRS_WEIGHTS.slice(4)
    // Keep remaining weights
  ];
}
function validateProfile(profile) {
  return profile === "INTENSIVE" || profile === "STANDARD";
}
function validateRequestRetention(retention) {
  return retention > 0.5 && retention < 0.995;
}
var WEIGHT_PRESETS = {
  INTENSIVE: FSRS_WEIGHTS_SUBDAY,
  STANDARD: FSRS_WEIGHTS_STANDARD,
  RELAXED: createSubDayWeights(30, 60, 180, 720),
  ORIGINAL: FSRS_WEIGHTS_STANDARD
};

// src/database/types.ts
var DEFAULT_DECK_CONFIG = {
  newCardsPerDay: -1,
  // -1 = unlimited, 0 = no cards
  reviewCardsPerDay: -1,
  // -1 = unlimited, 0 = no cards
  headerLevel: 2,
  // Default to H2 headers
  reviewOrder: "due-date",
  fsrs: {
    requestRetention: DEFAULT_FSRS_PARAMETERS.requestRetention,
    profile: "STANDARD"
  }
};
function hasNewCardsLimit(config) {
  return config.newCardsPerDay >= 0;
}
function hasReviewCardsLimit(config) {
  return config.reviewCardsPerDay >= 0;
}

// src/database/schemas.ts
var CURRENT_SCHEMA_VERSION = 4;
var CREATE_TABLES_SQL = `
  PRAGMA foreign_keys = OFF;
  BEGIN;

  -- Decks table
  CREATE TABLE IF NOT EXISTS decks (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    filepath TEXT NOT NULL UNIQUE,
    tag TEXT NOT NULL,
    last_reviewed TEXT,
    config TEXT NOT NULL DEFAULT '{"newCardsPerDay":0,"reviewCardsPerDay":0,"headerLevel":2,"reviewOrder":"due-date","fsrs":{"requestRetention":0.9,"profile":"STANDARD"}}',
    created TEXT NOT NULL,
    modified TEXT NOT NULL
  );

  -- Flashcards table
  CREATE TABLE IF NOT EXISTS flashcards (
    id TEXT PRIMARY KEY,
    deck_id TEXT NOT NULL,
    front TEXT NOT NULL,
    back TEXT NOT NULL,
    type TEXT NOT NULL CHECK (type IN ('header-paragraph', 'table')),
    source_file TEXT NOT NULL,
    content_hash TEXT NOT NULL,

    state TEXT NOT NULL CHECK (state IN ('new', 'review')),
    due_date TEXT NOT NULL,
    interval REAL NOT NULL,
    repetitions INTEGER NOT NULL DEFAULT 0,
    difficulty REAL NOT NULL DEFAULT 5.0,
    stability REAL NOT NULL DEFAULT 0,
    lapses INTEGER NOT NULL DEFAULT 0,
    last_reviewed TEXT,
    created TEXT NOT NULL,
    modified TEXT NOT NULL,
    FOREIGN KEY (deck_id) REFERENCES decks(id)
  );

  -- Review sessions table
  CREATE TABLE IF NOT EXISTS review_sessions (
    id TEXT PRIMARY KEY,
    deck_id TEXT NOT NULL,
    started_at TEXT NOT NULL,
    ended_at TEXT,
    goal_total INTEGER NOT NULL,
    done_unique INTEGER NOT NULL DEFAULT 0,
    FOREIGN KEY (deck_id) REFERENCES decks(id)
  );

  -- Review logs table
  CREATE TABLE IF NOT EXISTS review_logs (
    id TEXT PRIMARY KEY,
    flashcard_id TEXT NOT NULL,
    session_id TEXT,
    last_reviewed_at TEXT NOT NULL,
    shown_at TEXT,
    reviewed_at TEXT NOT NULL,
    rating INTEGER NOT NULL CHECK (rating IN (1, 2, 3, 4)),
    rating_label TEXT NOT NULL CHECK (rating_label IN ('again', 'hard', 'good', 'easy')),
    time_elapsed_ms INTEGER,
    old_state TEXT NOT NULL CHECK (old_state IN ('new', 'review')),
    old_repetitions INTEGER NOT NULL DEFAULT 0,
    old_lapses INTEGER NOT NULL DEFAULT 0,
    old_stability REAL NOT NULL DEFAULT 0,
    old_difficulty REAL NOT NULL DEFAULT 5.0,
    new_state TEXT NOT NULL CHECK (new_state IN ('new', 'review')),
    new_repetitions INTEGER NOT NULL DEFAULT 0,
    new_lapses INTEGER NOT NULL DEFAULT 0,
    new_stability REAL NOT NULL DEFAULT 2.5,
    new_difficulty REAL NOT NULL DEFAULT 5.0,
    old_interval_minutes INTEGER NOT NULL,
    new_interval_minutes INTEGER NOT NULL,
    old_due_at TEXT NOT NULL,
    new_due_at TEXT NOT NULL,
    elapsed_days REAL NOT NULL,
    retrievability REAL NOT NULL,
    request_retention REAL NOT NULL,
    profile TEXT NOT NULL DEFAULT 'STANDARD' CHECK (profile IN ('INTENSIVE', 'STANDARD')),
    maximum_interval_days INTEGER NOT NULL,
    min_minutes INTEGER NOT NULL,
    fsrs_weights_version TEXT NOT NULL,
    scheduler_version TEXT NOT NULL,
    note_model_id TEXT,
    card_template_id TEXT,
    content_hash TEXT,
    client TEXT,
    FOREIGN KEY (flashcard_id) REFERENCES flashcards(id),
    FOREIGN KEY (session_id) REFERENCES review_sessions(id)
  );

  -- Create indexes
  CREATE INDEX IF NOT EXISTS idx_flashcards_deck_id ON flashcards(deck_id);
  CREATE INDEX IF NOT EXISTS idx_flashcards_due_date ON flashcards(due_date);
  CREATE INDEX IF NOT EXISTS idx_review_sessions_deck_id ON review_sessions(deck_id);
  CREATE INDEX IF NOT EXISTS idx_review_logs_flashcard_id ON review_logs(flashcard_id);
  CREATE INDEX IF NOT EXISTS idx_review_logs_session_id ON review_logs(session_id);
  CREATE INDEX IF NOT EXISTS idx_review_logs_reviewed_at ON review_logs(reviewed_at);

  -- Set schema version
  PRAGMA user_version = ${CURRENT_SCHEMA_VERSION};

  COMMIT;
  PRAGMA foreign_keys = ON;
`;
function getColumnNames(db, tableName) {
  try {
    const stmt = db.prepare(`PRAGMA table_info(${tableName})`);
    const columns = [];
    while (stmt.step()) {
      const row = stmt.get();
      columns.push(row[1]);
    }
    stmt.free();
    return columns;
  } catch (e) {
    return [];
  }
}
function buildMigrationSQL(db) {
  const decksColumns = getColumnNames(db, "decks");
  const flashcardsColumns = getColumnNames(db, "flashcards");
  const reviewLogsColumns = getColumnNames(db, "review_logs");
  const reviewSessionsColumns = getColumnNames(db, "review_sessions");
  const decksSelect = [
    "id",
    "name",
    decksColumns.includes("filepath") ? "filepath" : `'' as filepath`,
    "tag",
    "last_reviewed",
    decksColumns.includes("config") ? "config" : `'{"newCardsPerDay":0,"reviewCardsPerDay":0,"headerLevel":2,"reviewOrder":"due-date","fsrs":{"requestRetention":0.9,"profile":"STANDARD"}}' as config`,
    decksColumns.includes("created") ? "created" : `datetime('now') as created`,
    decksColumns.includes("modified") ? "modified" : `datetime('now') as modified`
  ].join(", ");
  const flashcardsSelect = [
    "id",
    "deck_id",
    "front",
    "back",
    flashcardsColumns.includes("type") ? "type" : `'header-paragraph' as type`,
    flashcardsColumns.includes("source_file") ? "source_file" : `'' as source_file`,
    flashcardsColumns.includes("content_hash") ? "content_hash" : `'' as content_hash`,
    flashcardsColumns.includes("state") ? "state" : `'new' as state`,
    flashcardsColumns.includes("due_date") ? "due_date" : `datetime('now') as due_date`,
    flashcardsColumns.includes("interval") ? "interval" : `0 as interval`,
    flashcardsColumns.includes("repetitions") ? "repetitions" : `0 as repetitions`,
    flashcardsColumns.includes("difficulty") ? "difficulty" : `5.0 as difficulty`,
    flashcardsColumns.includes("stability") ? "stability" : `0 as stability`,
    flashcardsColumns.includes("lapses") ? "lapses" : `0 as lapses`,
    "last_reviewed",
    "created",
    "modified"
  ].join(", ");
  const reviewLogsSelect = [
    "id",
    "flashcard_id",
    reviewLogsColumns.includes("session_id") ? "session_id" : "NULL as session_id",
    reviewLogsColumns.includes("last_reviewed_at") ? "last_reviewed_at" : `datetime('now') as last_reviewed_at`,
    reviewLogsColumns.includes("shown_at") ? "shown_at" : "NULL as shown_at",
    reviewLogsColumns.includes("reviewed_at") ? "reviewed_at" : `datetime('now') as reviewed_at`,
    reviewLogsColumns.includes("rating") ? "rating" : `3 as rating`,
    reviewLogsColumns.includes("rating_label") ? "rating_label" : `'good' as rating_label`,
    reviewLogsColumns.includes("time_elapsed_ms") ? "time_elapsed_ms" : "NULL as time_elapsed_ms",
    reviewLogsColumns.includes("old_state") ? "old_state" : `'new' as old_state`,
    reviewLogsColumns.includes("old_repetitions") ? "old_repetitions" : `0 as old_repetitions`,
    reviewLogsColumns.includes("old_lapses") ? "old_lapses" : `0 as old_lapses`,
    reviewLogsColumns.includes("old_stability") ? "old_stability" : `0 as old_stability`,
    reviewLogsColumns.includes("old_difficulty") ? "old_difficulty" : `5.0 as old_difficulty`,
    reviewLogsColumns.includes("new_state") ? "new_state" : `'review' as new_state`,
    reviewLogsColumns.includes("new_repetitions") ? "new_repetitions" : `1 as new_repetitions`,
    reviewLogsColumns.includes("new_lapses") ? "new_lapses" : `0 as new_lapses`,
    reviewLogsColumns.includes("new_stability") ? "new_stability" : `2.5 as new_stability`,
    reviewLogsColumns.includes("new_difficulty") ? "new_difficulty" : `5.0 as new_difficulty`,
    reviewLogsColumns.includes("old_interval_minutes") ? "old_interval_minutes" : `0 as old_interval_minutes`,
    reviewLogsColumns.includes("new_interval_minutes") ? "new_interval_minutes" : `1440 as new_interval_minutes`,
    reviewLogsColumns.includes("old_due_at") ? "old_due_at" : `datetime('now') as old_due_at`,
    reviewLogsColumns.includes("new_due_at") ? "new_due_at" : `datetime('now', '+1 day') as new_due_at`,
    reviewLogsColumns.includes("elapsed_days") ? "elapsed_days" : `1.0 as elapsed_days`,
    reviewLogsColumns.includes("retrievability") ? "retrievability" : `0.9 as retrievability`,
    reviewLogsColumns.includes("request_retention") ? "request_retention" : `0.9 as request_retention`,
    reviewLogsColumns.includes("profile") ? "profile" : `'STANDARD' as profile`,
    reviewLogsColumns.includes("maximum_interval_days") ? "maximum_interval_days" : `36500 as maximum_interval_days`,
    reviewLogsColumns.includes("min_minutes") ? "min_minutes" : `1 as min_minutes`,
    reviewLogsColumns.includes("fsrs_weights_version") ? "fsrs_weights_version" : `'1.0' as fsrs_weights_version`,
    reviewLogsColumns.includes("scheduler_version") ? "scheduler_version" : `'1.0' as scheduler_version`,
    reviewLogsColumns.includes("note_model_id") ? "note_model_id" : "NULL as note_model_id",
    reviewLogsColumns.includes("card_template_id") ? "card_template_id" : "NULL as card_template_id",
    reviewLogsColumns.includes("content_hash") ? "content_hash" : "NULL as content_hash",
    reviewLogsColumns.includes("client") ? "client" : "NULL as client"
  ].join(", ");
  const reviewSessionsSelect = [
    "id",
    "deck_id",
    "started_at",
    "ended_at",
    "goal_total",
    "done_unique"
  ].join(", ");
  return `
    PRAGMA foreign_keys = OFF;
    BEGIN;

    -- Create new tables
    CREATE TABLE decks_new (
      id TEXT PRIMARY KEY,
      name TEXT NOT NULL,
      filepath TEXT NOT NULL UNIQUE,
      tag TEXT NOT NULL,
      last_reviewed TEXT,
      config TEXT NOT NULL DEFAULT '{"newCardsPerDay":0,"reviewCardsPerDay":0,"headerLevel":2,"reviewOrder":"due-date","fsrs":{"requestRetention":0.9,"profile":"STANDARD"}}',
      created TEXT NOT NULL,
      modified TEXT NOT NULL
    );

    CREATE TABLE flashcards_new (
      id TEXT PRIMARY KEY,
      deck_id TEXT NOT NULL,
      front TEXT NOT NULL,
      back TEXT NOT NULL,
      type TEXT NOT NULL CHECK (type IN ('header-paragraph', 'table')),
      source_file TEXT NOT NULL,
      content_hash TEXT NOT NULL,

      state TEXT NOT NULL CHECK (state IN ('new', 'review')),
      due_date TEXT NOT NULL,
      interval REAL NOT NULL,
      repetitions INTEGER NOT NULL DEFAULT 0,
      difficulty REAL NOT NULL DEFAULT 5.0,
      stability REAL NOT NULL DEFAULT 0,
      lapses INTEGER NOT NULL DEFAULT 0,
      last_reviewed TEXT,
      created TEXT NOT NULL,
      modified TEXT NOT NULL,
      FOREIGN KEY (deck_id) REFERENCES decks(id)
    );

    CREATE TABLE review_sessions_new (
      id TEXT PRIMARY KEY,
      deck_id TEXT NOT NULL,
      started_at TEXT NOT NULL,
      ended_at TEXT,
      goal_total INTEGER NOT NULL,
      done_unique INTEGER NOT NULL DEFAULT 0,
      FOREIGN KEY (deck_id) REFERENCES decks_new(id)
    );

    CREATE TABLE review_logs_new (
      id TEXT PRIMARY KEY,
      flashcard_id TEXT NOT NULL,
      session_id TEXT,
      last_reviewed_at TEXT NOT NULL,
      shown_at TEXT,
      reviewed_at TEXT NOT NULL,
      rating INTEGER NOT NULL CHECK (rating IN (1, 2, 3, 4)),
      rating_label TEXT NOT NULL CHECK (rating_label IN ('again', 'hard', 'good', 'easy')),
      time_elapsed_ms INTEGER,
      old_state TEXT NOT NULL CHECK (old_state IN ('new', 'review')),
      old_repetitions INTEGER NOT NULL DEFAULT 0,
      old_lapses INTEGER NOT NULL DEFAULT 0,
      old_stability REAL NOT NULL DEFAULT 0,
      old_difficulty REAL NOT NULL DEFAULT 5.0,
      new_state TEXT NOT NULL CHECK (new_state IN ('new', 'review')),
      new_repetitions INTEGER NOT NULL DEFAULT 0,
      new_lapses INTEGER NOT NULL DEFAULT 0,
      new_stability REAL NOT NULL DEFAULT 2.5,
      new_difficulty REAL NOT NULL DEFAULT 5.0,
      old_interval_minutes INTEGER NOT NULL,
      new_interval_minutes INTEGER NOT NULL,
      old_due_at TEXT NOT NULL,
      new_due_at TEXT NOT NULL,
      elapsed_days REAL NOT NULL,
      retrievability REAL NOT NULL,
      request_retention REAL NOT NULL,
      profile TEXT NOT NULL DEFAULT 'STANDARD' CHECK (profile IN ('INTENSIVE', 'STANDARD')),
      maximum_interval_days INTEGER NOT NULL,
      min_minutes INTEGER NOT NULL,
      fsrs_weights_version TEXT NOT NULL,
      scheduler_version TEXT NOT NULL,
      note_model_id TEXT,
      card_template_id TEXT,
      content_hash TEXT,
      client TEXT,
      FOREIGN KEY (flashcard_id) REFERENCES flashcards(id),
      FOREIGN KEY (session_id) REFERENCES review_sessions(id)
    );

    -- Copy data with dynamic column mapping
    INSERT OR IGNORE INTO decks_new (id, name, filepath, tag, last_reviewed, config, created, modified)
    SELECT ${decksSelect} FROM decks WHERE EXISTS (SELECT 1 FROM sqlite_master WHERE type='table' AND name='decks');

    INSERT OR IGNORE INTO flashcards_new (id, deck_id, front, back, type, source_file, content_hash, state, due_date, interval, repetitions, difficulty, stability, lapses, last_reviewed, created, modified)
    SELECT ${flashcardsSelect} FROM flashcards WHERE EXISTS (SELECT 1 FROM sqlite_master WHERE type='table' AND name='flashcards');

    INSERT OR IGNORE INTO review_logs_new (id, flashcard_id, session_id, last_reviewed_at, shown_at, reviewed_at, rating, rating_label, time_elapsed_ms, old_state, old_repetitions, old_lapses, old_stability, old_difficulty, new_state, new_repetitions, new_lapses, new_stability, new_difficulty, old_interval_minutes, new_interval_minutes, old_due_at, new_due_at, elapsed_days, retrievability, request_retention, profile, maximum_interval_days, min_minutes, fsrs_weights_version, scheduler_version, note_model_id, card_template_id, content_hash, client)
    SELECT ${reviewLogsSelect} FROM review_logs WHERE EXISTS (SELECT 1 FROM sqlite_master WHERE type='table' AND name='review_logs');

    INSERT OR IGNORE INTO review_sessions_new (id, deck_id, started_at, ended_at, goal_total, done_unique)
    SELECT ${reviewSessionsSelect} FROM review_sessions WHERE EXISTS (SELECT 1 FROM sqlite_master WHERE type='table' AND name='review_logs');

    -- Drop old tables
    DROP TABLE IF EXISTS review_logs;
    DROP TABLE IF EXISTS flashcards;
    DROP TABLE IF EXISTS decks;
    DROP TABLE IF EXISTS review_sessions;

    -- Rename new tables
    ALTER TABLE decks_new RENAME TO decks;
    ALTER TABLE flashcards_new RENAME TO flashcards;
    ALTER TABLE review_sessions_new RENAME TO review_sessions;
    ALTER TABLE review_logs_new RENAME TO review_logs;

    -- Create indexes
    CREATE INDEX IF NOT EXISTS idx_flashcards_deck_id ON flashcards(deck_id);
    CREATE INDEX IF NOT EXISTS idx_flashcards_due_date ON flashcards(due_date);
    CREATE INDEX IF NOT EXISTS idx_review_sessions_deck_id ON review_sessions(deck_id);
    CREATE INDEX IF NOT EXISTS idx_review_logs_flashcard_id ON review_logs(flashcard_id);
    CREATE INDEX IF NOT EXISTS idx_review_logs_session_id ON review_logs(session_id);
    CREATE INDEX IF NOT EXISTS idx_review_logs_reviewed_at ON review_logs(reviewed_at);

    -- Set schema version
    PRAGMA user_version = ${CURRENT_SCHEMA_VERSION};

    COMMIT;
    PRAGMA foreign_keys = ON;
  `;
}
var SQL_QUERIES = {
  // Deck operations
  INSERT_DECK: `
    INSERT OR REPLACE INTO decks (
      id, name, filepath, tag, last_reviewed, config, created, modified
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?)
  `,
  GET_DECK_BY_TAG: `SELECT * FROM decks WHERE tag = ?`,
  GET_DECK_BY_FILEPATH: `SELECT * FROM decks WHERE filepath = ?`,
  GET_DECK_BY_ID: `SELECT * FROM decks WHERE id = ?`,
  GET_ALL_DECKS: `SELECT * FROM decks ORDER BY name`,
  UPDATE_DECK_TIMESTAMP: `
    UPDATE decks
    SET modified = ?
    WHERE id = ?
  `,
  UPDATE_DECK_LAST_REVIEWED: `
    UPDATE decks
    SET last_reviewed = ?, modified = ?
    WHERE id = ?
  `,
  RENAME_DECK: `
    UPDATE decks
    SET id = ?, name = ?, filepath = ?, modified = ?
    WHERE id = ?
  `,
  DELETE_DECK_BY_FILEPATH: `DELETE FROM decks WHERE filepath = ?`,
  DELETE_DECK: `DELETE FROM decks WHERE id = ?`,
  // Flashcard operations
  INSERT_FLASHCARD: `
    INSERT OR REPLACE INTO flashcards (
      id, deck_id, front, back, type, source_file, content_hash,
      state, due_date, interval, repetitions,
      difficulty, stability, lapses, last_reviewed, created, modified
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)

  `,
  DELETE_FLASHCARD: `DELETE FROM flashcards WHERE id = ?`,
  UPDATE_FLASHCARD_DECK_IDS: `
    UPDATE flashcards SET deck_id = ? WHERE deck_id = ?
  `,
  GET_FLASHCARDS_BY_DECK: `SELECT * FROM flashcards WHERE deck_id = ? ORDER BY created`,
  GET_DUE_FLASHCARDS: `SELECT * FROM flashcards WHERE deck_id = ? AND due_date <= ? ORDER BY due_date`,
  DELETE_FLASHCARDS_BY_FILE: `DELETE FROM flashcards WHERE source_file = ?`,
  GET_NEW_CARDS_FOR_REVIEW: `
    SELECT * FROM flashcards
    WHERE deck_id = ? AND due_date <= ? AND state = 'new'
    ORDER BY due_date
  `,
  GET_REVIEW_CARDS_FOR_REVIEW: `
    SELECT * FROM flashcards
    WHERE deck_id = ? AND due_date <= ? AND state = 'review'
    ORDER BY due_date
  `,
  // Review log operations
  INSERT_REVIEW_LOG: `
    INSERT INTO review_logs (
      id, flashcard_id, session_id, last_reviewed_at, shown_at, reviewed_at,
      rating, rating_label, time_elapsed_ms,
      old_state, old_repetitions, old_lapses, old_stability, old_difficulty,
      new_state, new_repetitions, new_lapses, new_stability, new_difficulty,
      old_interval_minutes, new_interval_minutes, old_due_at, new_due_at,
      elapsed_days, retrievability,
      request_retention, profile, maximum_interval_days, min_minutes,
      fsrs_weights_version, scheduler_version,
      note_model_id, card_template_id, content_hash, client
    ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
  `,
  GET_LATEST_REVIEW_LOG: `
    SELECT
      rl.id, rl.flashcard_id, rl.last_reviewed_at, rl.shown_at, rl.reviewed_at,
      rl.rating, rl.rating_label, rl.time_elapsed_ms,
      rl.old_state, rl.old_repetitions, rl.old_lapses, rl.old_stability, rl.old_difficulty,
      rl.new_state, rl.new_repetitions, rl.new_lapses, rl.new_stability, rl.new_difficulty,
      rl.old_interval_minutes, rl.new_interval_minutes, rl.old_due_at, rl.new_due_at,
      rl.elapsed_days, rl.retrievability,
      rl.request_retention, rl.profile, rl.maximum_interval_days, rl.min_minutes,
      rl.fsrs_weights_version, rl.scheduler_version,
      rl.note_model_id, rl.card_template_id, rl.content_hash, rl.client
    FROM review_logs rl
    WHERE rl.flashcard_id = ?
    ORDER BY rl.reviewed_at DESC
    LIMIT 1
  `,
  // Daily review counts
  COUNT_NEW_CARDS_TODAY: `
    SELECT COUNT(*) as count FROM review_logs rl
    JOIN flashcards f ON rl.flashcard_id = f.id
    WHERE f.deck_id = ?
      AND rl.reviewed_at >= ?
      AND rl.reviewed_at <= ?
      AND (rl.old_interval_minutes = 0 OR f.repetitions = 1)
  `,
  COUNT_REVIEW_CARDS_TODAY: `
    SELECT COUNT(*) as count FROM review_logs rl
    JOIN flashcards f ON rl.flashcard_id = f.id
    WHERE f.deck_id = ?
      AND rl.reviewed_at >= ? AND rl.reviewed_at <= ?
      AND rl.old_interval_minutes > 0
  `,
  // Statistics queries
  COUNT_NEW_CARDS: `
    SELECT COUNT(*) FROM flashcards
    WHERE deck_id = ? AND state = 'new' AND due_date <= ?
  `,
  COUNT_DUE_CARDS: `
    SELECT COUNT(*) FROM flashcards
    WHERE deck_id = ? AND state = 'review' AND due_date <= ?
  `,
  COUNT_TOTAL_CARDS: `
    SELECT COUNT(*) FROM flashcards WHERE deck_id = ?
  `,
  GET_REVIEW_COUNTS_BY_DATE: `
    SELECT DATE(reviewed_at) as review_date, COUNT(*) as count
    FROM review_logs
    WHERE reviewed_at >= ? AND reviewed_at <= ?
    GROUP BY DATE(reviewed_at)
    ORDER BY review_date
  `,
  // Migration helpers
  CHECK_EXISTING_TABLES: `
    SELECT name FROM sqlite_master
    WHERE type='table' AND name IN ('decks', 'flashcards', 'review_logs')
  `,
  // Statistics queries for overall stats
  GET_DAILY_STATS: `
    SELECT
      DATE(reviewed_at) as date,
      COUNT(*) as reviews,
      AVG(time_elapsed_ms / 1000.0) as avg_time_seconds,
      SUM(CASE WHEN old_repetitions = 0 THEN 1 ELSE 0 END) as new_cards,
      SUM(CASE WHEN old_repetitions > 0 AND old_repetitions < 3 THEN 1 ELSE 0 END) as learning_cards,
      SUM(CASE WHEN old_repetitions >= 3 THEN 1 ELSE 0 END) as review_cards,
      AVG(CASE WHEN rating >= 3 THEN 1.0 ELSE 0.0 END) as correct_rate
    FROM review_logs rl
    WHERE rl.reviewed_at >= ? AND rl.reviewed_at <= ?
    GROUP BY DATE(reviewed_at)
    ORDER BY date
  `,
  GET_DAILY_STATS_OVERALL: `
    SELECT
      DATE(reviewed_at) as date,
      COUNT(*) as reviews,
      COUNT(CASE WHEN rating_label != 'again' THEN 1 END) as correct,
      COUNT(CASE WHEN f.state = 'new' THEN 1 END) as new_cards,
      COUNT(CASE WHEN f.state = 'review' THEN 1 END) as review_cards
    FROM review_logs rl
    JOIN flashcards f ON rl.flashcard_id = f.id
    WHERE DATE(reviewed_at) >= DATE(?)
    GROUP BY DATE(reviewed_at)
    ORDER BY date DESC
  `,
  GET_CARD_STATS: `
    SELECT
      CASE
        WHEN f.state = 'new' THEN 'new'
        WHEN f.state = 'review' AND f.interval > 30240 THEN 'mature'
        ELSE 'review'
      END as card_type,
      COUNT(*) as count
    FROM flashcards f
    GROUP BY card_type
  `,
  GET_ANSWER_BUTTON_STATS: `
    SELECT
      rl.rating_label,
      COUNT(*) as count
    FROM review_logs rl
    WHERE rl.reviewed_at >= ? AND rl.reviewed_at <= ?
    GROUP BY rl.rating_label
  `,
  GET_INTERVAL_DISTRIBUTION: `
    SELECT
      CASE
        WHEN f.interval < 1440 THEN '<1d'
        WHEN f.interval < 10080 THEN '1-7d'
        WHEN f.interval < 43200 THEN '1-4w'
        WHEN f.interval < 129600 THEN '1-3m'
        WHEN f.interval < 525600 THEN '3-12m'
        ELSE '>1y'
      END as interval_range,
      COUNT(*) as count
    FROM flashcards f
    WHERE f.state = 'review'
    GROUP BY interval_range
    ORDER BY
      CASE interval_range
        WHEN '<1d' THEN 1
        WHEN '1-7d' THEN 2
        WHEN '1-4w' THEN 3
        WHEN '1-3m' THEN 4
        WHEN '3-12m' THEN 5
        WHEN '>1y' THEN 6
      END
  `,
  GET_FORECAST_DUE_COUNT: `
    SELECT COUNT(*) as due_count
    FROM flashcards f
    WHERE DATE(f.due_date) = DATE(?)
  `,
  GET_PACE_STATS: `
    SELECT
      AVG(rl.time_elapsed_ms / 1000.0) as avg_pace,
      SUM(rl.time_elapsed_ms / 1000.0) as total_time
    FROM review_logs rl
    WHERE rl.reviewed_at >= ? AND rl.reviewed_at <= ?
      AND rl.time_elapsed_ms IS NOT NULL
      AND rl.time_elapsed_ms > 0
  `,
  // Review Session operations
  INSERT_REVIEW_SESSION: `
    INSERT INTO review_sessions (
      id, deck_id, started_at, ended_at, goal_total, done_unique
    ) VALUES (?, ?, ?, ?, ?, ?)
  `,
  GET_REVIEW_SESSION_BY_ID: `SELECT * FROM review_sessions WHERE id = ?`,
  UPDATE_REVIEW_SESSION_DONE_UNIQUE: `
    UPDATE review_sessions
    SET done_unique = ?
    WHERE id = ?
  `,
  UPDATE_REVIEW_SESSION_END: `
    UPDATE review_sessions
    SET ended_at = ?
    WHERE id = ?
  `,
  GET_ACTIVE_REVIEW_SESSION: `
    SELECT * FROM review_sessions
    WHERE deck_id = ? AND ended_at IS NULL
    ORDER BY started_at DESC
    LIMIT 1
  `,
  CHECK_CARD_REVIEWED_IN_SESSION: `
    SELECT COUNT(*) as count
    FROM review_logs
    WHERE session_id = ? AND flashcard_id = ?
  `
};

// src/database/migrations.ts
function getCurrentSchemaVersion(db) {
  try {
    const stmt = db.prepare(`PRAGMA user_version`);
    let version = 0;
    if (stmt.step()) {
      const row = stmt.get();
      version = Number(row[0]) || 0;
    }
    stmt.free();
    return version;
  } catch (error) {
    return 0;
  }
}
function needsMigration(db) {
  return getCurrentSchemaVersion(db) !== CURRENT_SCHEMA_VERSION;
}
function createTables(db, debugLog) {
  const log = debugLog || (() => {
  });
  try {
    log(`Creating fresh database schema (version ${CURRENT_SCHEMA_VERSION})`);
    db.run(CREATE_TABLES_SQL);
    log(`\u2705 Database schema created successfully`);
  } catch (error) {
    log(`\u274C Schema creation failed: ${error}`);
    throw new Error(`Schema creation failed: ${error}`);
  }
}
function migrate(db, debugLog) {
  const log = debugLog || (() => {
  });
  const currentVersion = getCurrentSchemaVersion(db);
  if (currentVersion === CURRENT_SCHEMA_VERSION) {
    log(`Schema is already up to date (version ${CURRENT_SCHEMA_VERSION})`);
    return;
  }
  log(
    `Migrating schema from version ${currentVersion} to ${CURRENT_SCHEMA_VERSION}`
  );
  try {
    db.run(CREATE_TABLES_SQL);
    const migrationSQL = buildMigrationSQL(db);
    db.run(migrationSQL);
    log(`\u2705 Migration completed successfully`);
  } catch (error) {
    log(`\u274C Migration failed: ${error}`);
  }
}

// src/database/DatabaseService.ts
var DatabaseService = class {
  constructor(dbPath, adapter, debugLog) {
    this.db = null;
    this.SQL = null;
    this.dbPath = dbPath;
    this.adapter = adapter;
    this.debugLog = debugLog;
  }
  async initialize() {
    try {
      this.SQL = await (0, import_sql.default)({
        locateFile: (file7) => `https://sql.js.org/dist/${file7}`
      });
      const buffer = await this.loadDatabaseFile();
      if (buffer) {
        this.db = new this.SQL.Database(new Uint8Array(buffer));
        await this.migrateSchemaIfNeeded();
      } else {
        this.db = new this.SQL.Database();
        await this.createFreshDatabase();
      }
    } catch (error) {
      console.error("Failed to initialize database:", error);
      throw error;
    }
  }
  async loadDatabaseFile() {
    try {
      if (await this.adapter.exists(this.dbPath)) {
        const data = await this.adapter.readBinary(this.dbPath);
        return data;
      }
      return null;
    } catch (error) {
      this.debugLog("Database file doesn't exist yet, will create new one");
      return null;
    }
  }
  async save() {
    if (!this.db)
      throw new Error("Database not initialized");
    try {
      const data = this.db.export();
      const dir = this.dbPath.substring(0, this.dbPath.lastIndexOf("/"));
      if (!await this.adapter.exists(dir)) {
        await this.adapter.mkdir(dir);
      }
      await this.adapter.writeBinary(this.dbPath, data);
    } catch (error) {
      console.error("Failed to save database:", error);
      throw error;
    }
  }
  // Generic CRUD helper methods
  executeStatement(sql, params = []) {
    if (!this.db)
      throw new Error("Database not initialized");
    const stmt = this.db.prepare(sql);
    try {
      stmt.run(params);
    } finally {
      stmt.free();
    }
  }
  executeStatementWithSave(sql, params = []) {
    return this.executeStatementWithCallback(sql, params, () => this.save());
  }
  async executeStatementWithCallback(sql, params, callback) {
    if (!this.db)
      throw new Error("Database not initialized");
    let stmt;
    try {
      stmt = this.db.prepare(sql);
      stmt.run(params);
      stmt.free();
      stmt = null;
      if (callback) {
        await callback();
      }
    } catch (error) {
      if (stmt) {
        try {
          stmt.free();
        } catch (freeError) {
          console.error(`Failed to free statement:`, freeError);
        }
      }
      throw error;
    }
  }
  queryAll(sql, params = [], parser) {
    if (!this.db)
      throw new Error("Database not initialized");
    const stmt = this.db.prepare(sql);
    const results = [];
    try {
      if (params.length > 0) {
        stmt.bind(params);
      }
      while (stmt.step()) {
        results.push(parser(stmt.get()));
      }
    } finally {
      stmt.free();
    }
    return results;
  }
  queryOne(sql, params = [], parser) {
    const results = this.queryAll(sql, params, parser);
    return results.length > 0 ? results[0] : null;
  }
  // Transaction methods
  beginTransaction() {
    if (!this.db)
      throw new Error("Database not initialized");
    this.db.run("BEGIN TRANSACTION;");
  }
  commitTransaction() {
    if (!this.db)
      throw new Error("Database not initialized");
    this.db.run("COMMIT;");
  }
  rollbackTransaction() {
    if (!this.db)
      throw new Error("Database not initialized");
    this.db.run("ROLLBACK;");
  }
  // Batch operations using single prepared statements
  batchCreateFlashcards(flashcards) {
    if (!this.db)
      throw new Error("Database not initialized");
    if (flashcards.length === 0)
      return;
    const stmt = this.db.prepare(SQL_QUERIES.INSERT_FLASHCARD);
    const now = (/* @__PURE__ */ new Date()).toISOString();
    try {
      for (const flashcard of flashcards) {
        stmt.run([
          flashcard.id,
          flashcard.deckId,
          flashcard.front,
          flashcard.back,
          flashcard.type,
          flashcard.sourceFile,
          flashcard.contentHash,
          flashcard.state,
          flashcard.dueDate,
          flashcard.interval,
          flashcard.repetitions,
          flashcard.difficulty,
          flashcard.stability,
          flashcard.lapses,
          flashcard.lastReviewed,
          now,
          // created
          now
          // modified
        ]);
      }
    } finally {
      stmt.free();
    }
  }
  batchUpdateFlashcards(updates) {
    if (!this.db)
      throw new Error("Database not initialized");
    if (updates.length === 0)
      return;
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const updateGroups = /* @__PURE__ */ new Map();
    for (const { id, updates: updateData } of updates) {
      const fields = [];
      const values = [];
      for (const [key, value] of Object.entries(updateData)) {
        if (value !== void 0) {
          const dbField = key === "dueDate" ? "due_date" : key === "lastReviewed" ? "last_reviewed" : key === "contentHash" ? "content_hash" : key;
          fields.push(`${dbField} = ?`);
          values.push(value);
        }
      }
      if (fields.length === 0)
        continue;
      fields.push("modified = ?");
      values.push(now, id);
      const fieldSignature = fields.slice(0, -1).join(",");
      if (!updateGroups.has(fieldSignature)) {
        updateGroups.set(fieldSignature, []);
      }
      updateGroups.get(fieldSignature).push({ id, values });
    }
    for (const [fieldSignature, groupUpdates] of updateGroups) {
      const fields = fieldSignature.split(",").map((f) => f.trim());
      fields.push("modified = ?");
      const sql = `UPDATE flashcards SET ${fields.join(", ")} WHERE id = ?`;
      const stmt = this.db.prepare(sql);
      try {
        for (const { values } of groupUpdates) {
          stmt.run(values);
        }
      } finally {
        stmt.free();
      }
    }
  }
  batchDeleteFlashcards(flashcardIds) {
    if (!this.db)
      throw new Error("Database not initialized");
    if (flashcardIds.length === 0)
      return;
    const stmt = this.db.prepare(SQL_QUERIES.DELETE_FLASHCARD);
    try {
      for (const id of flashcardIds) {
        stmt.run([id]);
      }
    } finally {
      stmt.free();
    }
  }
  async createFreshDatabase() {
    if (!this.db)
      throw new Error("Database not initialized");
    try {
      this.debugLog("Creating fresh database schema...");
      createTables(this.db, this.debugLog.bind(this));
      await this.save();
      this.debugLog("Fresh database created successfully");
    } catch (error) {
      this.debugLog(`Fresh database creation failed: ${error}`);
      throw new Error(`Fresh database creation failed: ${error}`);
    }
  }
  // Helper method to parse deck rows
  parseDeckRow(row) {
    let config = DEFAULT_DECK_CONFIG;
    if (row[5]) {
      try {
        config = JSON.parse(row[5]);
      } catch (error) {
        this.debugLog(
          `Failed to parse deck config JSON: ${row[5]}, using default config. Error: ${error}`
        );
        config = DEFAULT_DECK_CONFIG;
      }
    }
    if (!config.fsrs) {
      config = {
        ...config,
        fsrs: DEFAULT_DECK_CONFIG.fsrs
      };
    }
    if (config.newCardsPerDay === void 0 && config.newCardsLimit !== void 0) {
      config = {
        ...config,
        newCardsPerDay: config.enableNewCardsLimit ? config.newCardsLimit : -1,
        // Use -1 for unlimited (was 0 in old system)
        reviewCardsPerDay: config.enableReviewCardsLimit ? config.reviewCardsLimit : -1
        // Use -1 for unlimited (was 0 in old system)
      };
    }
    if (config.newCardsPerDay === 0 && config.reviewCardsPerDay === 0 && config.headerLevel === 2 && config.reviewOrder === "due-date") {
      config = {
        ...config,
        newCardsPerDay: -1,
        reviewCardsPerDay: -1
      };
    }
    if (config.headerLevel === void 0) {
      config = {
        ...config,
        headerLevel: DEFAULT_DECK_CONFIG.headerLevel
      };
    }
    return {
      id: row[0],
      name: row[1],
      filepath: row[2],
      tag: row[3],
      lastReviewed: row[4],
      config,
      created: row[6],
      modified: row[7]
    };
  }
  // Deck operations
  async createDeck(deck) {
    if (!this.db)
      throw new Error("Database not initialized");
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const fullDeck = {
      ...deck,
      created: now,
      modified: now
    };
    try {
      const stmt = this.db.prepare(SQL_QUERIES.INSERT_DECK);
      stmt.run([
        fullDeck.id,
        fullDeck.name,
        fullDeck.filepath,
        fullDeck.tag,
        fullDeck.lastReviewed,
        JSON.stringify(fullDeck.config),
        fullDeck.created,
        fullDeck.modified
      ]);
      stmt.free();
      await this.save();
      return fullDeck;
    } catch (error) {
      throw error;
    }
  }
  async getDeckByTag(tag) {
    return this.queryOne(
      SQL_QUERIES.GET_DECK_BY_TAG,
      [tag],
      this.parseDeckRow.bind(this)
    );
  }
  async getDeckByFilepath(filepath) {
    return this.queryOne(
      SQL_QUERIES.GET_DECK_BY_FILEPATH,
      [filepath],
      this.parseDeckRow.bind(this)
    );
  }
  async getDeckById(id) {
    return this.queryOne(
      SQL_QUERIES.GET_DECK_BY_ID,
      [id],
      this.parseDeckRow.bind(this)
    );
  }
  async updateDeck(deckId, updates) {
    if (!this.db)
      throw new Error("Database not initialized");
    const now = (/* @__PURE__ */ new Date()).toISOString();
    if (Object.keys(updates).length === 0) {
      return;
    }
    const updateFields = Object.keys(updates).map((key) => {
      const dbField = key === "lastReviewed" ? "last_reviewed" : key;
      return `${dbField} = ?`;
    }).join(", ");
    const sql = `UPDATE decks SET ${updateFields}, modified = ? WHERE id = ?`;
    const stmt = this.db.prepare(sql);
    const values = Object.values(updates).map(
      (value, index) => {
        const key = Object.keys(updates)[index];
        return key === "config" ? JSON.stringify(value) : value;
      }
    );
    values.push(now, deckId);
    stmt.run(values);
    stmt.free();
    await this.save();
  }
  updateDeckTimestampCore(deckId, timestamp) {
    this.executeStatement(SQL_QUERIES.UPDATE_DECK_TIMESTAMP, [
      timestamp,
      deckId
    ]);
  }
  async updateDeckTimestamp(deckId, timestamp) {
    this.updateDeckTimestampCore(deckId, timestamp);
    await this.save();
  }
  // Version without save for use in transactions
  async updateDeckTimestampWithoutSave(deckId, timestamp) {
    this.updateDeckTimestampCore(deckId, timestamp);
  }
  async getAllDecks() {
    return this.queryAll(
      SQL_QUERIES.GET_ALL_DECKS,
      [],
      this.parseDeckRow.bind(this)
    );
  }
  async updateDeckLastReviewed(deckId) {
    const now = (/* @__PURE__ */ new Date()).toISOString();
    await this.executeStatementWithSave(SQL_QUERIES.UPDATE_DECK_LAST_REVIEWED, [
      now,
      now,
      deckId
    ]);
  }
  async updateDeckHeaderLevel(deckId, headerLevel) {
    if (!this.db)
      throw new Error("Database not initialized");
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const stmt = this.db.prepare(`
      UPDATE decks
      SET header_level = ?, modified = ?
      WHERE id = ?
    `);
    stmt.run([headerLevel, now, deckId]);
    stmt.free();
    await this.save();
  }
  async renameDeck(oldDeckId, newDeckId, newName, newFilepath) {
    const now = (/* @__PURE__ */ new Date()).toISOString();
    await this.executeStatementWithSave(SQL_QUERIES.RENAME_DECK, [
      newDeckId,
      newName,
      newFilepath,
      now,
      oldDeckId
    ]);
  }
  async deleteDeckByFilepath(filepath) {
    if (!this.db)
      throw new Error("Database not initialized");
    const deck = await this.getDeckByFilepath(filepath);
    if (!deck)
      return;
    const stmt = this.db.prepare(SQL_QUERIES.DELETE_DECK_BY_FILEPATH);
    stmt.run([filepath]);
    stmt.free();
    await this.save();
  }
  async deleteDeck(deckId) {
    if (!this.db)
      throw new Error("Database not initialized");
    const stmt = this.db.prepare(SQL_QUERIES.DELETE_DECK);
    stmt.run([deckId]);
    stmt.free();
    await this.save();
  }
  // Flashcard operations
  createFlashcardCore(flashcard) {
    if (!this.db)
      throw new Error("Database not initialized");
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const fullFlashcard = {
      ...flashcard,
      created: now,
      modified: now
    };
    let stmt;
    try {
      stmt = this.db.prepare(SQL_QUERIES.INSERT_FLASHCARD);
      stmt.run([
        fullFlashcard.id,
        fullFlashcard.deckId,
        fullFlashcard.front,
        fullFlashcard.back,
        fullFlashcard.type,
        fullFlashcard.sourceFile,
        fullFlashcard.contentHash,
        fullFlashcard.state,
        fullFlashcard.dueDate,
        flashcard.interval,
        flashcard.repetitions,
        flashcard.difficulty,
        flashcard.stability,
        flashcard.lapses,
        fullFlashcard.lastReviewed,
        fullFlashcard.created,
        fullFlashcard.modified
      ]);
      stmt.free();
      return fullFlashcard;
    } catch (error) {
      console.error(`Failed to create flashcard ${fullFlashcard.id}:`, error);
      if (stmt) {
        try {
          stmt.free();
        } catch (freeError) {
          console.error(`Failed to free statement:`, freeError);
        }
      }
      throw error;
    }
  }
  async createFlashcard(flashcard) {
    const result = this.createFlashcardCore(flashcard);
    await this.save();
    return result;
  }
  // Version without save for use in transactions
  async createFlashcardWithoutSave(flashcard) {
    return this.createFlashcardCore(flashcard);
  }
  updateFlashcardCore(flashcardId, updates) {
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const fields = [];
    const values = [];
    for (const [key, value] of Object.entries(updates)) {
      if (value !== void 0) {
        const dbField = key === "dueDate" ? "due_date" : key === "lastReviewed" ? "last_reviewed" : key === "contentHash" ? "content_hash" : key;
        fields.push(`${dbField} = ?`);
        values.push(value);
      }
    }
    if (fields.length === 0)
      return;
    fields.push("modified = ?");
    values.push(now, flashcardId);
    const sql = `UPDATE flashcards SET ${fields.join(", ")} WHERE id = ?`;
    this.executeStatement(sql, values);
  }
  async updateFlashcard(flashcardId, updates) {
    this.updateFlashcardCore(flashcardId, updates);
  }
  deleteFlashcardCore(flashcardId) {
    this.executeStatement(SQL_QUERIES.DELETE_FLASHCARD, [flashcardId]);
  }
  async deleteFlashcard(flashcardId) {
    this.deleteFlashcardCore(flashcardId);
    await this.save();
  }
  // Version without save for use in transactions
  async deleteFlashcardWithoutSave(flashcardId) {
    this.deleteFlashcardCore(flashcardId);
  }
  async updateFlashcardDeckIds(oldDeckId, newDeckId) {
    await this.executeStatementWithSave(SQL_QUERIES.UPDATE_FLASHCARD_DECK_IDS, [
      newDeckId,
      oldDeckId
    ]);
  }
  async getFlashcardsByDeck(deckId) {
    return this.queryAll(
      SQL_QUERIES.GET_FLASHCARDS_BY_DECK,
      [deckId],
      this.rowToFlashcard.bind(this)
    );
  }
  async getDueFlashcards(deckId) {
    const now = (/* @__PURE__ */ new Date()).toISOString();
    return this.queryAll(
      SQL_QUERIES.GET_DUE_FLASHCARDS,
      [deckId, now],
      this.rowToFlashcard.bind(this)
    );
  }
  async getDailyReviewCounts(deckId) {
    const today = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    const todayStart = `${today}T00:00:00.000Z`;
    const todayEnd = `${today}T23:59:59.999Z`;
    const newResult = this.queryOne(
      SQL_QUERIES.COUNT_NEW_CARDS_TODAY,
      [deckId, todayStart, todayEnd],
      (row) => Number(row[0])
    );
    const newCount = newResult || 0;
    const reviewResult = this.queryOne(
      SQL_QUERIES.COUNT_REVIEW_CARDS_TODAY,
      [deckId, todayStart, todayEnd],
      (row) => Number(row[0])
    );
    const reviewCount = reviewResult || 0;
    return { newCount, reviewCount };
  }
  async getReviewableFlashcards(deckId) {
    if (!this.db)
      throw new Error("Database not initialized");
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const deck = await this.getDeckById(deckId);
    if (!deck) {
      throw new Error(`Deck not found: ${deckId}`);
    }
    const config = deck.config;
    const flashcards = [];
    const dailyCounts = await this.getDailyReviewCounts(deckId);
    const newCardsLimit = config.newCardsPerDay;
    const newCountToday = Number(dailyCounts.newCount) || 0;
    const remainingNewCards = hasNewCardsLimit(config) && newCardsLimit > 0 ? Math.max(0, newCardsLimit - newCountToday) : hasNewCardsLimit(config) && newCardsLimit === 0 ? 0 : Number.MAX_SAFE_INTEGER;
    if (remainingNewCards > 0) {
      const sql = `${SQL_QUERIES.GET_NEW_CARDS_FOR_REVIEW}${hasNewCardsLimit(config) ? ` LIMIT ${remainingNewCards}` : ""}`;
      const newCardsStmt = this.db.prepare(sql);
      newCardsStmt.bind([deckId, now]);
      while (newCardsStmt.step()) {
        const row = newCardsStmt.get();
        flashcards.push(this.rowToFlashcard(row));
      }
      newCardsStmt.free();
    }
    const reviewCardsLimit = config.reviewCardsPerDay;
    const reviewCountToday = Number(dailyCounts.reviewCount) || 0;
    const remainingReviewCards = hasReviewCardsLimit(config) && reviewCardsLimit > 0 ? Math.max(0, reviewCardsLimit - reviewCountToday) : hasReviewCardsLimit(config) && reviewCardsLimit === 0 ? 0 : Number.MAX_SAFE_INTEGER;
    if (remainingReviewCards > 0) {
      const sql = `${SQL_QUERIES.GET_REVIEW_CARDS_FOR_REVIEW}${hasReviewCardsLimit(config) ? ` LIMIT ${remainingReviewCards}` : ""}`;
      const reviewCardsStmt = this.db.prepare(sql);
      reviewCardsStmt.bind([deckId, now]);
      while (reviewCardsStmt.step()) {
        const row = reviewCardsStmt.get();
        flashcards.push(this.rowToFlashcard(row));
      }
      reviewCardsStmt.free();
    }
    flashcards.sort((a, b) => {
      const stateOrder = { review: 1, new: 2 };
      const aOrder = stateOrder[a.state];
      const bOrder = stateOrder[b.state];
      if (aOrder !== bOrder) {
        return aOrder - bOrder;
      }
      if (a.state === "review") {
        if (config.reviewOrder === "random") {
          return Math.random() - 0.5;
        } else {
          return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();
        }
      } else if (a.state === "new") {
        return new Date(a.dueDate).getTime() - new Date(b.dueDate).getTime();
      }
      return 0;
    });
    return flashcards;
  }
  async getLatestReviewLogForFlashcard(flashcardId) {
    if (!this.db)
      throw new Error("Database not initialized");
    const stmt = this.db.prepare(SQL_QUERIES.GET_LATEST_REVIEW_LOG);
    stmt.bind([flashcardId]);
    if (stmt.step()) {
      const row = stmt.get();
      stmt.free();
      return {
        id: row[0],
        flashcardId: row[1],
        lastReviewedAt: row[2],
        shownAt: row[3],
        reviewedAt: row[4],
        rating: row[5],
        ratingLabel: row[6],
        timeElapsedMs: row[7],
        oldState: row[8],
        oldRepetitions: row[9],
        oldLapses: row[10],
        oldStability: row[11],
        oldDifficulty: row[12],
        newState: row[13],
        newRepetitions: row[14],
        newLapses: row[15],
        newStability: row[16],
        newDifficulty: row[17],
        oldIntervalMinutes: row[18],
        newIntervalMinutes: row[19],
        oldDueAt: row[20],
        newDueAt: row[21],
        elapsedDays: row[22],
        retrievability: row[23],
        requestRetention: row[24],
        profile: row[25] || "STANDARD",
        maximumIntervalDays: row[26],
        minMinutes: row[27],
        fsrsWeightsVersion: row[28],
        schedulerVersion: row[29],
        noteModelId: row[30],
        cardTemplateId: row[31],
        contentHash: row[32],
        client: row[33]
      };
    }
    stmt.free();
    return null;
  }
  async deleteFlashcardsByFile(sourceFile) {
    await this.executeStatementWithSave(SQL_QUERIES.DELETE_FLASHCARDS_BY_FILE, [
      sourceFile
    ]);
  }
  // Review log operations
  async createReviewLog(log) {
    if (!this.db)
      throw new Error("Database not initialized");
    const id = `review_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const stmt = this.db.prepare(SQL_QUERIES.INSERT_REVIEW_LOG);
    stmt.run([
      id,
      log.flashcardId,
      log.sessionId || null,
      log.lastReviewedAt,
      log.shownAt || null,
      log.reviewedAt,
      log.rating,
      log.ratingLabel,
      log.timeElapsedMs || null,
      log.oldState,
      log.oldRepetitions,
      log.oldLapses,
      log.oldStability,
      log.oldDifficulty,
      log.newState,
      log.newRepetitions,
      log.newLapses,
      log.newStability,
      log.newDifficulty,
      log.oldIntervalMinutes,
      log.newIntervalMinutes,
      log.oldDueAt,
      log.newDueAt,
      log.elapsedDays,
      log.retrievability,
      log.requestRetention,
      log.profile,
      log.maximumIntervalDays,
      log.minMinutes,
      log.fsrsWeightsVersion,
      log.schedulerVersion,
      log.noteModelId || null,
      log.cardTemplateId || null,
      log.contentHash || null,
      log.client || null
    ]);
    stmt.free();
  }
  // Review session operations
  async createReviewSession(session) {
    if (!this.db)
      throw new Error("Database not initialized");
    const id = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const stmt = this.db.prepare(SQL_QUERIES.INSERT_REVIEW_SESSION);
    stmt.run([
      id,
      session.deckId,
      session.startedAt,
      session.endedAt || null,
      session.goalTotal,
      session.doneUnique
    ]);
    stmt.free();
    await this.save();
    return id;
  }
  async getReviewSessionById(sessionId) {
    if (!this.db)
      throw new Error("Database not initialized");
    const stmt = this.db.prepare(SQL_QUERIES.GET_REVIEW_SESSION_BY_ID);
    stmt.bind([sessionId]);
    if (stmt.step()) {
      const row = stmt.get();
      stmt.free();
      return this.rowToReviewSession(row);
    }
    stmt.free();
    return null;
  }
  async getActiveReviewSession(deckId) {
    if (!this.db)
      throw new Error("Database not initialized");
    const stmt = this.db.prepare(SQL_QUERIES.GET_ACTIVE_REVIEW_SESSION);
    stmt.bind([deckId]);
    if (stmt.step()) {
      const row = stmt.get();
      stmt.free();
      return this.rowToReviewSession(row);
    }
    stmt.free();
    return null;
  }
  async updateReviewSessionDoneUnique(sessionId, doneUnique) {
    await this.executeStatementWithSave(
      SQL_QUERIES.UPDATE_REVIEW_SESSION_DONE_UNIQUE,
      [doneUnique, sessionId]
    );
  }
  async endReviewSession(sessionId, endedAt) {
    await this.executeStatementWithSave(SQL_QUERIES.UPDATE_REVIEW_SESSION_END, [
      endedAt,
      sessionId
    ]);
  }
  async isCardReviewedInSession(sessionId, flashcardId) {
    if (!this.db)
      throw new Error("Database not initialized");
    const stmt = this.db.prepare(SQL_QUERIES.CHECK_CARD_REVIEWED_IN_SESSION);
    stmt.bind([sessionId, flashcardId]);
    let count = 0;
    if (stmt.step()) {
      const row = stmt.get();
      count = row[0];
    }
    stmt.free();
    return count > 0;
  }
  // Statistics operations
  async getDeckStats(deckId) {
    if (!this.db)
      throw new Error("Database not initialized");
    const now = (/* @__PURE__ */ new Date()).toISOString();
    const deck = await this.getDeckById(deckId);
    if (!deck) {
      throw new Error(`Deck not found: ${deckId}`);
    }
    const config = deck.config;
    const dailyCounts = await this.getDailyReviewCounts(deckId);
    const newStmt = this.db.prepare(SQL_QUERIES.COUNT_NEW_CARDS);
    newStmt.bind([deckId, now]);
    newStmt.step();
    const totalNewCards = newStmt.get()[0] || 0;
    newStmt.free();
    let newCount = totalNewCards;
    const newCardsLimit = config.newCardsPerDay;
    const newCountToday = Number(dailyCounts.newCount) || 0;
    if (hasNewCardsLimit(config) && newCardsLimit > 0) {
      const remainingNew = Math.max(0, newCardsLimit - newCountToday);
      newCount = Math.min(totalNewCards, remainingNew);
    } else if (hasNewCardsLimit(config) && newCardsLimit === 0) {
      newCount = 0;
    }
    const learningCount = 0;
    const dueStmt = this.db.prepare(SQL_QUERIES.COUNT_DUE_CARDS);
    dueStmt.bind([deckId, now]);
    dueStmt.step();
    const totalDueCards = dueStmt.get()[0] || 0;
    dueStmt.free();
    let dueCount = totalDueCards;
    const reviewCardsLimit = config.reviewCardsPerDay;
    const reviewCountToday = Number(dailyCounts.reviewCount) || 0;
    if (hasReviewCardsLimit(config) && reviewCardsLimit > 0) {
      const remainingReview = Math.max(0, reviewCardsLimit - reviewCountToday);
      dueCount = Math.min(totalDueCards, remainingReview);
    } else if (hasReviewCardsLimit(config) && reviewCardsLimit === 0) {
      dueCount = 0;
    }
    const totalStmt = this.db.prepare(SQL_QUERIES.COUNT_TOTAL_CARDS);
    totalStmt.bind([deckId]);
    totalStmt.step();
    const totalCount = totalStmt.get()[0] || 0;
    totalStmt.free();
    return {
      deckId,
      newCount,
      dueCount,
      totalCount
    };
  }
  async getAllDeckStats() {
    if (!this.db)
      throw new Error("Database not initialized");
    const decks = await this.getAllDecks();
    const stats = [];
    for (const deck of decks) {
      const deckStats = await this.getDeckStats(deck.id);
      stats.push(deckStats);
    }
    return stats;
  }
  async getReviewCountsByDate(days = 365) {
    if (!this.db)
      throw new Error("Database not initialized");
    const endDate = /* @__PURE__ */ new Date();
    const startDate = /* @__PURE__ */ new Date();
    startDate.setDate(endDate.getDate() - days);
    const stmt = this.db.prepare(SQL_QUERIES.GET_REVIEW_COUNTS_BY_DATE);
    stmt.bind([startDate.toISOString(), endDate.toISOString()]);
    const reviewCounts = /* @__PURE__ */ new Map();
    while (stmt.step()) {
      const row = stmt.get();
      const date = row[0];
      const count = row[1];
      reviewCounts.set(date, count);
    }
    stmt.free();
    return reviewCounts;
  }
  async migrateSchemaIfNeeded() {
    if (!this.db)
      return;
    try {
      this.debugLog("Starting database migration check...");
      if (needsMigration(this.db)) {
        this.debugLog("Migration needed, applying...");
        migrate(this.db, this.debugLog.bind(this));
        await this.save();
        this.debugLog("Migration completed successfully");
      } else {
        this.debugLog("Database schema is up to date");
      }
    } catch (error) {
      this.debugLog(`Migration failed: ${error}`);
      throw new Error(`Database migration failed: ${error}`);
    }
  }
  // Helper methods
  rowToFlashcard(row) {
    return {
      id: row[0],
      deckId: row[1],
      front: row[2],
      back: row[3],
      type: row[4],
      sourceFile: row[5],
      contentHash: row[6],
      state: row[7],
      dueDate: row[8],
      interval: row[9],
      repetitions: row[10],
      difficulty: row[11],
      stability: row[12],
      lapses: row[13],
      lastReviewed: row[14],
      created: row[15],
      modified: row[16]
    };
  }
  rowToReviewSession(row) {
    return {
      id: row[0],
      deckId: row[1],
      startedAt: row[2],
      endedAt: row[3],
      goalTotal: row[4],
      doneUnique: row[5]
    };
  }
  async getOverallStatistics(deckFilter = "all", timeframe = "12months") {
    if (!this.db)
      throw new Error("Database not initialized");
    try {
      const cutoffDate = /* @__PURE__ */ new Date();
      if (timeframe === "12months") {
        cutoffDate.setFullYear(cutoffDate.getFullYear() - 1);
      } else {
        cutoffDate.setFullYear(cutoffDate.getFullYear() - 10);
      }
      let deckFilterCondition = "";
      let deckFilterParams = [];
      if (deckFilter.startsWith("deck:")) {
        const deckId = deckFilter.substring(5);
        deckFilterCondition = "AND f.deck_id = ?";
        deckFilterParams.push(deckId);
      } else if (deckFilter.startsWith("tag:")) {
        const tag = deckFilter.substring(4);
        deckFilterCondition = "AND d.tag = ?";
        deckFilterParams.push(tag);
      }
      const dailyStatsStmt = this.db.prepare(
        deckFilterCondition ? SQL_QUERIES.GET_DAILY_STATS_OVERALL.replace(
          "FROM review_logs rl",
          "FROM review_logs rl"
        ).replace(
          "JOIN flashcards f ON rl.flashcard_id = f.id",
          "JOIN flashcards f ON rl.flashcard_id = f.id JOIN decks d ON f.deck_id = d.id"
        ).replace(
          "WHERE DATE(reviewed_at) >= DATE(?)",
          `WHERE DATE(reviewed_at) >= DATE(?) ${deckFilterCondition}`
        ) : SQL_QUERIES.GET_DAILY_STATS_OVERALL
      );
      dailyStatsStmt.bind([
        cutoffDate.toISOString().split("T")[0],
        ...deckFilterParams
      ]);
      const dailyStats = [];
      while (dailyStatsStmt.step()) {
        const row = dailyStatsStmt.get();
        const reviews = row[1];
        const correct = row[2];
        dailyStats.push({
          date: row[0],
          reviews,
          timeSpent: reviews * 30,
          // Estimate 30 seconds per review
          newCards: row[3],
          learningCards: 0,
          // No learning cards in pure FSRS
          reviewCards: row[4],
          correctRate: reviews > 0 ? correct / reviews * 100 : 0
        });
      }
      dailyStatsStmt.free();
      const cardStatsStmt = this.db.prepare(
        deckFilterCondition ? SQL_QUERIES.GET_CARD_STATS.replace(
          "FROM flashcards f",
          "FROM flashcards f JOIN decks d ON f.deck_id = d.id"
        ).replace(
          "GROUP BY f.state",
          `WHERE ${deckFilterCondition.replace("d.", "d.")} GROUP BY f.state`
        ) : SQL_QUERIES.GET_CARD_STATS
      );
      const cardStats = {
        new: 0,
        review: 0,
        mature: 0
      };
      if (deckFilterCondition) {
        cardStatsStmt.bind(deckFilterParams);
      }
      while (cardStatsStmt.step()) {
        const row = cardStatsStmt.get();
        const cardType = row[0];
        const count = row[1];
        if (cardType === "new")
          cardStats.new = count;
        else if (cardType === "review")
          cardStats.review = count;
        else if (cardType === "mature")
          cardStats.mature = count;
      }
      cardStatsStmt.free();
      const answerButtonsStmt = this.db.prepare(
        deckFilterCondition ? SQL_QUERIES.GET_ANSWER_BUTTON_STATS.replace(
          "FROM review_logs rl",
          "FROM review_logs rl JOIN flashcards f ON rl.flashcard_id = f.id JOIN decks d ON f.deck_id = d.id"
        ).replace(
          "WHERE rl.reviewed_at >= ? AND rl.reviewed_at <= ?",
          `WHERE rl.reviewed_at >= ? AND rl.reviewed_at <= ? ${deckFilterCondition}`
        ) : SQL_QUERIES.GET_ANSWER_BUTTON_STATS
      );
      const answerButtons = {
        again: 0,
        hard: 0,
        good: 0,
        easy: 0
      };
      answerButtonsStmt.bind([
        cutoffDate.toISOString().split("T")[0],
        ...deckFilterParams
      ]);
      while (answerButtonsStmt.step()) {
        const row = answerButtonsStmt.get();
        const ratingLabel = row[0];
        const count = row[1];
        answerButtons[ratingLabel] = count;
      }
      answerButtonsStmt.free();
      const totalReviews = Object.values(answerButtons).reduce(
        (sum, count) => sum + count,
        0
      );
      const correctReviews = totalReviews - answerButtons.again;
      const retentionRate = totalReviews > 0 ? correctReviews / totalReviews * 100 : 0;
      const intervalsStmt = this.db.prepare(`
      SELECT
        CASE
          WHEN f.interval < 1440 THEN CAST(f.interval / 60 AS INTEGER) || 'h'
          WHEN f.interval < 43200 THEN CAST(f.interval / 1440 AS INTEGER) || 'd'
          ELSE CAST(f.interval / 43200 AS INTEGER) || 'm'
        END as interval_group,
        COUNT(*) as count
      FROM flashcards f
      ${deckFilterCondition ? "JOIN decks d ON f.deck_id = d.id" : ""}
      WHERE f.state != 'new'
      ${deckFilterCondition}
      GROUP BY interval_group
      ORDER BY f.interval
    `);
      if (deckFilterCondition) {
        intervalsStmt.bind(deckFilterParams);
      }
      const intervals = [];
      while (intervalsStmt.step()) {
        const row = intervalsStmt.get();
        intervals.push({
          interval: row[0],
          count: row[1]
        });
      }
      intervalsStmt.free();
      const forecast = [];
      const today = /* @__PURE__ */ new Date();
      for (let i = 0; i < 90; i++) {
        const forecastDate = new Date(today);
        forecastDate.setDate(today.getDate() + i);
        const dateStr = forecastDate.toISOString().split("T")[0];
        const forecastStmt = this.db.prepare(
          deckFilterCondition ? SQL_QUERIES.GET_FORECAST_DUE_COUNT.replace(
            "FROM flashcards f",
            "FROM flashcards f JOIN decks d ON f.deck_id = d.id"
          ).replace(
            "WHERE DATE(f.due_date) = DATE(?)",
            `WHERE DATE(f.due_date) = DATE(?) ${deckFilterCondition}`
          ) : SQL_QUERIES.GET_FORECAST_DUE_COUNT
        );
        forecastStmt.bind([dateStr, ...deckFilterParams]);
        let dueCount = 0;
        if (forecastStmt.step()) {
          const row = forecastStmt.get();
          dueCount = row[0];
        }
        forecastStmt.free();
        forecast.push({
          date: dateStr,
          dueCount
        });
      }
      const paceStmt = this.db.prepare(
        deckFilterCondition ? SQL_QUERIES.GET_PACE_STATS.replace(
          "FROM review_logs rl",
          "FROM review_logs rl JOIN flashcards f ON rl.flashcard_id = f.id JOIN decks d ON f.deck_id = d.id"
        ).replace(
          "WHERE rl.reviewed_at >= ? AND rl.reviewed_at <= ?",
          `WHERE rl.reviewed_at >= ? AND rl.reviewed_at <= ? ${deckFilterCondition}`
        ) : SQL_QUERIES.GET_PACE_STATS
      );
      const endDate = (/* @__PURE__ */ new Date()).toISOString();
      if (deckFilterCondition) {
        paceStmt.bind([cutoffDate.toISOString(), endDate, ...deckFilterParams]);
      } else {
        paceStmt.bind([cutoffDate.toISOString(), endDate]);
      }
      let averagePace = 0;
      let totalReviewTime = 0;
      if (paceStmt.step()) {
        const row = paceStmt.get();
        averagePace = row[0] || 0;
        totalReviewTime = row[1] || 0;
      }
      paceStmt.free();
      return {
        dailyStats,
        cardStats,
        answerButtons,
        retentionRate,
        intervals,
        forecast,
        averagePace,
        totalReviewTime
      };
    } catch (error) {
      console.error("Error in getOverallStatistics:", error);
      return {
        dailyStats: [],
        cardStats: { new: 0, review: 0, mature: 0 },
        answerButtons: { again: 0, hard: 0, good: 0, easy: 0 },
        retentionRate: 0,
        intervals: [],
        forecast: [],
        averagePace: 0,
        totalReviewTime: 0
      };
    }
  }
  async purgeDatabase() {
    this.debugLog("Purging database - deleting all data");
    try {
      if (this.db) {
        this.db.exec(`
          DROP TABLE IF EXISTS review_logs;
          DROP TABLE IF EXISTS flashcards;
          DROP TABLE IF EXISTS decks;
        `);
        this.debugLog("All tables dropped, recreating schema");
        await this.createFreshDatabase();
        await this.save();
        this.debugLog("Database purged and recreated successfully");
      }
    } catch (error) {
      console.error("Error purging database:", error);
      throw error;
    }
  }
  async getFlashcardById(cardId) {
    return this.queryOne(
      "SELECT * FROM flashcards WHERE id = ?",
      [cardId],
      this.rowToFlashcard.bind(this)
    );
  }
  /**
   * Execute multiple operations in a database transaction
   * Note: For sql.js compatibility, avoid using this for now
   */
  async runInTransaction(operations) {
    if (!this.db)
      throw new Error("Database not initialized");
    try {
      this.db.exec("BEGIN TRANSACTION");
      const result = await operations();
      this.db.exec("COMMIT");
      return result;
    } catch (error) {
      try {
        this.db.exec("ROLLBACK");
      } catch (rollbackError) {
        console.warn("Transaction rollback failed:", rollbackError);
      }
      throw error;
    }
  }
  /**
   * Execute a raw SQL query and return results
   */
  async query(sql, params = []) {
    if (!this.db)
      throw new Error("Database not initialized");
    const stmt = this.db.prepare(sql);
    stmt.bind(params);
    const results = [];
    while (stmt.step()) {
      results.push(stmt.get());
    }
    stmt.free();
    return results;
  }
  async close() {
    if (this.db) {
      this.db.close();
      this.db = null;
    }
  }
};

// src/services/DeckManager.ts
var import_obsidian = require("obsidian");

// src/utils/ui.ts
async function yieldToUI() {
  await new Promise((resolve) => {
    if (typeof requestAnimationFrame !== "undefined") {
      requestAnimationFrame(() => resolve(null));
    } else {
      setTimeout(() => resolve(null), 0);
    }
  });
}
async function yieldEvery(currentIndex, yieldInterval = 100) {
  if (currentIndex > 0 && currentIndex % yieldInterval === 0) {
    await yieldToUI();
  }
}

// src/services/DeckManager.ts
var MAX_FLASHCARDS_PER_DECK = 5e4;
var _DeckManager = class _DeckManager {
  constructor(vault, metadataCache, db, plugin) {
    this.vault = vault;
    this.metadataCache = metadataCache;
    this.db = db;
    this.plugin = plugin;
  }
  /**
   * Helper method for timing operations
   */
  formatTime(ms) {
    if (ms < 1e3) {
      return `${ms.toFixed(2)}ms`;
    } else {
      return `${(ms / 1e3).toFixed(2)}s`;
    }
  }
  debugLog(message, ...args) {
    var _a;
    if ((_a = this.plugin) == null ? void 0 : _a.debugLog) {
      this.plugin.debugLog(message, ...args);
    }
  }
  performanceLog(message, ...args) {
    var _a;
    if ((_a = this.plugin) == null ? void 0 : _a.performanceLog) {
      this.plugin.performanceLog(message, ...args);
    }
  }
  /**
   * Scan vault for all decks (files with #flashcards tags)
   */
  async scanVaultForDecks() {
    const decksMap = /* @__PURE__ */ new Map();
    const files = this.vault.getMarkdownFiles();
    this.debugLog(`Scanning ${files.length} markdown files for flashcard tags`);
    for (const file7 of files) {
      const metadata = this.metadataCache.getFileCache(file7);
      if (!metadata) {
        this.debugLog(`No metadata for file: ${file7.path}`);
        continue;
      }
      this.debugLog(`Checking file: ${file7.path}`);
      const allTags = [];
      if (metadata.tags) {
        const inlineTags = metadata.tags.map((t) => t.tag);
        allTags.push(...inlineTags);
        this.debugLog(`File ${file7.path} has inline tags:`, inlineTags);
      }
      if (metadata.frontmatter && metadata.frontmatter.tags) {
        const frontmatterTags = Array.isArray(metadata.frontmatter.tags) ? metadata.frontmatter.tags : [metadata.frontmatter.tags];
        const normalizedTags = frontmatterTags.map(
          (tag) => tag.startsWith("#") ? tag : `#${tag}`
        );
        allTags.push(...normalizedTags);
        this.debugLog(
          `File ${file7.path} has frontmatter tags:`,
          normalizedTags
        );
      }
      if (allTags.length === 0) {
        continue;
      }
      const flashcardTags = allTags.filter(
        (tag) => tag.startsWith("#flashcards")
      );
      this.debugLog(`All tags for ${file7.path}:`, allTags);
      this.debugLog(`Flashcard tags for ${file7.path}:`, flashcardTags);
      for (const tag of flashcardTags) {
        if (!decksMap.has(tag)) {
          decksMap.set(tag, []);
        }
        decksMap.get(tag).push(file7);
      }
    }
    this.debugLog(`Found ${decksMap.size} decks:`, Array.from(decksMap.keys()));
    return decksMap;
  }
  /**
   * Sync decks with database
   */
  async syncDecks() {
    const syncDecksStartTime = performance.now();
    try {
      this.debugLog("Starting deck sync...");
      const decksMap = await this.scanVaultForDecks();
      this.debugLog("Decks found in vault:", decksMap);
      const existingDecks = await this.db.getAllDecks();
      this.debugLog("Existing decks in database:", existingDecks);
      const existingDecksByFile = /* @__PURE__ */ new Map();
      for (const deck of existingDecks) {
        existingDecksByFile.set(deck.filepath, deck);
      }
      let newDecksCreated = 0;
      let totalFiles = 0;
      for (const [tag, files] of decksMap) {
        for (const file7 of files) {
          totalFiles++;
          const filePath = file7.path;
          const deckName = file7.basename;
          const existingDeck = existingDecksByFile.get(filePath);
          this.debugLog(`Checking file: ${filePath}`);
          this.debugLog(
            `Existing deck found:`,
            existingDeck ? `YES (ID: ${existingDeck.id})` : "NO"
          );
          if (existingDeck) {
            if (existingDeck.tag !== tag) {
              this.debugLog(
                `Updating deck "${deckName}" tag from ${existingDeck.tag} to ${tag}`
              );
              await this.db.updateDeck(existingDeck.id, {
                tag
              });
            } else {
              this.debugLog(
                `Deck "${deckName}" already exists with correct tag, no update needed`
              );
            }
          } else {
            const file8 = this.vault.getAbstractFileByPath(filePath);
            let deckModTime = /* @__PURE__ */ new Date();
            if (file8 instanceof import_obsidian.TFile) {
              const fileModTime = new Date(file8.stat.mtime);
              const fileCreateTime = new Date(file8.stat.ctime);
              deckModTime = fileModTime < fileCreateTime ? fileModTime : fileCreateTime;
            }
            const deck = {
              id: this.generateDeckId(filePath),
              name: deckName,
              // Store clean file name
              filepath: filePath,
              // Store full file path separately
              tag,
              lastReviewed: null,
              config: DEFAULT_DECK_CONFIG,
              modified: deckModTime.toISOString()
            };
            this.debugLog(
              `Creating new deck: "${deckName}" with ID: ${deck.id}, tag: ${tag}, filepath: ${filePath}`
            );
            await this.db.createDeck(deck);
            newDecksCreated++;
          }
        }
      }
      const allFiles = /* @__PURE__ */ new Set();
      for (const [tag, files] of decksMap) {
        for (const file7 of files) {
          allFiles.add(file7.path);
        }
      }
      let deletedDecks = 0;
      for (const deck of existingDecks) {
        if (!allFiles.has(deck.filepath)) {
          this.debugLog(
            `Deleting orphaned deck: "${deck.name}" (${deck.filepath})`
          );
          await this.db.deleteDeckByFilepath(deck.filepath);
          deletedDecks++;
        }
      }
      this.debugLog(
        `Deck sync completed. Processed ${totalFiles} files, created ${newDecksCreated} new decks, deleted ${deletedDecks} orphaned decks.`
      );
      const syncDecksTime = performance.now() - syncDecksStartTime;
      this.performanceLog(
        `Deck sync completed successfully in ${this.formatTime(syncDecksTime)} (${newDecksCreated} created, ${deletedDecks} deleted)`
      );
    } catch (error) {
      console.error("Error during deck sync:", error);
      throw error;
    }
  }
  /**
   * Parse flashcards from a file
   */
  async parseFlashcardsFromFile(file7, headerLevel = 2) {
    const parseStartTime = performance.now();
    const content = await this.vault.read(file7);
    const readTime = performance.now() - parseStartTime;
    const parseContentStartTime = performance.now();
    const flashcards = this.parseFlashcardsFromContent(content, headerLevel);
    const parseTime = performance.now() - parseContentStartTime;
    const totalTime = performance.now() - parseStartTime;
    this.performanceLog(
      `Parsed ${flashcards.length} flashcards from ${file7.path} in ${this.formatTime(totalTime)} (read: ${this.formatTime(readTime)}, parse: ${this.formatTime(parseTime)})`
    );
    return flashcards;
  }
  /**
   * Parse flashcards from content string (optimized single-pass parsing)
   */
  parseFlashcardsFromContent(content, headerLevel = 2) {
    const lines = content.split("\n");
    const flashcards = [];
    let inTable = false;
    let headerSeen = false;
    let currentHeader = null;
    let currentContent = [];
    let inFrontmatter = false;
    let skipNextParagraph = false;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const trimmedLine = line.trim();
      if (i === 0 && trimmedLine === "---") {
        inFrontmatter = true;
        continue;
      }
      if (inFrontmatter) {
        if (trimmedLine === "---") {
          inFrontmatter = false;
        }
        continue;
      }
      if (_DeckManager.TABLE_ROW_REGEX.test(trimmedLine)) {
        if (!inTable) {
          inTable = true;
          headerSeen = false;
        }
        if (!headerSeen) {
          headerSeen = true;
          continue;
        }
        if (_DeckManager.TABLE_SEPARATOR_REGEX.test(trimmedLine)) {
          continue;
        }
        const cells = trimmedLine.slice(1, -1).split("|").map((cell) => cell.trim());
        if (cells.length >= 2 && cells[0] && cells[1]) {
          flashcards.push({
            front: cells[0],
            // TODO strip of unnecessary characters
            back: cells[1],
            type: "table"
          });
        }
      } else {
        if (inTable) {
          inTable = false;
        }
        const headerMatch = _DeckManager.HEADER_REGEX.exec(line);
        if (headerMatch) {
          const currentHeaderLevel = headerMatch[1].length;
          if (line.match(/^#\s+/) && line.toLowerCase().includes("flashcard")) {
            skipNextParagraph = true;
            this.finalizeCurrentHeader(
              currentHeader,
              currentContent,
              flashcards,
              headerLevel
            );
            currentHeader = null;
            currentContent = [];
            continue;
          }
          this.finalizeCurrentHeader(
            currentHeader,
            currentContent,
            flashcards,
            headerLevel
          );
          currentHeader = {
            text: line,
            level: currentHeaderLevel
          };
          currentContent = [];
          skipNextParagraph = false;
        } else if (skipNextParagraph) {
          if (trimmedLine === "") {
            skipNextParagraph = false;
          }
        } else if (currentHeader) {
          if (trimmedLine === "" && currentContent.length === 0) {
            continue;
          }
          currentContent.push(line);
        }
      }
    }
    this.finalizeCurrentHeader(
      currentHeader,
      currentContent,
      flashcards,
      headerLevel
    );
    return flashcards;
  }
  /**
   * Helper to finalize current header flashcard
   */
  finalizeCurrentHeader(currentHeader, currentContent, flashcards, targetHeaderLevel) {
    if (currentHeader && currentContent.length > 0 && currentHeader.level === targetHeaderLevel) {
      flashcards.push({
        front: currentHeader.text.replace(/^#{1,6}\s+/, ""),
        back: currentContent.join("\n").trim(),
        type: "header-paragraph"
      });
    }
  }
  /**
   * Execute batch database operations using transactions with prepared statements for optimal performance
   */
  async executeBatchOperations(operations) {
    const batchStartTime = performance.now();
    let createCount = 0;
    let updateCount = 0;
    let deleteCount = 0;
    this.debugLog(`Starting transaction for ${operations.length} operations`);
    try {
      this.db.beginTransaction();
      this.debugLog(`Transaction started successfully`);
      const deleteOps = operations.filter(
        (op) => op.type === "delete" && op.flashcardId
      );
      const createOps = operations.filter(
        (op) => op.type === "create" && op.flashcard
      );
      const updateOps = operations.filter(
        (op) => op.type === "update" && op.flashcardId && op.updates
      );
      if (deleteOps.length > 0) {
        this.db.batchDeleteFlashcards(deleteOps.map((op) => op.flashcardId));
        deleteCount = deleteOps.length;
        this.debugLog(`Batch deleted ${deleteCount} flashcards`);
      }
      if (createOps.length > 0) {
        this.db.batchCreateFlashcards(createOps.map((op) => op.flashcard));
        createCount = createOps.length;
        this.debugLog(`Batch created ${createCount} flashcards`);
      }
      if (updateOps.length > 0) {
        this.db.batchUpdateFlashcards(
          updateOps.map((op) => ({
            id: op.flashcardId,
            updates: op.updates
          }))
        );
        updateCount = updateOps.length;
        this.debugLog(`Batch updated ${updateCount} flashcards`);
      }
      await yieldToUI();
      this.db.commitTransaction();
      this.debugLog(`Transaction committed successfully`);
      const totalBatchTime = performance.now() - batchStartTime;
      this.performanceLog(
        `Transaction completed in ${this.formatTime(totalBatchTime)} (${createCount} created, ${updateCount} updated, ${deleteCount} deleted)`
      );
    } catch (error) {
      console.error(`Critical error in transaction:`, error);
      try {
        this.db.rollbackTransaction();
        this.debugLog(`Transaction rolled back due to error`);
      } catch (rollbackError) {
        console.error(`Failed to rollback transaction:`, rollbackError);
      }
      throw error;
    }
  }
  /**
   * Sync flashcards for a specific deck
   */
  async syncFlashcardsForDeck(deckId, force = false) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    const deckSyncStartTime = performance.now();
    this.debugLog(`Syncing flashcards for deck ID: ${deckId}`);
    const deck = await this.db.getDeckById(deckId);
    if (!deck) {
      this.debugLog(`No deck found for ID: ${deckId}`);
      return;
    }
    this.debugLog(
      `Found deck ID: ${deck.id}, name: ${deck.name}, filepath: ${deck.filepath}`
    );
    const file7 = this.vault.getAbstractFileByPath(deck.filepath);
    if (!file7 || !(file7 instanceof import_obsidian.TFile))
      return;
    const fileModifiedTime = new Date(file7.stat.mtime);
    if (!force) {
      const deckModifiedTime = new Date(deck.modified);
      if (fileModifiedTime <= deckModifiedTime) {
        this.debugLog(
          `File ${deck.filepath} not modified since last sync, skipping`
        );
        return;
      }
    }
    this.debugLog(
      `File modified: ${fileModifiedTime.toISOString()}, last sync: ${deck.modified}`
    );
    const existingFlashcards = await this.db.getFlashcardsByDeck(deck.id);
    this.debugLog(
      `Found ${existingFlashcards.length} existing flashcards for deck ${deck.name}`
    );
    const existingById = /* @__PURE__ */ new Map();
    existingFlashcards.forEach((card) => {
      existingById.set(card.id, card);
      this.debugLog(`Existing card ID: ${card.id}, Front: "${card.front}"`);
    });
    const processedIds = /* @__PURE__ */ new Set();
    const duplicateWarnings = /* @__PURE__ */ new Set();
    const batchOperations = [];
    const allParsedCards = await this.parseFlashcardsFromFile(
      file7,
      deck.config.headerLevel
    );
    const parsedCards = allParsedCards.slice(0, MAX_FLASHCARDS_PER_DECK);
    this.debugLog(
      `Parsed ${allParsedCards.length} flashcards from ${deck.filepath}, processing first ${parsedCards.length} (limit: ${MAX_FLASHCARDS_PER_DECK})`
    );
    if (allParsedCards.length > MAX_FLASHCARDS_PER_DECK) {
      this.debugLog(
        `\u26A0\uFE0F Deck "${deck.name}" exceeds flashcard limit. ${allParsedCards.length - MAX_FLASHCARDS_PER_DECK} flashcards will be skipped.`
      );
      if ((_c = (_b = (_a = this.plugin) == null ? void 0 : _a.settings) == null ? void 0 : _b.ui) == null ? void 0 : _c.enableNotices) {
        new import_obsidian.Notice(
          `\u26A0\uFE0F Deck "${deck.name}" has ${allParsedCards.length} flashcards. Only processing first ${MAX_FLASHCARDS_PER_DECK} for performance.`,
          8e3
        );
      }
    }
    for (let i = 0; i < parsedCards.length; i++) {
      const parsed = parsedCards[i];
      const flashcardId = this.generateFlashcardId(parsed.front);
      const contentHash = this.generateContentHash(parsed.back);
      const existingCard = existingById.get(flashcardId);
      if (processedIds.has(flashcardId)) {
        const duplicateKey = `${deck.name}:${parsed.front}`;
        if (!duplicateWarnings.has(duplicateKey)) {
          if ((_f = (_e = (_d = this.plugin) == null ? void 0 : _d.settings) == null ? void 0 : _e.ui) == null ? void 0 : _f.enableNotices) {
            new import_obsidian.Notice(
              `\u26A0\uFE0F Duplicate flashcard detected in "${deck.name}": "${parsed.front.substring(0, 50)}${parsed.front.length > 50 ? "..." : ""}". Only the first occurrence will be used.`,
              8e3
            );
          }
          duplicateWarnings.add(duplicateKey);
          this.debugLog(
            `Duplicate flashcard detected: "${parsed.front}" in deck "${deck.name}"`
          );
        }
        continue;
      }
      this.debugLog(
        `Processing flashcard: "${parsed.front.substring(0, 50)}..."`
      );
      this.debugLog(
        `Generated ID: ${flashcardId} (from front: "${parsed.front.substring(0, 30)}..." + deck: ${deck.id})`
      );
      this.debugLog(`Existing card found:`, existingCard ? "YES" : "NO");
      if (existingCard) {
        this.debugLog(
          `Existing card - ID: ${existingCard.id}, Front: "${existingCard.front.substring(0, 30)}...", Hash: ${existingCard.contentHash}`
        );
      }
      processedIds.add(flashcardId);
      await yieldEvery(i);
      if (existingCard) {
        if (existingCard.contentHash !== contentHash) {
          this.debugLog(
            `Content changed, updating flashcard: ${parsed.front.substring(0, 30)}...`
          );
          batchOperations.push({
            type: "update",
            flashcardId: existingCard.id,
            updates: {
              front: parsed.front,
              back: parsed.back,
              type: parsed.type,
              contentHash
            }
          });
        } else {
          this.debugLog(
            `No content change, skipping update: ${parsed.front.substring(0, 30)}...`
          );
        }
      } else {
        const previousProgress = await this.db.getLatestReviewLogForFlashcard(flashcardId);
        const flashcard = {
          id: flashcardId,
          deckId: deck.id,
          front: parsed.front,
          back: parsed.back,
          type: parsed.type,
          sourceFile: file7.path,
          contentHash,
          // Restore progress from review logs or use defaults
          state: (previousProgress == null ? void 0 : previousProgress.newState) || "new",
          dueDate: previousProgress ? new Date(
            new Date(previousProgress.reviewedAt).getTime() + previousProgress.newIntervalMinutes * 60 * 1e3
          ).toISOString() : (/* @__PURE__ */ new Date()).toISOString(),
          interval: (previousProgress == null ? void 0 : previousProgress.newIntervalMinutes) || 0,
          repetitions: (previousProgress == null ? void 0 : previousProgress.newRepetitions) || 0,
          difficulty: (previousProgress == null ? void 0 : previousProgress.newDifficulty) || 5,
          // FSRS initial difficulty
          stability: (previousProgress == null ? void 0 : previousProgress.newStability) || 2.5,
          // FSRS initial stability
          lapses: (previousProgress == null ? void 0 : previousProgress.newLapses) || 0,
          lastReviewed: (previousProgress == null ? void 0 : previousProgress.reviewedAt) || null
        };
        if (previousProgress) {
          this.debugLog(
            `Restoring flashcard progress from review logs: ${flashcard.front} (state: ${previousProgress.newState}, interval: ${previousProgress.newIntervalMinutes})`
          );
          if ((_i = (_h = (_g = this.plugin) == null ? void 0 : _g.settings) == null ? void 0 : _h.ui) == null ? void 0 : _i.enableNotices) {
            new import_obsidian.Notice(
              `\u2705 Progress restored for flashcard: "${parsed.front.substring(0, 40)}${parsed.front.length > 40 ? "..." : ""}" (${previousProgress.newState}, ${previousProgress.newRepetitions} reviews)`,
              5e3
            );
          }
        } else {
          this.debugLog(`Creating new flashcard: ${flashcard.front}`);
        }
        batchOperations.push({
          type: "create",
          flashcard
        });
      }
    }
    for (const [flashcardId, existingCard] of existingById) {
      if (!processedIds.has(flashcardId)) {
        this.debugLog(`Deleting flashcard: ${existingCard.front}`);
        batchOperations.push({
          type: "delete",
          flashcardId: existingCard.id
        });
      }
    }
    if (batchOperations.length > 0) {
      this.debugLog(
        `Executing ${batchOperations.length} batch database operations`
      );
      await this.executeBatchOperations(batchOperations);
      this.debugLog(`Batch operations completed successfully`);
    }
    const timestampStartTime = performance.now();
    try {
      this.debugLog(`Updating deck timestamp for: ${deck.name}`);
      await this.db.updateDeckTimestampWithoutSave(
        deck.id,
        fileModifiedTime.toISOString()
      );
      this.debugLog(`Deck timestamp updated successfully`);
    } catch (error) {
      console.error(`Failed to update deck timestamp for ${deck.name}:`, error);
      throw error;
    }
    try {
      this.debugLog(`Checking for duplicates in deck: ${deck.name}`);
      await this.checkForDuplicatesInDeck(deck.id);
      this.debugLog(`Duplicate check completed for deck: ${deck.name}`);
    } catch (error) {
      console.error(`Failed to check duplicates for ${deck.name}:`, error);
      throw error;
    }
    const timestampTime = performance.now() - timestampStartTime;
    const totalDeckSyncTime = performance.now() - deckSyncStartTime;
    this.performanceLog(
      `Sync completed for deck: ${deck.name} in ${this.formatTime(totalDeckSyncTime)} (${parsedCards.length} flashcards, ${batchOperations.length} operations, cleanup: ${this.formatTime(timestampTime)}) - DB save deferred`
    );
    yieldToUI();
  }
  /**
   * Create deck for a single file without running full sync
   */
  async createDeckForFile(filePath, tag) {
    const file7 = this.vault.getAbstractFileByPath(filePath);
    if (!file7 || !(file7 instanceof import_obsidian.TFile))
      return;
    const deckName = file7.basename;
    const existingDeck = await this.db.getDeckByFilepath(filePath);
    if (!existingDeck) {
      const fileModTime = new Date(file7.stat.mtime);
      const fileCreateTime = new Date(file7.stat.ctime);
      const deckModTime = fileModTime < fileCreateTime ? fileModTime : fileCreateTime;
      const deck = {
        id: this.generateDeckId(filePath),
        name: deckName,
        filepath: filePath,
        tag,
        lastReviewed: null,
        config: DEFAULT_DECK_CONFIG,
        modified: deckModTime.toISOString()
      };
      this.debugLog(
        `Creating new deck: "${deckName}" with ID: ${deck.id}, tag: ${tag}, filepath: ${filePath}`
      );
      await this.db.createDeck(deck);
    }
  }
  /**
   * Generate content hash for flashcard back content (front is used for ID)
   */
  generateContentHash(back) {
    let hash = 0;
    for (let i = 0; i < back.length; i++) {
      const char = back.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return Math.abs(hash).toString(16);
  }
  /**
   * Extract deck name from files (use the first file's name)
   */
  extractDeckNameFromFiles(files) {
    if (files.length === 0) {
      return "General";
    }
    const firstFile = files[0];
    return firstFile.basename;
  }
  /**
   * Extract deck name from tag (legacy method for compatibility)
   */
  extractDeckName(tag) {
    let name = tag.replace("#flashcards", "");
    if (name.startsWith("/")) {
      name = name.substring(1);
    }
    if (!name) {
      return "General";
    }
    const parts = name.split("/");
    return parts.map((part) => part.charAt(0).toUpperCase() + part.slice(1)).join(" - ");
  }
  /**
   * Generate deterministic deck ID based on filepath
   */
  generateDeckId(filepath) {
    if (filepath) {
      let hash = 0;
      for (let i = 0; i < filepath.length; i++) {
        const char = filepath.charCodeAt(i);
        hash = (hash << 5) - hash + char;
        hash = hash & hash;
      }
      return `deck_${Math.abs(hash).toString(36)}`;
    }
    return `deck_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Generate unique flashcard ID using hash of front text only
   */
  generateFlashcardId(frontText, deckId) {
    let hash = 0;
    for (let i = 0; i < frontText.length; i++) {
      const char = frontText.charCodeAt(i);
      hash = (hash << 5) - hash + char;
      hash = hash & hash;
    }
    return `card_${Math.abs(hash).toString(36)}`;
  }
  /**
   * Check for duplicate flashcards in a deck and warn the user
   */
  async checkForDuplicatesInDeck(deckId) {
    var _a, _b, _c;
    const existingFlashcards = await this.db.getFlashcardsByDeck(deckId);
    const frontTextMap = /* @__PURE__ */ new Map();
    for (const card of existingFlashcards) {
      const normalizedFront = card.front.trim().toLowerCase();
      if (!frontTextMap.has(normalizedFront)) {
        frontTextMap.set(normalizedFront, []);
      }
      frontTextMap.get(normalizedFront).push(card);
    }
    const deck = await this.db.getDeckById(deckId);
    const deckName = (deck == null ? void 0 : deck.name) || "Unknown Deck";
    for (const [frontText, cards] of frontTextMap) {
      if (cards.length > 1) {
        if ((_c = (_b = (_a = this.plugin) == null ? void 0 : _a.settings) == null ? void 0 : _b.ui) == null ? void 0 : _c.enableNotices) {
          new import_obsidian.Notice(
            `\u26A0\uFE0F Found ${cards.length} duplicate flashcards in "${deckName}": "${cards[0].front.substring(0, 50)}${cards[0].front.length > 50 ? "..." : ""}". Consider removing duplicates to avoid confusion.`,
            1e4
          );
        }
        this.debugLog(
          `Duplicate flashcards found in deck "${deckName}": "${cards[0].front}" (${cards.length} copies)`
        );
      }
    }
  }
  /**
   * Update deck IDs for all flashcards when a deck ID changes (e.g., file rename)
   */
  async updateFlashcardDeckIds(oldDeckId, newDeckId) {
    this.debugLog(
      `Updating flashcard deck IDs from ${oldDeckId} to ${newDeckId}`
    );
    await this.db.updateFlashcardDeckIds(oldDeckId, newDeckId);
  }
};
// Pre-compiled regex patterns for better performance
_DeckManager.HEADER_REGEX = /^(#{1,6})\s+/;
_DeckManager.TABLE_ROW_REGEX = /^\|.*\|$/;
_DeckManager.TABLE_SEPARATOR_REGEX = /^\|[\s-]+\|[\s-]+\|$/;
var DeckManager = _DeckManager;

// src/services/DeckSynchronizer.ts
var DeckSynchronizer = class {
  constructor(db, deckManager, debugLog, performanceLog) {
    this.isSyncing = false;
    this.db = db;
    this.deckManager = deckManager;
    this.debugLog = debugLog;
    this.performanceLog = performanceLog;
  }
  /**
   * Check if a sync operation is currently in progress
   */
  get isInProgress() {
    return this.isSyncing;
  }
  /**
   * Format time duration in human-readable format
   */
  formatTime(ms) {
    if (ms < 1e3) {
      return `${ms.toFixed(2)}ms`;
    } else {
      return `${(ms / 1e3).toFixed(2)}s`;
    }
  }
  /**
   * Perform initial sync with graceful error handling
   */
  async performInitialSync() {
    try {
      this.debugLog("Starting initial sync...");
      await new Promise((resolve) => setTimeout(resolve, 5e3));
      await this.performSync({ forceSync: false, showProgress: true });
      this.debugLog("Initial sync completed successfully");
    } catch (error) {
      console.error("Initial sync failed:", error);
    }
  }
  /**
   * Main sync operation - coordinates deck discovery and flashcard synchronization
   */
  async performSync(options = {}) {
    const { forceSync = false, showProgress = false, onProgress } = options;
    if (this.isSyncing) {
      this.debugLog("Sync already in progress, skipping...");
      throw new Error("Sync already in progress");
    }
    this.isSyncing = true;
    const syncStartTime = performance.now();
    try {
      this.debugLog(
        `Performing ${forceSync ? "forced " : ""}sync of decks and flashcards...`
      );
      if (showProgress && onProgress) {
        onProgress({ message: "\u{1F50D} Discovering decks...", percentage: 10 });
      }
      const decksStartTime = performance.now();
      await this.deckManager.syncDecks();
      const decksTime = performance.now() - decksStartTime;
      this.performanceLog(
        `Deck discovery completed in ${this.formatTime(decksTime)}`
      );
      const decks = await this.db.getAllDecks();
      this.debugLog(
        `Found ${decks.length} decks after sync:`,
        decks.map((d) => d.name)
      );
      if (showProgress && onProgress) {
        onProgress({
          message: `\u{1F4DA} Processing ${decks.length} decks...`,
          percentage: 20
        });
      }
      let totalFlashcards = 0;
      const flashcardSyncStartTime = performance.now();
      for (let i = 0; i < decks.length; i++) {
        const deck = decks[i];
        const deckStartTime = performance.now();
        if (showProgress && onProgress) {
          const deckProgress = 20 + i / decks.length * 70;
          onProgress({
            message: `\u{1F4C4} Processing deck: ${deck.name} (${i + 1}/${decks.length})`,
            percentage: deckProgress
          });
        }
        this.debugLog(
          `${forceSync ? "Force s" : "S"}yncing flashcards for deck: ${deck.name} (${deck.filepath})`
        );
        await this.deckManager.syncFlashcardsForDeck(deck.id, forceSync);
        await yieldToUI();
        const flashcards = await this.db.getFlashcardsByDeck(deck.id);
        const deckTime = performance.now() - deckStartTime;
        totalFlashcards += flashcards.length;
        this.performanceLog(
          `Deck ${deck.name} processed in ${this.formatTime(deckTime)} - ${flashcards.length} flashcards`
        );
      }
      if (showProgress && onProgress) {
        onProgress({ message: "\u{1F4BE} Saving database...", percentage: 95 });
      }
      this.debugLog("Saving database after processing all decks...");
      const saveStartTime = performance.now();
      await yieldToUI();
      await this.db.save();
      const saveTime = performance.now() - saveStartTime;
      this.debugLog("Database saved successfully");
      this.performanceLog(
        `Database saved in ${this.formatTime(saveTime)} after processing ${decks.length} decks`
      );
      const flashcardSyncTime = performance.now() - flashcardSyncStartTime;
      const totalSyncTime = performance.now() - syncStartTime;
      this.performanceLog(
        `Total sync completed in ${this.formatTime(totalSyncTime)} - ${totalFlashcards} flashcards across ${decks.length} decks`
      );
      if (decks.length > 0) {
        const avgDeckTime = flashcardSyncTime / decks.length;
        const avgFlashcardTime = totalFlashcards > 0 ? flashcardSyncTime / totalFlashcards : 0;
        this.performanceLog(
          `Performance: ${this.formatTime(avgDeckTime)}/deck, ${this.formatTime(avgFlashcardTime)}/flashcard`
        );
      }
      if (showProgress && onProgress) {
        onProgress({
          message: `\u2705 Sync complete! Processed ${totalFlashcards} flashcards across ${decks.length} decks in ${this.formatTime(totalSyncTime)} (DB saved in ${this.formatTime(saveTime)})`,
          percentage: 100
        });
      }
      return {
        totalDecks: decks.length,
        totalFlashcards,
        syncTime: totalSyncTime,
        saveTime,
        success: true
      };
    } catch (error) {
      this.debugLog("Error during sync:", error);
      if (showProgress && onProgress) {
        onProgress({
          message: `\u274C Sync failed - check console for details, message: ${error.message}, stack ${error.stack}`,
          percentage: 0
        });
      }
      return {
        totalDecks: 0,
        totalFlashcards: 0,
        syncTime: performance.now() - syncStartTime,
        saveTime: 0,
        success: false,
        error
      };
    } finally {
      this.isSyncing = false;
    }
  }
  /**
   * Sync flashcards for a specific deck
   */
  async syncDeck(deckId, forceSync = false, onProgress) {
    this.debugLog(`Syncing specific deck ID: ${deckId}`);
    const deck = await this.db.getDeckById(deckId);
    if (!deck) {
      this.debugLog(`No deck found for ID: ${deckId}`);
      return;
    }
    const deckDisplayName = deck.name;
    if (onProgress) {
      onProgress({
        message: `\u{1F504} Force refreshing deck: ${deckDisplayName}...`,
        percentage: 20
      });
    }
    const startTime = performance.now();
    await this.deckManager.syncFlashcardsForDeck(deckId, forceSync);
    const duration = performance.now() - startTime;
    if (onProgress) {
      onProgress({
        message: `\u2705 Force refresh complete: ${deckDisplayName} (${Math.round(duration)}ms)`,
        percentage: 100
      });
    }
  }
  /**
   * Create a deck for a specific file
   */
  async createDeckForFile(filePath, tag) {
    this.debugLog(`Creating deck for file: ${filePath} with tag: ${tag}`);
    await this.deckManager.createDeckForFile(filePath, tag);
  }
  /**
   * Update flashcard deck IDs when a deck is renamed
   */
  async updateFlashcardDeckIds(oldDeckId, newDeckId) {
    this.debugLog(
      `Updating flashcard deck IDs from ${oldDeckId} to ${newDeckId}`
    );
    await this.deckManager.updateFlashcardDeckIds(oldDeckId, newDeckId);
  }
  /**
   * Get sync statistics
   */
  getSyncStats() {
    return {
      isInProgress: this.isSyncing
    };
  }
};

// src/algorithm/fsrs.ts
var MILLISECONDS_PER_DAY = 864e5;
var MINUTES_PER_DAY = 1440;
var MILLISECONDS_PER_MINUTE = 6e4;
function roundForDisplay(value, decimals) {
  return value.toFixed(decimals);
}
var FSRS = class {
  constructor(params) {
    this.params = {
      requestRetention: 0.9,
      profile: "STANDARD",
      ...params
    };
    this.validateParameters();
  }
  /**
   * Update FSRS parameters
   */
  updateParameters(params) {
    this.params = { ...this.params, ...params };
    this.validateParameters();
  }
  /**
   * Get current profile weights (hardcoded, not user-editable)
   */
  getWeights() {
    return getWeightsForProfile(this.params.profile);
  }
  /**
   * Get minimum minutes for current profile (hardcoded)
   */
  getMinMinutes() {
    return getMinMinutesForProfile(this.params.profile);
  }
  /**
   * Get maximum interval days for current profile (hardcoded)
   */
  getMaxIntervalDays() {
    return getMaxIntervalDaysForProfile(this.params.profile);
  }
  /**
   * Validate FSRS parameters
   */
  validateParameters() {
    if (!validateProfile(this.params.profile)) {
      throw new Error(
        `Invalid profile: ${this.params.profile}, must be "INTENSIVE" or "STANDARD"`
      );
    }
    if (!validateRequestRetention(this.params.requestRetention)) {
      throw new Error(
        `requestRetention must be in range (0.5, 0.995), got ${this.params.requestRetention}`
      );
    }
    const weights = this.getWeights();
    if (!validateFSRSWeights(weights)) {
      throw new Error(
        `Invalid hardcoded weights for profile ${this.params.profile}`
      );
    }
  }
  /**
   * Calculate the next scheduling info for a flashcard based on review difficulty
   */
  getSchedulingInfo(card) {
    const fsrsCard = this.flashcardToFSRS(card);
    const now = /* @__PURE__ */ new Date();
    return {
      again: this.calculateScheduleForRating(fsrsCard, 1, now),
      hard: this.calculateScheduleForRating(fsrsCard, 2, now),
      good: this.calculateScheduleForRating(fsrsCard, 3, now),
      easy: this.calculateScheduleForRating(fsrsCard, 4, now)
    };
  }
  /**
   * Update a flashcard based on the selected difficulty
   */
  updateCard(card, difficulty) {
    const rating = this.difficultyToRating(difficulty);
    const fsrsCard = this.flashcardToFSRS(card);
    const now = /* @__PURE__ */ new Date();
    const updatedFsrsCard = this.calculateUpdatedFsrsCard(
      fsrsCard,
      rating,
      now
    );
    let intervalMinutes;
    if (rating === 1) {
      intervalMinutes = this.getMinMinutes();
    } else {
      intervalMinutes = this.nextIntervalMinutes(updatedFsrsCard.stability);
    }
    const schedule = this.createSchedulingCard(
      intervalMinutes,
      updatedFsrsCard,
      now
    );
    return {
      ...card,
      state: schedule.state,
      dueDate: schedule.dueDate,
      interval: schedule.interval,
      difficulty: schedule.difficulty,
      // Store FSRS difficulty with full precision
      repetitions: schedule.repetitions,
      stability: schedule.stability,
      // Store stability with full precision
      lapses: updatedFsrsCard.lapses,
      lastReviewed: now.toISOString(),
      modified: now.toISOString()
    };
  }
  calculateUpdatedFsrsCard(card, rating, now) {
    if (card.state === "New" || card.stability === 0 || card.difficulty === 0) {
      return {
        ...card,
        stability: this.initStability(rating),
        difficulty: this.initDifficulty(rating),
        reps: 1,
        lapses: rating === 1 ? 1 : 0,
        lastReview: now,
        state: "Review",
        elapsedDays: 0
      };
    } else {
      const newCard = { ...card };
      newCard.elapsedDays = this.getElapsedDays(card.lastReview, now);
      newCard.reps += 1;
      if (rating === 1) {
        newCard.lapses += 1;
        if (!isFinite(newCard.difficulty) || newCard.difficulty <= 0) {
          newCard.difficulty = this.initDifficulty(3);
        }
        newCard.difficulty = this.nextDifficulty(newCard.difficulty, rating);
        newCard.stability = this.initStability(rating);
      } else {
        if (!isFinite(newCard.stability) || newCard.stability <= 0) {
          newCard.stability = this.initStability(3);
        }
        const retrievability = this.forgettingCurve(
          newCard.elapsedDays,
          newCard.stability
        );
        newCard.difficulty = this.nextDifficulty(newCard.difficulty, rating);
        newCard.stability = this.nextStability(
          newCard.difficulty,
          newCard.stability,
          retrievability,
          rating
        );
        if (!isFinite(newCard.stability) || newCard.stability <= 0) {
          newCard.stability = this.initStability(rating);
        }
      }
      newCard.lastReview = now;
      newCard.state = "Review";
      return newCard;
    }
  }
  calculateScheduleForRating(card, rating, now) {
    const updatedCard = this.calculateUpdatedFsrsCard(card, rating, now);
    if (!isFinite(updatedCard.stability) || updatedCard.stability <= 0) {
      updatedCard.stability = this.initStability(rating);
    }
    let intervalMinutes;
    if (rating === 1) {
      intervalMinutes = this.getMinMinutes();
    } else {
      intervalMinutes = this.nextIntervalMinutes(updatedCard.stability);
    }
    return this.createSchedulingCard(intervalMinutes, updatedCard, now);
  }
  createSchedulingCard(intervalMinutes, card, now) {
    if (!isFinite(now.getTime())) {
      throw new Error("Invalid date provided to createSchedulingCard");
    }
    const intervalMilliseconds = intervalMinutes * MILLISECONDS_PER_MINUTE;
    const dueDate = new Date(now.getTime() + intervalMilliseconds);
    if (!isFinite(dueDate.getTime())) {
      throw new Error(
        `Invalid due date calculated: intervalMinutes=${intervalMinutes}, now=${now.toISOString()}`
      );
    }
    return {
      dueDate: dueDate.toISOString(),
      interval: intervalMinutes,
      // Store full precision interval
      repetitions: card.reps,
      stability: card.stability,
      // Store full precision stability
      difficulty: card.difficulty,
      // Store full precision difficulty
      state: this.fsrsStateToFlashcardState(card.state)
    };
  }
  initStability(rating) {
    const weights = this.getWeights();
    const stability = weights[rating - 1];
    const result = isFinite(stability) ? stability : 0.01;
    return result;
  }
  initDifficulty(rating) {
    const weights = this.getWeights();
    const w4 = weights[4];
    const w5 = weights[5];
    const ratingDiff = rating - 3;
    const difficulty = w4 - w5 * ratingDiff;
    const validDifficulty = isFinite(difficulty) ? difficulty : 5;
    if (validDifficulty < 1)
      return 1;
    if (validDifficulty > 10)
      return 10;
    return validDifficulty;
  }
  /**
   * Forgetting curve function with maximum precision
   */
  forgettingCurve(elapsedDays, stability) {
    if (!isFinite(elapsedDays) || !isFinite(stability) || stability <= 0) {
      return 0;
    }
    const stabilityFactor = 9 * stability;
    const elapsedToStabilityRatio = elapsedDays / stabilityFactor;
    const baseTerm = 1 + elapsedToStabilityRatio;
    if (!isFinite(baseTerm) || baseTerm <= 0) {
      return 0;
    }
    const powerTerm = Math.pow(baseTerm, -1);
    return isFinite(powerTerm) ? powerTerm : 0;
  }
  /**
   * Calculate retrievability for a flashcard at review time
   * @param card - The flashcard being reviewed
   * @param reviewedAt - When the review is happening
   * @returns Retrievability value (0-1)
   */
  getRetrievability(card, reviewedAt = /* @__PURE__ */ new Date()) {
    if (!card.lastReviewed || card.stability <= 0) {
      return 0.9;
    }
    const reviewedAtTime = reviewedAt.getTime();
    const lastReviewedTime = new Date(card.lastReviewed).getTime();
    const elapsedMilliseconds = reviewedAtTime - lastReviewedTime;
    const elapsedDays = Math.max(0, elapsedMilliseconds / MILLISECONDS_PER_DAY);
    return this.forgettingCurve(elapsedDays, card.stability);
  }
  /**
   * Calculate next difficulty with maximum precision
   */
  nextDifficulty(difficulty, rating) {
    if (!isFinite(difficulty) || !isFinite(rating)) {
      return 5;
    }
    const weights = this.getWeights();
    const w6 = weights[6];
    const ratingDiff = rating - 3;
    const difficultyChange = w6 * ratingDiff;
    const nextD = difficulty - difficultyChange;
    const w4 = weights[4];
    const revertedD = this.meanReversion(w4, nextD);
    if (revertedD < 1)
      return 1;
    if (revertedD > 10)
      return 10;
    return revertedD;
  }
  /**
   * Mean reversion calculation with maximum precision
   */
  meanReversion(init2, current) {
    if (!isFinite(init2) || !isFinite(current)) {
      return init2;
    }
    const weights = this.getWeights();
    const w7 = weights[7];
    const initWeight = w7 * init2;
    const currentWeight = (1 - w7) * current;
    return initWeight + currentWeight;
  }
  /**
   * Calculate next stability with maximum precision
   */
  nextStability(difficulty, stability, retrievability, rating) {
    if (!isFinite(difficulty) || !isFinite(stability) || !isFinite(retrievability)) {
      return Math.max(stability, 0.01);
    }
    const weights = this.getWeights();
    const w8 = isFinite(weights[8]) ? weights[8] : 0;
    const w9 = isFinite(weights[9]) ? weights[9] : 0.1;
    const w10 = isFinite(weights[10]) ? weights[10] : 0;
    const w15 = isFinite(weights[15]) ? weights[15] : 1;
    const w16 = isFinite(weights[16]) ? weights[16] : 1;
    const hardPenalty = rating === 2 ? w15 : 1;
    const easyBonus = rating === 4 ? w16 : 1;
    const expW8 = Math.exp(w8);
    const difficultyTerm = 11 - difficulty;
    const stabilityPowerTerm = stability > 0 ? Math.pow(stability, -w9) : 1;
    const retrievabilityTerm = 1 - retrievability;
    const retrievabilityProduct = retrievabilityTerm * w10;
    const expRetrievabilityTerm = Math.exp(retrievabilityProduct) - 1;
    if (!isFinite(expW8) || !isFinite(difficultyTerm) || !isFinite(stabilityPowerTerm) || !isFinite(expRetrievabilityTerm)) {
      return Math.max(stability, 0.01);
    }
    const growthFactor = expW8 * difficultyTerm * stabilityPowerTerm * expRetrievabilityTerm;
    const totalGrowthFactor = growthFactor * hardPenalty * easyBonus;
    const newStabilityFactor = 1 + totalGrowthFactor;
    const result = stability * newStabilityFactor;
    return isFinite(result) && result > 0 ? result : Math.max(stability, 0.1);
  }
  /**
   * Calculate next interval in minutes with maximum precision
   */
  nextIntervalMinutes(stability) {
    const minInterval = this.getMinMinutes();
    if (!isFinite(stability) || stability <= 0) {
      console.warn(`Invalid stability: ${stability}, using minMinutes`);
      return minInterval;
    }
    if (!isFinite(this.params.requestRetention) || this.params.requestRetention <= 0 || this.params.requestRetention >= 1) {
      console.warn(
        `Invalid requestRetention: ${this.params.requestRetention}, using minMinutes`
      );
      return minInterval;
    }
    const retentionLog = Math.log(this.params.requestRetention);
    const baseLog = Math.log(0.9);
    const k = retentionLog / baseLog;
    const intervalDays = stability * k;
    const intervalMinutes = intervalDays * MINUTES_PER_DAY;
    if (!isFinite(intervalMinutes)) {
      console.warn(
        `Invalid minutes calculation: stability=${stability}, k=${k}, using minMinutes`
      );
      return minInterval;
    }
    const maxInterval = this.getMaxIntervalDays() * MINUTES_PER_DAY;
    let result = intervalMinutes;
    if (result < minInterval)
      result = minInterval;
    if (result > maxInterval)
      result = maxInterval;
    if (!isFinite(result)) {
      console.warn(`Invalid final result: ${result}, using minMinutes`);
      return minInterval;
    }
    return result;
  }
  /**
   * Calculate elapsed days with maximum precision
   */
  getElapsedDays(lastReview, now) {
    const nowTime = now.getTime();
    const lastReviewTime = lastReview.getTime();
    const elapsedMilliseconds = nowTime - lastReviewTime;
    const elapsedDays = elapsedMilliseconds / MILLISECONDS_PER_DAY;
    return Math.max(0, elapsedDays);
  }
  flashcardToFSRS(card) {
    const lastReview = card.lastReviewed ? new Date(card.lastReviewed) : /* @__PURE__ */ new Date();
    const difficulty = card.difficulty || 5;
    return {
      stability: card.stability || 0,
      difficulty: difficulty || 0,
      elapsedDays: 0,
      // Will be calculated in scheduling
      reps: card.repetitions,
      lapses: card.lapses || 0,
      state: this.flashcardStateToFSRSState(card.state),
      lastReview
    };
  }
  flashcardStateToFSRSState(state) {
    return state === "new" ? "New" : "Review";
  }
  fsrsStateToFlashcardState(state) {
    return state === "New" ? "new" : "review";
  }
  difficultyToRating(difficulty) {
    switch (difficulty) {
      case "again":
        return 1;
      case "hard":
        return 2;
      case "good":
        return 3;
      case "easy":
        return 4;
      default:
        return 3;
    }
  }
  /**
   * Get display text for intervals - UI formatting only
   */
  static getIntervalDisplay(minutes) {
    if (minutes < 60) {
      return `${Math.round(minutes)}m`;
    } else if (minutes < MINUTES_PER_DAY) {
      const hours = Math.round(minutes / 60);
      return `${hours}h`;
    } else {
      const days = Math.round(minutes / MINUTES_PER_DAY);
      if (days < 30) {
        return `${days}d`;
      } else if (days < 365) {
        const months = Math.round(days / 30);
        return `${months}mo`;
      } else {
        const years = days / 365;
        return `${roundForDisplay(years, 1)}y`;
      }
    }
  }
};

// src/services/Scheduler.ts
var Scheduler = class {
  constructor(db) {
    this.currentSessionId = null;
    this.db = db;
    this.fsrs = new FSRS();
  }
  /**
   * Start a new review session for a deck
   */
  async startReviewSession(deckId, now = /* @__PURE__ */ new Date()) {
    const deck = await this.db.getDeckById(deckId);
    if (!deck) {
      throw new Error(`Deck not found: ${deckId}`);
    }
    const dailyCounts = await this.db.getDailyReviewCounts(deckId);
    const dueCardCount = await this.getDueCardCount(now, deckId);
    const newCardCount = await this.getNewCardCount(deckId);
    let goalTotal = 0;
    if (hasReviewCardsLimit(deck.config)) {
      if (deck.config.reviewCardsPerDay === 0) {
        goalTotal += 0;
      } else {
        const remainingReviewQuota = Math.max(
          0,
          deck.config.reviewCardsPerDay - dailyCounts.reviewCount
        );
        goalTotal += Math.min(dueCardCount, remainingReviewQuota);
      }
    } else {
      goalTotal += dueCardCount;
    }
    if (hasNewCardsLimit(deck.config)) {
      if (deck.config.newCardsPerDay === 0) {
        goalTotal += 0;
      } else {
        const remainingNewQuota = Math.max(
          0,
          deck.config.newCardsPerDay - dailyCounts.newCount
        );
        goalTotal += Math.min(newCardCount, remainingNewQuota);
      }
    } else {
      goalTotal += newCardCount;
    }
    const finalGoalTotal = Math.max(1, goalTotal);
    const sessionId = await this.db.createReviewSession({
      deckId,
      startedAt: now.toISOString(),
      endedAt: null,
      goalTotal: finalGoalTotal,
      doneUnique: 0
    });
    return sessionId;
  }
  /**
   * Get progress for a review session
   */
  async getSessionProgress(sessionId) {
    const session = await this.db.getReviewSessionById(sessionId);
    if (!session)
      return null;
    const progress = session.goalTotal > 0 ? Math.min(100, session.doneUnique / session.goalTotal * 100) : 0;
    return {
      doneUnique: session.doneUnique,
      goalTotal: session.goalTotal,
      progress
    };
  }
  /**
   * End a review session
   */
  async endReviewSession(sessionId, now = /* @__PURE__ */ new Date()) {
    await this.db.endReviewSession(sessionId, now.toISOString());
  }
  /**
   * Start a fresh review session for a deck (ends any existing session)
   */
  async startFreshSession(deckId, now = /* @__PURE__ */ new Date()) {
    const activeSession = await this.db.getActiveReviewSession(deckId);
    if (activeSession) {
      await this.db.endReviewSession(activeSession.id, now.toISOString());
    }
    this.currentSessionId = await this.startReviewSession(deckId, now);
    return this.currentSessionId;
  }
  /**
   * Set the current active session for tracking
   */
  setCurrentSession(sessionId) {
    this.currentSessionId = sessionId;
  }
  /**
   * Get the current active session
   */
  getCurrentSession() {
    return this.currentSessionId;
  }
  /**
   * Get the next due card for review
   */
  async getNext(now, deckId, options = {}) {
    const { allowNew = true } = options;
    if (await this.hasReviewCardQuota(deckId)) {
      const dueCard = await this.getNextDueCard(now, deckId);
      if (dueCard) {
        return dueCard;
      }
    }
    if (allowNew && await this.hasNewCardQuota(deckId)) {
      return await this.getNextNewCard(deckId);
    }
    return null;
  }
  /**
   * Preview scheduling outcomes for all four ratings without mutations
   */
  async preview(cardId, now = /* @__PURE__ */ new Date()) {
    const card = await this.db.getFlashcardById(cardId);
    if (!card)
      return null;
    const deck = await this.db.getDeckById(card.deckId);
    if (!deck)
      return null;
    this.updateFSRSForDeck(deck);
    const ratings = ["again", "hard", "good", "easy"];
    const preview = {};
    for (const rating of ratings) {
      const updatedCard = this.fsrs.updateCard(card, rating);
      preview[rating] = {
        dueDate: updatedCard.dueDate,
        interval: updatedCard.interval,
        repetitions: updatedCard.repetitions,
        stability: updatedCard.stability,
        difficulty: updatedCard.difficulty,
        state: updatedCard.state
      };
    }
    return preview;
  }
  /**
   * Rate a card and update its state atomically with session tracking
   */
  async rate(cardId, rating, now = /* @__PURE__ */ new Date(), timeElapsed) {
    const card = await this.db.getFlashcardById(cardId);
    if (!card) {
      throw new Error(`Card not found: ${cardId}`);
    }
    const deck = await this.db.getDeckById(card.deckId);
    if (!deck) {
      throw new Error(`Deck not found: ${card.deckId}`);
    }
    this.updateFSRSForDeck(deck);
    const oldCard = { ...card };
    const updatedCard = this.fsrs.updateCard(card, rating);
    const elapsedDays = this.getElapsedDays(card, now);
    const retrievability = this.calculateRetrievability(card, elapsedDays);
    let isFirstReviewInSession = false;
    if (this.currentSessionId) {
      isFirstReviewInSession = !await this.db.isCardReviewedInSession(
        this.currentSessionId,
        card.id
      );
      if (isFirstReviewInSession) {
        const session = await this.db.getReviewSessionById(
          this.currentSessionId
        );
        if (session) {
          const newDoneUnique = session.doneUnique + 1;
          await this.db.updateReviewSessionDoneUnique(
            this.currentSessionId,
            newDoneUnique
          );
        }
      }
    }
    const reviewLog = {
      flashcardId: card.id,
      sessionId: this.currentSessionId || void 0,
      lastReviewedAt: oldCard.lastReviewed || oldCard.dueDate,
      reviewedAt: now.toISOString(),
      rating: this.ratingToNumber(rating),
      ratingLabel: rating,
      timeElapsedMs: timeElapsed || 0,
      // Pre-state
      oldState: oldCard.state,
      oldRepetitions: oldCard.repetitions || 0,
      oldLapses: oldCard.lapses || 0,
      oldStability: oldCard.stability || 0,
      oldDifficulty: oldCard.difficulty || 0,
      // Post-state
      newState: updatedCard.state,
      newRepetitions: updatedCard.repetitions,
      newLapses: updatedCard.lapses,
      newStability: updatedCard.stability,
      newDifficulty: updatedCard.difficulty,
      // Intervals & due times
      oldIntervalMinutes: oldCard.interval,
      newIntervalMinutes: updatedCard.interval,
      oldDueAt: oldCard.dueDate,
      newDueAt: updatedCard.dueDate,
      // Derived values
      elapsedDays,
      retrievability,
      // Configuration context
      requestRetention: deck.config.fsrs.requestRetention,
      profile: deck.config.fsrs.profile,
      maximumIntervalDays: getMaxIntervalDaysForProfile(
        deck.config.fsrs.profile
      ),
      minMinutes: getMinMinutesForProfile(deck.config.fsrs.profile),
      fsrsWeightsVersion: this.getWeightsHash(deck.config.fsrs.profile),
      schedulerVersion: "1.0",
      // Content context
      contentHash: card.contentHash
    };
    await this.db.updateFlashcard(updatedCard.id, {
      state: updatedCard.state,
      dueDate: updatedCard.dueDate,
      interval: updatedCard.interval,
      repetitions: updatedCard.repetitions,
      difficulty: updatedCard.difficulty,
      stability: updatedCard.stability,
      lapses: updatedCard.lapses,
      lastReviewed: updatedCard.lastReviewed
    });
    await yieldToUI();
    await this.db.createReviewLog(reviewLog);
    return updatedCard;
  }
  /**
   * Save all pending changes to disk
   */
  async save() {
    console.log("Scheduler: Saving database to disk");
    await this.db.save();
    console.log("Scheduler: Database save completed");
  }
  /**
   * Peek at the next N due cards without mutations
   */
  async peekDue(now, deckId, limit = 10) {
    const deck = await this.db.getDeckById(deckId);
    if (!deck)
      return [];
    let query = `
      SELECT * FROM flashcards
      WHERE deck_id = ? AND due_date <= ? AND state = 'review'
    `;
    const params = [deckId, now.toISOString()];
    if (deck.config.reviewOrder === "random") {
      query += " ORDER BY RANDOM() LIMIT ?";
    } else {
      query += " ORDER BY due_date ASC, last_reviewed ASC LIMIT ?";
    }
    params.push(limit.toString());
    return await this.queryFlashcards(query, params);
  }
  /**
   * Get milliseconds until next card is due
   */
  async timeToNext(now, deckId) {
    const query = `
      SELECT MIN(due_date) as next_due
      FROM flashcards
      WHERE deck_id = ? AND due_date > ?
      ORDER BY due_date ASC
      LIMIT 1
    `;
    const results = await this.queryRaw(query, [deckId, now.toISOString()]);
    const nextDue = results.length > 0 ? results[0][0] : null;
    if (!nextDue) {
      return null;
    }
    const nextDueDate = new Date(nextDue);
    return Math.max(0, nextDueDate.getTime() - now.getTime());
  }
  // Private helper methods
  async getNextDueCard(now, deckId) {
    const deck = await this.db.getDeckById(deckId);
    if (!deck)
      return null;
    let query = `
      SELECT * FROM flashcards
      WHERE deck_id = ? AND due_date <= ? AND state = 'review'
    `;
    const params = [deckId, now.toISOString()];
    if (deck.config.reviewOrder === "random") {
      query += " ORDER BY RANDOM() LIMIT 1";
    } else {
      query += " ORDER BY due_date ASC, last_reviewed ASC LIMIT 1";
    }
    const results = await this.queryFlashcards(query, params);
    return results.length > 0 ? results[0] : null;
  }
  async getNextNewCard(deckId) {
    let query = `
      SELECT * FROM flashcards
      WHERE deck_id = ? AND state = 'new'
    `;
    const params = [deckId];
    query += " ORDER BY due_date ASC LIMIT 1";
    const results = await this.queryFlashcards(query, params);
    return results.length > 0 ? results[0] : null;
  }
  async hasNewCardQuota(deckId) {
    const deck = await this.db.getDeckById(deckId);
    if (!deck)
      return false;
    if (!hasNewCardsLimit(deck.config))
      return true;
    if (deck.config.newCardsPerDay === 0)
      return false;
    const dailyCounts = await this.db.getDailyReviewCounts(deckId);
    return dailyCounts.newCount < deck.config.newCardsPerDay;
  }
  async hasReviewCardQuota(deckId) {
    const deck = await this.db.getDeckById(deckId);
    if (!deck)
      return false;
    if (!hasReviewCardsLimit(deck.config))
      return true;
    if (deck.config.reviewCardsPerDay === 0)
      return false;
    const dailyCounts = await this.db.getDailyReviewCounts(deckId);
    return dailyCounts.reviewCount < deck.config.reviewCardsPerDay;
  }
  updateFSRSForDeck(deck) {
    this.fsrs.updateParameters({
      requestRetention: deck.config.fsrs.requestRetention,
      profile: deck.config.fsrs.profile
    });
  }
  getElapsedDays(card, now) {
    if (!card.lastReviewed)
      return 0;
    const lastReview = new Date(card.lastReviewed);
    return Math.max(0, (now.getTime() - lastReview.getTime()) / 864e5);
  }
  calculateRetrievability(card, elapsedDays) {
    if (!card.stability || card.state === "new")
      return 1;
    return Math.pow(1 + elapsedDays / (9 * card.stability), -1);
  }
  ratingToNumber(rating) {
    const ratingMap = {
      again: 1,
      hard: 2,
      good: 3,
      easy: 4
    };
    return ratingMap[rating];
  }
  getWeightsHash(profile) {
    return `${profile}-v1.0`;
  }
  async getDueCardCount(now, deckId) {
    const fifteenMinutesLater = new Date(now.getTime() + 15 * 60 * 1e3);
    const query = `
    SELECT COUNT(*) as count
    FROM flashcards
    WHERE deck_id = ? AND due_date <= ? AND state = 'review'
  `;
    const results = await this.queryRaw(query, [
      deckId,
      fifteenMinutesLater.toISOString()
    ]);
    return results.length > 0 ? results[0][0] : 0;
  }
  async getNewCardCount(deckId) {
    const query = `
    SELECT COUNT(*) as count
    FROM flashcards
    WHERE deck_id = ? AND state = 'new'
  `;
    const results = await this.queryRaw(query, [deckId]);
    return results.length > 0 ? results[0][0] : 0;
  }
  /**
   * Helper method to query flashcards and convert rows to Flashcard objects
   */
  async queryFlashcards(query, params) {
    const results = await this.queryRaw(query, params);
    return results.map((row) => this.rowToFlashcard(row));
  }
  /**
   * Execute raw SQL query and return results
   */
  async queryRaw(query, params) {
    return await this.db.query(query, params);
  }
  /**
   * Convert database row to Flashcard object (same logic as DatabaseService)
   */
  rowToFlashcard(row) {
    return {
      id: row[0],
      deckId: row[1],
      front: row[2],
      back: row[3],
      type: row[4],
      sourceFile: row[5],
      contentHash: row[6],
      state: row[7],
      dueDate: row[8],
      interval: row[9],
      repetitions: row[10],
      difficulty: row[11],
      stability: row[12],
      lapses: row[13],
      lastReviewed: row[14],
      created: row[15],
      modified: row[16]
    };
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  review: {
    showProgress: true,
    enableKeyboardShortcuts: true
  },
  parsing: {
    // Default parsing settings
  },
  ui: {
    enableBackgroundRefresh: true,
    backgroundRefreshInterval: 5,
    enableNotices: true
  },
  debug: {
    enableLogging: false,
    performanceLogs: false
  }
};

// src/components/SettingsTab.ts
var import_obsidian2 = require("obsidian");
var DecksSettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin, settings, saveSettings, performSync, refreshViewStats, restartBackgroundRefresh, startBackgroundRefresh, stopBackgroundRefresh, purgeDatabase) {
    super(app, plugin);
    this.settings = settings;
    this.saveSettings = saveSettings;
    this.performSync = performSync;
    this.refreshViewStats = refreshViewStats;
    this.restartBackgroundRefresh = restartBackgroundRefresh;
    this.startBackgroundRefresh = startBackgroundRefresh;
    this.stopBackgroundRefresh = stopBackgroundRefresh;
    this.purgeDatabase = purgeDatabase;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Decks Plugin Settings" });
    this.addReviewSettings(containerEl);
    this.addParsingSettings(containerEl);
    this.addUISettings(containerEl);
    this.addDebugSettings(containerEl);
    this.addDatabaseSettings(containerEl);
  }
  addReviewSettings(containerEl) {
    containerEl.createEl("h3", { text: "Review Sessions" });
    new import_obsidian2.Setting(containerEl).setName("Show Progress").setDesc("Display progress bar during review sessions").addToggle(
      (toggle) => toggle.setValue(this.settings.review.showProgress).onChange(async (value) => {
        this.settings.review.showProgress = value;
        await this.saveSettings();
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Keyboard Shortcuts").setDesc("Enable keyboard shortcuts in review modal (1-4 for difficulty)").addToggle(
      (toggle) => toggle.setValue(this.settings.review.enableKeyboardShortcuts).onChange(async (value) => {
        this.settings.review.enableKeyboardShortcuts = value;
        await this.saveSettings();
      })
    );
  }
  addParsingSettings(containerEl) {
    containerEl.createEl("h3", { text: "Parsing" });
    const parseSettingsDesc = containerEl.createDiv();
    parseSettingsDesc.innerHTML = `
      <p style="color: var(--text-muted); font-size: 0.9em; margin: 10px 0;">
        Header level settings have been moved to individual deck configurations.
        Configure header levels per deck in the deck settings.
      </p>
    `;
  }
  addUISettings(containerEl) {
    containerEl.createEl("h3", { text: "User Interface" });
    const intervalSetting = new import_obsidian2.Setting(containerEl).setName("Background Refresh Interval").setDesc("How often to refresh deck stats in the side panel (in seconds)").addText(
      (text2) => text2.setPlaceholder("5").setValue(this.settings.ui.backgroundRefreshInterval.toString()).onChange(async (value) => {
        const num = parseInt(value);
        if (!isNaN(num) && num >= 1 && num <= 60) {
          this.settings.ui.backgroundRefreshInterval = num;
          await this.saveSettings();
          this.restartBackgroundRefresh();
        }
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Enable Background Refresh").setDesc("Automatically refresh deck stats in the side panel").addToggle(
      (toggle) => toggle.setValue(this.settings.ui.enableBackgroundRefresh).onChange(async (value) => {
        this.settings.ui.enableBackgroundRefresh = value;
        await this.saveSettings();
        intervalSetting.setDisabled(!value);
        if (value) {
          this.startBackgroundRefresh();
        } else {
          this.stopBackgroundRefresh();
        }
      })
    );
    new import_obsidian2.Setting(containerEl).setName("Enable Notices").setDesc(
      "Show notification messages for completed review sessions and sync operations"
    ).addToggle(
      (toggle) => toggle.setValue(this.settings.ui.enableNotices).onChange(async (value) => {
        this.settings.ui.enableNotices = value;
        await this.saveSettings();
      })
    );
    intervalSetting.setDisabled(!this.settings.ui.enableBackgroundRefresh);
  }
  addDebugSettings(containerEl) {
    containerEl.createEl("h3", { text: "Debug" });
    containerEl.createEl("p", {
      text: "Debug settings for troubleshooting and development.",
      cls: "setting-item-description"
    });
    new import_obsidian2.Setting(containerEl).setName("Enable Debug Logging").setDesc(
      "Show detailed logging in the console for sync operations and flashcard processing"
    ).addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue(((_a = this.settings.debug) == null ? void 0 : _a.enableLogging) || false).onChange(async (value) => {
          if (!this.settings.debug) {
            this.settings.debug = {
              enableLogging: false,
              performanceLogs: false
            };
          }
          this.settings.debug.enableLogging = value;
          await this.saveSettings();
        });
      }
    );
    new import_obsidian2.Setting(containerEl).setName("Enable Performance Logs").setDesc(
      "Show performance timing metrics in the console (sync times, parsing performance, etc.)"
    ).addToggle(
      (toggle) => {
        var _a;
        return toggle.setValue(((_a = this.settings.debug) == null ? void 0 : _a.performanceLogs) || false).onChange(async (value) => {
          if (!this.settings.debug) {
            this.settings.debug = {
              enableLogging: false,
              performanceLogs: false
            };
          }
          this.settings.debug.performanceLogs = value;
          await this.saveSettings();
        });
      }
    );
  }
  addDatabaseSettings(containerEl) {
    containerEl.createEl("h3", { text: "Database Management" });
    containerEl.createEl("p", {
      text: "Manage your flashcard database. Use with caution - these actions cannot be undone.",
      cls: "setting-item-description"
    });
    new import_obsidian2.Setting(containerEl).setName("Purge Database").setDesc(
      "\u26A0\uFE0F Permanently delete all flashcards, review history, and deck data. This will force a clean rebuild from your vault files. All progress will be lost!"
    ).addButton(
      (button) => button.setButtonText("Purge Database").setWarning().onClick(() => {
        new DatabasePurgeModal(
          this.app,
          this.purgeDatabase,
          this.performSync,
          this.refreshViewStats
        ).open();
      })
    );
  }
};
var DatabasePurgeModal = class extends import_obsidian2.Modal {
  constructor(app, purgeDatabase, performSync, refreshViewStats) {
    super(app);
    this.purgeDatabase = purgeDatabase;
    this.performSync = performSync;
    this.refreshViewStats = refreshViewStats;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.createEl("h2", { text: "\u26A0\uFE0F Purge Database" });
    const warning = contentEl.createEl("div", {
      cls: "setting-item-description"
    });
    warning.innerHTML = `
      <p><strong>This will permanently delete ALL flashcard data including:</strong></p>
      <ul>
        <li>All flashcards and their content</li>
        <li>Complete review history and progress</li>
        <li>All deck information</li>
        <li>Statistical data</li>
      </ul>
      <p><strong>This action cannot be undone!</strong></p>
      <p>The database will be rebuilt from your current vault files, but all progress will be lost.</p>
    `;
    contentEl.createEl("p", {
      text: 'Type "DELETE ALL DATA" to confirm:',
      cls: "setting-item-description"
    });
    const input = contentEl.createEl("input", {
      type: "text",
      placeholder: "DELETE ALL DATA"
    });
    input.style.width = "100%";
    input.style.marginBottom = "1rem";
    const buttonContainer = contentEl.createEl("div");
    buttonContainer.style.display = "flex";
    buttonContainer.style.gap = "0.5rem";
    buttonContainer.style.justifyContent = "flex-end";
    const cancelButton = buttonContainer.createEl("button", { text: "Cancel" });
    cancelButton.onclick = () => this.close();
    const confirmButton = buttonContainer.createEl("button", {
      text: "Purge Database",
      cls: "mod-warning"
    });
    confirmButton.onclick = async () => {
      if (input.value === "DELETE ALL DATA") {
        try {
          this.close();
          const notice = new import_obsidian2.Notice("Purging database...", 0);
          await this.purgeDatabase();
          await this.performSync(true);
          notice.setMessage("\u2705 Database purged and rebuilt successfully");
          setTimeout(() => notice.hide(), 3e3);
          await this.refreshViewStats();
        } catch (error) {
          console.error("Failed to purge database:", error);
          new import_obsidian2.Notice(
            "\u274C Failed to purge database. Check console for details.",
            5e3
          );
        }
      } else {
        new import_obsidian2.Notice(
          "Confirmation text doesn't match. Database purge cancelled.",
          3e3
        );
      }
    };
    input.focus();
    input.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        confirmButton.click();
      }
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// node_modules/svelte/internal/index.mjs
function noop() {
}
function add_location(element2, file7, line, column, char) {
  element2.__svelte_meta = {
    loc: { file: file7, line, column, char }
  };
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
var src_url_equal_anchor;
function src_url_equal(element_src, url) {
  if (!src_url_equal_anchor) {
    src_url_equal_anchor = document.createElement("a");
  }
  src_url_equal_anchor.href = url;
  return element_src === src_url_equal_anchor.href;
}
function is_empty(obj) {
  return Object.keys(obj).length === 0;
}
function action_destroyer(action_result) {
  return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;
}
var globals = typeof window !== "undefined" ? window : typeof globalThis !== "undefined" ? globalThis : global;
var ResizeObserverSingleton = class _ResizeObserverSingleton {
  constructor(options) {
    this.options = options;
    this._listeners = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;
  }
  observe(element2, listener) {
    this._listeners.set(element2, listener);
    this._getObserver().observe(element2, this.options);
    return () => {
      this._listeners.delete(element2);
      this._observer.unobserve(element2);
    };
  }
  _getObserver() {
    var _a;
    return (_a = this._observer) !== null && _a !== void 0 ? _a : this._observer = new ResizeObserver((entries) => {
      var _a2;
      for (const entry of entries) {
        _ResizeObserverSingleton.entries.set(entry.target, entry);
        (_a2 = this._listeners.get(entry.target)) === null || _a2 === void 0 ? void 0 : _a2(entry);
      }
    });
  }
};
ResizeObserverSingleton.entries = "WeakMap" in globals ? /* @__PURE__ */ new WeakMap() : void 0;
var is_hydrating = false;
function start_hydrating() {
  is_hydrating = true;
}
function end_hydrating() {
  is_hydrating = false;
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  if (node.parentNode) {
    node.parentNode.removeChild(node);
  }
}
function destroy_each(iterations, detaching) {
  for (let i = 0; i < iterations.length; i += 1) {
    if (iterations[i])
      iterations[i].d(detaching);
  }
}
function element(name) {
  return document.createElement(name);
}
function svg_element(name) {
  return document.createElementNS("http://www.w3.org/2000/svg", name);
}
function text(data) {
  return document.createTextNode(data);
}
function space() {
  return text(" ");
}
function empty() {
  return text("");
}
function listen(node, event, handler, options) {
  node.addEventListener(event, handler, options);
  return () => node.removeEventListener(event, handler, options);
}
function prevent_default(fn) {
  return function(event) {
    event.preventDefault();
    return fn.call(this, event);
  };
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_input_value(input, value) {
  input.value = value == null ? "" : value;
}
function set_style(node, key, value, important) {
  if (value == null) {
    node.style.removeProperty(key);
  } else {
    node.style.setProperty(key, value, important ? "important" : "");
  }
}
function toggle_class(element2, name, toggle) {
  element2.classList[toggle ? "add" : "remove"](name);
}
function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
  const e = document.createEvent("CustomEvent");
  e.initCustomEvent(type, bubbles, cancelable, detail);
  return e;
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
function get_current_component() {
  if (!current_component)
    throw new Error("Function called outside component initialization");
  return current_component;
}
function onMount(fn) {
  get_current_component().$$.on_mount.push(fn);
}
function onDestroy(fn) {
  get_current_component().$$.on_destroy.push(fn);
}
function createEventDispatcher() {
  const component = get_current_component();
  return (type, detail, { cancelable = false } = {}) => {
    const callbacks = component.$$.callbacks[type];
    if (callbacks) {
      const event = custom_event(type, detail, { cancelable });
      callbacks.slice().forEach((fn) => {
        fn.call(component, event);
      });
      return !event.defaultPrevented;
    }
    return true;
  };
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = /* @__PURE__ */ Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function tick() {
  schedule_update();
  return resolved_promise;
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var seen_callbacks = /* @__PURE__ */ new Set();
var flushidx = 0;
function flush() {
  if (flushidx !== 0) {
    return;
  }
  const saved_component = current_component;
  do {
    try {
      while (flushidx < dirty_components.length) {
        const component = dirty_components[flushidx];
        flushidx++;
        set_current_component(component);
        update(component.$$);
      }
    } catch (e) {
      dirty_components.length = 0;
      flushidx = 0;
      throw e;
    }
    set_current_component(null);
    dirty_components.length = 0;
    flushidx = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  seen_callbacks.clear();
  set_current_component(saved_component);
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
function flush_render_callbacks(fns) {
  const filtered = [];
  const targets = [];
  render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
  targets.forEach((c) => c());
  render_callbacks = filtered;
}
var outroing = /* @__PURE__ */ new Set();
var outros;
function group_outros() {
  outros = {
    r: 0,
    c: [],
    p: outros
    // parent group
  };
}
function check_outros() {
  if (!outros.r) {
    run_all(outros.c);
  }
  outros = outros.p;
}
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function transition_out(block, local, detach2, callback) {
  if (block && block.o) {
    if (outroing.has(block))
      return;
    outroing.add(block);
    outros.c.push(() => {
      outroing.delete(block);
      if (callback) {
        if (detach2)
          block.d(1);
        callback();
      }
    });
    block.o(local);
  } else if (callback) {
    callback();
  }
}
var _boolean_attributes = [
  "allowfullscreen",
  "allowpaymentrequest",
  "async",
  "autofocus",
  "autoplay",
  "checked",
  "controls",
  "default",
  "defer",
  "disabled",
  "formnovalidate",
  "hidden",
  "inert",
  "ismap",
  "loop",
  "multiple",
  "muted",
  "nomodule",
  "novalidate",
  "open",
  "playsinline",
  "readonly",
  "required",
  "reversed",
  "selected"
];
var boolean_attributes = /* @__PURE__ */ new Set([..._boolean_attributes]);
function create_component(block) {
  block && block.c();
}
function mount_component(component, target, anchor, customElement) {
  const { fragment, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  if (!customElement) {
    add_render_callback(() => {
      const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
      if (component.$$.on_destroy) {
        component.$$.on_destroy.push(...new_on_destroy);
      } else {
        run_all(new_on_destroy);
      }
      component.$$.on_mount = [];
    });
  }
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    flush_render_callbacks($$.after_update);
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance7, create_fragment7, not_equal, props, append_styles, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const $$ = component.$$ = {
    fragment: null,
    ctx: [],
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    on_disconnect: [],
    before_update: [],
    after_update: [],
    context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
    // everything else
    callbacks: blank_object(),
    dirty,
    skip_bound: false,
    root: options.target || parent_component.$$.root
  };
  append_styles && append_styles($$.root);
  let ready = false;
  $$.ctx = instance7 ? instance7(component, options.props || {}, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if (!$$.skip_bound && $$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment7 ? create_fragment7($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      start_hydrating();
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor, options.customElement);
    end_hydrating();
    flush();
  }
  set_current_component(parent_component);
}
var SvelteElement;
if (typeof HTMLElement === "function") {
  SvelteElement = class extends HTMLElement {
    constructor() {
      super();
      this.attachShadow({ mode: "open" });
    }
    connectedCallback() {
      const { on_mount } = this.$$;
      this.$$.on_disconnect = on_mount.map(run).filter(is_function);
      for (const key in this.$$.slotted) {
        this.appendChild(this.$$.slotted[key]);
      }
    }
    attributeChangedCallback(attr2, _oldValue, newValue) {
      this[attr2] = newValue;
    }
    disconnectedCallback() {
      run_all(this.$$.on_disconnect);
    }
    $destroy() {
      destroy_component(this, 1);
      this.$destroy = noop;
    }
    $on(type, callback) {
      if (!is_function(callback)) {
        return noop;
      }
      const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
      callbacks.push(callback);
      return () => {
        const index = callbacks.indexOf(callback);
        if (index !== -1)
          callbacks.splice(index, 1);
      };
    }
    $set($$props) {
      if (this.$$set && !is_empty($$props)) {
        this.$$.skip_bound = true;
        this.$$set($$props);
        this.$$.skip_bound = false;
      }
    }
  };
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    if (!is_function(callback)) {
      return noop;
    }
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set($$props) {
    if (this.$$set && !is_empty($$props)) {
      this.$$.skip_bound = true;
      this.$$set($$props);
      this.$$.skip_bound = false;
    }
  }
};
function dispatch_dev(type, detail) {
  document.dispatchEvent(custom_event(type, Object.assign({ version: "3.59.2" }, detail), { bubbles: true }));
}
function append_dev(target, node) {
  dispatch_dev("SvelteDOMInsert", { target, node });
  append(target, node);
}
function insert_dev(target, node, anchor) {
  dispatch_dev("SvelteDOMInsert", { target, node, anchor });
  insert(target, node, anchor);
}
function detach_dev(node) {
  dispatch_dev("SvelteDOMRemove", { node });
  detach(node);
}
function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
  const modifiers = options === true ? ["capture"] : options ? Array.from(Object.keys(options)) : [];
  if (has_prevent_default)
    modifiers.push("preventDefault");
  if (has_stop_propagation)
    modifiers.push("stopPropagation");
  if (has_stop_immediate_propagation)
    modifiers.push("stopImmediatePropagation");
  dispatch_dev("SvelteDOMAddEventListener", { node, event, handler, modifiers });
  const dispose = listen(node, event, handler, options);
  return () => {
    dispatch_dev("SvelteDOMRemoveEventListener", { node, event, handler, modifiers });
    dispose();
  };
}
function attr_dev(node, attribute, value) {
  attr(node, attribute, value);
  if (value == null)
    dispatch_dev("SvelteDOMRemoveAttribute", { node, attribute });
  else
    dispatch_dev("SvelteDOMSetAttribute", { node, attribute, value });
}
function prop_dev(node, property, value) {
  node[property] = value;
  dispatch_dev("SvelteDOMSetProperty", { node, property, value });
}
function set_data_dev(text2, data) {
  data = "" + data;
  if (text2.data === data)
    return;
  dispatch_dev("SvelteDOMSetData", { node: text2, data });
  text2.data = data;
}
function validate_each_argument(arg) {
  if (typeof arg !== "string" && !(arg && typeof arg === "object" && "length" in arg)) {
    let msg = "{#each} only iterates over array-like objects.";
    if (typeof Symbol === "function" && arg && Symbol.iterator in arg) {
      msg += " You can use a spread to convert this iterable into an array.";
    }
    throw new Error(msg);
  }
}
function validate_slots(name, slot, keys) {
  for (const slot_key of Object.keys(slot)) {
    if (!~keys.indexOf(slot_key)) {
      console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
    }
  }
}
var SvelteComponentDev = class extends SvelteComponent {
  constructor(options) {
    if (!options || !options.target && !options.$$inline) {
      throw new Error("'target' is a required option");
    }
    super();
  }
  $destroy() {
    super.$destroy();
    this.$destroy = () => {
      console.warn("Component was already destroyed");
    };
  }
  $capture_state() {
  }
  $inject_state() {
  }
};

// node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}

// src/components/ReviewHeatmap.svelte
var { console: console_1 } = globals;
var file = "src/components/ReviewHeatmap.svelte";
function get_each_context(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[25] = list[i].month;
  child_ctx[26] = list[i].weeks;
  return child_ctx;
}
function get_each_context_1(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[29] = list[i];
  return child_ctx;
}
function get_each_context_2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[32] = list[i];
  const constants_0 = new Date(
    /*day*/
    child_ctx[32].date
  ).getFullYear();
  child_ctx[33] = constants_0;
  return child_ctx;
}
function create_if_block_1(ctx) {
  let span;
  let t0_value = Array.from(
    /*reviewCounts*/
    ctx[0].values()
  ).reduce(func, 0) + "";
  let t0;
  let t1;
  const block = {
    c: function create() {
      span = element("span");
      t0 = text(t0_value);
      t1 = text(" reviews");
      attr_dev(span, "class", "total-reviews svelte-10u86w0");
      add_location(span, file, 213, 16, 6558);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span, anchor);
      append_dev(span, t0);
      append_dev(span, t1);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*reviewCounts*/
      1 && t0_value !== (t0_value = Array.from(
        /*reviewCounts*/
        ctx2[0].values()
      ).reduce(func, 0) + ""))
        set_data_dev(t0, t0_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(span);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_1.name,
    type: "if",
    source: "(213:12) {#if !isLoading}",
    ctx
  });
  return block;
}
function create_else_block(ctx) {
  let div1;
  let div0;
  let t0;
  let div8;
  let span0;
  let t2;
  let div7;
  let div2;
  let t3;
  let div3;
  let t4;
  let div4;
  let t5;
  let div5;
  let t6;
  let div6;
  let t7;
  let span1;
  let each_value = (
    /*getMonthsData*/
    ctx[5]()
  );
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      div8 = element("div");
      span0 = element("span");
      span0.textContent = "Less";
      t2 = space();
      div7 = element("div");
      div2 = element("div");
      t3 = space();
      div3 = element("div");
      t4 = space();
      div4 = element("div");
      t5 = space();
      div5 = element("div");
      t6 = space();
      div6 = element("div");
      t7 = space();
      span1 = element("span");
      span1.textContent = "More";
      attr_dev(div0, "class", "months-container svelte-10u86w0");
      add_location(div0, file, 262, 12, 8228);
      attr_dev(div1, "class", "heatmap svelte-10u86w0");
      add_location(div1, file, 261, 8, 8194);
      attr_dev(span0, "class", "legend-label svelte-10u86w0");
      add_location(span0, file, 294, 12, 9792);
      attr_dev(div2, "class", "legend-square intensity-0 svelte-10u86w0");
      add_location(div2, file, 296, 16, 9887);
      attr_dev(div3, "class", "legend-square intensity-1 svelte-10u86w0");
      add_location(div3, file, 297, 16, 9949);
      attr_dev(div4, "class", "legend-square intensity-2 svelte-10u86w0");
      add_location(div4, file, 298, 16, 10011);
      attr_dev(div5, "class", "legend-square intensity-3 svelte-10u86w0");
      add_location(div5, file, 299, 16, 10073);
      attr_dev(div6, "class", "legend-square intensity-4 svelte-10u86w0");
      add_location(div6, file, 300, 16, 10135);
      attr_dev(div7, "class", "legend-colors svelte-10u86w0");
      add_location(div7, file, 295, 12, 9843);
      attr_dev(span1, "class", "legend-label svelte-10u86w0");
      add_location(span1, file, 302, 12, 10212);
      attr_dev(div8, "class", "legend svelte-10u86w0");
      add_location(div8, file, 293, 8, 9759);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div1, anchor);
      append_dev(div1, div0);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div0, null);
        }
      }
      insert_dev(target, t0, anchor);
      insert_dev(target, div8, anchor);
      append_dev(div8, span0);
      append_dev(div8, t2);
      append_dev(div8, div7);
      append_dev(div7, div2);
      append_dev(div7, t3);
      append_dev(div7, div3);
      append_dev(div7, t4);
      append_dev(div7, div4);
      append_dev(div7, t5);
      append_dev(div7, div5);
      append_dev(div7, t6);
      append_dev(div7, div6);
      append_dev(div8, t7);
      append_dev(div8, span1);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*getMonthsData, getIntensityClass, currentYear*/
      56) {
        each_value = /*getMonthsData*/
        ctx2[5]();
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div0, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach_dev(t0);
      if (detaching)
        detach_dev(div8);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block.name,
    type: "else",
    source: "(261:4) {:else}",
    ctx
  });
  return block;
}
function create_if_block(ctx) {
  let div;
  const block = {
    c: function create() {
      div = element("div");
      div.textContent = "Loading...";
      attr_dev(div, "class", "loading svelte-10u86w0");
      add_location(div, file, 259, 8, 8136);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block.name,
    type: "if",
    source: "(259:4) {#if isLoading}",
    ctx
  });
  return block;
}
function create_each_block_2(ctx) {
  let div;
  let div_class_value;
  let div_title_value;
  const block = {
    c: function create() {
      div = element("div");
      attr_dev(div, "class", div_class_value = "day " + /*getIntensityClass*/
      ctx[4](
        /*day*/
        ctx[32].count
      ) + " svelte-10u86w0");
      attr_dev(div, "title", div_title_value = /*day*/
      ctx[32].count + " reviews on " + formatDate(
        /*day*/
        ctx[32].date
      ));
      toggle_class(div, "today", isToday(
        /*day*/
        ctx[32].date
      ));
      toggle_class(
        div,
        "outside-year",
        /*dayYear*/
        ctx[33] !== /*currentYear*/
        ctx[3]
      );
      add_location(div, file, 273, 40, 8874);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*getMonthsData, currentYear*/
      40) {
        toggle_class(
          div,
          "outside-year",
          /*dayYear*/
          ctx2[33] !== /*currentYear*/
          ctx2[3]
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_2.name,
    type: "each",
    source: "(270:36) {#each week as day}",
    ctx
  });
  return block;
}
function create_each_block_1(ctx) {
  let div;
  let t;
  let each_value_2 = (
    /*week*/
    ctx[29]
  );
  validate_each_argument(each_value_2);
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_2(get_each_context_2(ctx, each_value_2, i));
  }
  const block = {
    c: function create() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t = space();
      attr_dev(div, "class", "week svelte-10u86w0");
      add_location(div, file, 268, 32, 8580);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      append_dev(div, t);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*getIntensityClass, getMonthsData, currentYear*/
      56) {
        each_value_2 = /*week*/
        ctx2[29];
        validate_each_argument(each_value_2);
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_2(ctx2, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, t);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_2.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_1.name,
    type: "each",
    source: "(268:28) {#each monthWeeks as week}",
    ctx
  });
  return block;
}
function create_each_block(ctx) {
  let div2;
  let div0;
  let t0_value = (
    /*month*/
    ctx[25] + ""
  );
  let t0;
  let t1;
  let div1;
  let t2;
  let each_value_1 = (
    /*monthWeeks*/
    ctx[26]
  );
  validate_each_argument(each_value_1);
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
  }
  const block = {
    c: function create() {
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t2 = space();
      attr_dev(div0, "class", "month-label svelte-10u86w0");
      add_location(div0, file, 265, 24, 8405);
      attr_dev(div1, "class", "month-grid svelte-10u86w0");
      add_location(div1, file, 266, 24, 8468);
      attr_dev(div2, "class", "month-container svelte-10u86w0");
      add_location(div2, file, 264, 20, 8351);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div2, anchor);
      append_dev(div2, div0);
      append_dev(div0, t0);
      append_dev(div2, t1);
      append_dev(div2, div1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
      append_dev(div2, t2);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*getMonthsData, getIntensityClass, currentYear*/
      56) {
        each_value_1 = /*monthWeeks*/
        ctx2[26];
        validate_each_argument(each_value_1);
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_1(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_1(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div2);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block.name,
    type: "each",
    source: "(264:16) {#each getMonthsData() as { month, weeks: monthWeeks }}",
    ctx
  });
  return block;
}
function create_fragment(ctx) {
  let div3;
  let div2;
  let div0;
  let h4;
  let t1;
  let t2;
  let div1;
  let button0;
  let svg0;
  let path0;
  let t3;
  let span;
  let t4;
  let t5;
  let button1;
  let svg1;
  let path1;
  let t6;
  let mounted;
  let dispose;
  let if_block0 = !/*isLoading*/
  ctx[1] && create_if_block_1(ctx);
  function select_block_type(ctx2, dirty) {
    if (
      /*isLoading*/
      ctx2[1]
    )
      return create_if_block;
    return create_else_block;
  }
  let current_block_type = select_block_type(ctx, [-1, -1]);
  let if_block1 = current_block_type(ctx);
  const block = {
    c: function create() {
      div3 = element("div");
      div2 = element("div");
      div0 = element("div");
      h4 = element("h4");
      h4.textContent = "Review Activity";
      t1 = space();
      if (if_block0)
        if_block0.c();
      t2 = space();
      div1 = element("div");
      button0 = element("button");
      svg0 = svg_element("svg");
      path0 = svg_element("path");
      t3 = space();
      span = element("span");
      t4 = text(
        /*currentYear*/
        ctx[3]
      );
      t5 = space();
      button1 = element("button");
      svg1 = svg_element("svg");
      path1 = svg_element("path");
      t6 = space();
      if_block1.c();
      attr_dev(h4, "class", "svelte-10u86w0");
      add_location(h4, file, 211, 12, 6488);
      attr_dev(div0, "class", "header-left svelte-10u86w0");
      add_location(div0, file, 210, 8, 6450);
      attr_dev(path0, "d", "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z");
      add_location(path0, file, 235, 20, 7334);
      attr_dev(svg0, "width", "12");
      attr_dev(svg0, "height", "12");
      attr_dev(svg0, "viewBox", "0 0 24 24");
      attr_dev(svg0, "fill", "currentColor");
      attr_dev(svg0, "class", "svelte-10u86w0");
      add_location(svg0, file, 229, 16, 7148);
      attr_dev(button0, "class", "nav-button svelte-10u86w0");
      add_location(button0, file, 222, 12, 6868);
      attr_dev(span, "class", "current-year svelte-10u86w0");
      add_location(span, file, 238, 12, 7450);
      attr_dev(path1, "d", "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z");
      add_location(path1, file, 252, 20, 7976);
      attr_dev(svg1, "width", "12");
      attr_dev(svg1, "height", "12");
      attr_dev(svg1, "viewBox", "0 0 24 24");
      attr_dev(svg1, "fill", "currentColor");
      attr_dev(svg1, "class", "svelte-10u86w0");
      add_location(svg1, file, 246, 16, 7790);
      attr_dev(button1, "class", "nav-button svelte-10u86w0");
      add_location(button1, file, 239, 12, 7510);
      attr_dev(div1, "class", "year-navigation svelte-10u86w0");
      add_location(div1, file, 221, 8, 6826);
      attr_dev(div2, "class", "heatmap-header svelte-10u86w0");
      add_location(div2, file, 209, 4, 6413);
      attr_dev(div3, "class", "heatmap-container svelte-10u86w0");
      add_location(div3, file, 208, 0, 6348);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div3, anchor);
      append_dev(div3, div2);
      append_dev(div2, div0);
      append_dev(div0, h4);
      append_dev(div0, t1);
      if (if_block0)
        if_block0.m(div0, null);
      append_dev(div2, t2);
      append_dev(div2, div1);
      append_dev(div1, button0);
      append_dev(button0, svg0);
      append_dev(svg0, path0);
      append_dev(div1, t3);
      append_dev(div1, span);
      append_dev(span, t4);
      append_dev(div1, t5);
      append_dev(div1, button1);
      append_dev(button1, svg1);
      append_dev(svg1, path1);
      append_dev(div3, t6);
      if_block1.m(div3, null);
      ctx[16](div3);
      if (!mounted) {
        dispose = [
          listen_dev(
            button0,
            "click",
            /*click_handler*/
            ctx[12],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button0,
            "touchend",
            /*touchend_handler*/
            ctx[13],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button1,
            "click",
            /*click_handler_1*/
            ctx[14],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button1,
            "touchend",
            /*touchend_handler_1*/
            ctx[15],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update2(ctx2, dirty) {
      if (!/*isLoading*/
      ctx2[1]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_1(ctx2);
          if_block0.c();
          if_block0.m(div0, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty[0] & /*currentYear*/
      8)
        set_data_dev(
          t4,
          /*currentYear*/
          ctx2[3]
        );
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div3, null);
        }
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div3);
      if (if_block0)
        if_block0.d();
      if_block1.d();
      ctx[16](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function formatDate(dateStr) {
  const date = new Date(dateStr);
  return date.toLocaleDateString("en-US", {
    weekday: "long",
    year: "numeric",
    month: "long",
    day: "numeric"
  });
}
function isToday(dateStr) {
  const today = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
  return dateStr === today;
}
function calculateMaxWeeks(width) {
  if (width === 0)
    return 20;
  const availableWidth = width - 50;
  const weekWidth = 12;
  const calculatedWeeks = Math.floor(availableWidth / weekWidth);
  return Math.min(Math.max(calculatedWeeks, 8), 52);
}
var func = (sum, count) => sum + count;
function instance($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("ReviewHeatmap", slots, []);
  let { getReviewCounts } = $$props;
  let reviewCounts = /* @__PURE__ */ new Map();
  let days = [];
  let weeks = [];
  let maxCount = 0;
  let isLoading = true;
  let containerElement;
  let maxWeeks = 52;
  let containerWidth = 0;
  let currentYear = (/* @__PURE__ */ new Date()).getFullYear();
  let lastEventTime = 0;
  let lastEventType = "";
  const months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ];
  function generateDays() {
    const yearStart = new Date(currentYear, 0, 1);
    const yearEnd = new Date(currentYear, 11, 31);
    const startDate = new Date(yearStart);
    const startDayOfWeek = startDate.getDay();
    startDate.setDate(startDate.getDate() - startDayOfWeek);
    const endDate = new Date(yearEnd);
    const endDayOfWeek = endDate.getDay();
    endDate.setDate(endDate.getDate() + (6 - endDayOfWeek));
    const daysArray = [];
    const current = new Date(startDate);
    while (current <= endDate) {
      const dateStr = current.toISOString().split("T")[0];
      const currentDateYear = current.getFullYear();
      if (currentDateYear === currentYear) {
        const count = reviewCounts.get(dateStr) || 0;
        daysArray.push({
          date: dateStr,
          count,
          dayOfWeek: current.getDay()
        });
        if (count > maxCount) {
          maxCount = count;
        }
      } else {
        daysArray.push({
          date: dateStr,
          count: 0,
          dayOfWeek: current.getDay()
        });
      }
      current.setDate(current.getDate() + 1);
    }
    days = daysArray;
    weeks = [];
    for (let i = 0; i < days.length; i += 7) {
      weeks.push(days.slice(i, i + 7));
    }
  }
  function getIntensityClass(count) {
    if (count === 0)
      return "intensity-0";
    const intensity = Math.min(Math.ceil(count / maxCount * 4), 4);
    return `intensity-${intensity}`;
  }
  function getMonthsData() {
    if (weeks.length === 0)
      return [];
    const monthsData = [];
    let currentMonth = -1;
    let currentMonthWeeks = [];
    weeks.forEach((week) => {
      const firstDay = week[0];
      if (firstDay) {
        const date = new Date(firstDay.date);
        const month = date.getMonth();
        const year = date.getFullYear();
        if (year === currentYear) {
          if (month !== currentMonth) {
            if (currentMonth !== -1 && currentMonthWeeks.length > 0) {
              monthsData.push({
                month: months[currentMonth],
                weeks: currentMonthWeeks
              });
            }
            currentMonth = month;
            currentMonthWeeks = [week];
          } else {
            currentMonthWeeks.push(week);
          }
        }
      }
    });
    if (currentMonth !== -1 && currentMonthWeeks.length > 0) {
      monthsData.push({
        month: months[currentMonth],
        weeks: currentMonthWeeks
      });
    }
    return monthsData;
  }
  function updateContainerWidth() {
    if (containerElement) {
      $$invalidate(11, containerWidth = containerElement.clientWidth);
    }
  }
  function navigateYear(direction) {
    if (direction === "prev") {
      $$invalidate(3, currentYear--, currentYear);
    } else {
      $$invalidate(3, currentYear++, currentYear);
    }
    generateDays();
    refresh();
  }
  function handleTouchClick(callback, event) {
    const now = Date.now();
    const eventType = event.type;
    if (now - lastEventTime < 100 && lastEventType !== eventType) {
      return;
    }
    lastEventTime = now;
    lastEventType = eventType;
    callback();
  }
  function refresh() {
    return __awaiter(this, void 0, void 0, function* () {
      $$invalidate(1, isLoading = true);
      try {
        $$invalidate(0, reviewCounts = yield getReviewCounts(366));
        maxCount = 0;
        generateDays();
      } catch (error) {
        console.error("Failed to load review counts:", error);
      } finally {
        $$invalidate(1, isLoading = false);
      }
    });
  }
  onMount(() => {
    setTimeout(
      () => {
        updateContainerWidth();
        refresh();
      },
      100
    );
  });
  $$self.$$.on_mount.push(function() {
    if (getReviewCounts === void 0 && !("getReviewCounts" in $$props || $$self.$$.bound[$$self.$$.props["getReviewCounts"]])) {
      console_1.warn("<ReviewHeatmap> was created without expected prop 'getReviewCounts'");
    }
  });
  const writable_props = ["getReviewCounts"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_1.warn(`<ReviewHeatmap> was created with unknown prop '${key}'`);
  });
  const click_handler = (e) => handleTouchClick(() => navigateYear("prev"), e);
  const touchend_handler = (e) => handleTouchClick(() => navigateYear("prev"), e);
  const click_handler_1 = (e) => handleTouchClick(() => navigateYear("next"), e);
  const touchend_handler_1 = (e) => handleTouchClick(() => navigateYear("next"), e);
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      containerElement = $$value;
      $$invalidate(2, containerElement);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("getReviewCounts" in $$props2)
      $$invalidate(8, getReviewCounts = $$props2.getReviewCounts);
  };
  $$self.$capture_state = () => ({
    __awaiter,
    onMount,
    getReviewCounts,
    reviewCounts,
    days,
    weeks,
    maxCount,
    isLoading,
    containerElement,
    maxWeeks,
    containerWidth,
    currentYear,
    lastEventTime,
    lastEventType,
    months,
    generateDays,
    getIntensityClass,
    formatDate,
    isToday,
    getMonthsData,
    calculateMaxWeeks,
    updateContainerWidth,
    navigateYear,
    handleTouchClick,
    refresh
  });
  $$self.$inject_state = ($$props2) => {
    if ("getReviewCounts" in $$props2)
      $$invalidate(8, getReviewCounts = $$props2.getReviewCounts);
    if ("reviewCounts" in $$props2)
      $$invalidate(0, reviewCounts = $$props2.reviewCounts);
    if ("days" in $$props2)
      days = $$props2.days;
    if ("weeks" in $$props2)
      weeks = $$props2.weeks;
    if ("maxCount" in $$props2)
      maxCount = $$props2.maxCount;
    if ("isLoading" in $$props2)
      $$invalidate(1, isLoading = $$props2.isLoading);
    if ("containerElement" in $$props2)
      $$invalidate(2, containerElement = $$props2.containerElement);
    if ("maxWeeks" in $$props2)
      $$invalidate(10, maxWeeks = $$props2.maxWeeks);
    if ("containerWidth" in $$props2)
      $$invalidate(11, containerWidth = $$props2.containerWidth);
    if ("currentYear" in $$props2)
      $$invalidate(3, currentYear = $$props2.currentYear);
    if ("lastEventTime" in $$props2)
      lastEventTime = $$props2.lastEventTime;
    if ("lastEventType" in $$props2)
      lastEventType = $$props2.lastEventType;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*containerWidth, maxWeeks*/
    3072) {
      $:
        if (containerWidth > 0) {
          const newMaxWeeks = calculateMaxWeeks(containerWidth);
          if (newMaxWeeks !== maxWeeks) {
            $$invalidate(10, maxWeeks = newMaxWeeks);
            refresh();
          }
        }
    }
  };
  return [
    reviewCounts,
    isLoading,
    containerElement,
    currentYear,
    getIntensityClass,
    getMonthsData,
    navigateYear,
    handleTouchClick,
    getReviewCounts,
    refresh,
    maxWeeks,
    containerWidth,
    click_handler,
    touchend_handler,
    click_handler_1,
    touchend_handler_1,
    div3_binding
  ];
}
var ReviewHeatmap = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance, create_fragment, safe_not_equal, { getReviewCounts: 8, refresh: 9 }, null, [-1, -1]);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "ReviewHeatmap",
      options,
      id: create_fragment.name
    });
  }
  get getReviewCounts() {
    throw new Error("<ReviewHeatmap>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set getReviewCounts(value) {
    throw new Error("<ReviewHeatmap>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get refresh() {
    return this.$$.ctx[9];
  }
  set refresh(value) {
    throw new Error("<ReviewHeatmap>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var ReviewHeatmap_default = ReviewHeatmap;

// src/components/DeckConfigModal.ts
var import_obsidian4 = require("obsidian");

// src/components/DeckConfigUI.svelte
var import_obsidian3 = require("obsidian");
var file2 = "src/components/DeckConfigUI.svelte";
function create_fragment2(ctx) {
  let div17;
  let div0;
  let h30;
  let t1;
  let ul;
  let li0;
  let strong0;
  let t3;
  let t4_value = (
    /*deck*/
    ctx[0].name + ""
  );
  let t4;
  let t5;
  let li1;
  let strong1;
  let t7;
  let t8_value = (
    /*deck*/
    ctx[0].tag + ""
  );
  let t8;
  let t9;
  let li2;
  let strong2;
  let t11;
  let t12_value = (
    /*deck*/
    ctx[0].filepath + ""
  );
  let t12;
  let t13;
  let div7;
  let h31;
  let t15;
  let div1;
  let t17;
  let div2;
  let t18;
  let div3;
  let t19;
  let div4;
  let t20;
  let div5;
  let t21;
  let div6;
  let t22;
  let div10;
  let h32;
  let t24;
  let div8;
  let t26;
  let div9;
  let t27;
  let div15;
  let h33;
  let t29;
  let div11;
  let t31;
  let div12;
  let t32;
  let div13;
  let t33;
  let div14;
  let t34;
  let div16;
  let button0;
  let t35_value = (
    /*saving*/
    ctx[3] ? "Saving..." : "Save"
  );
  let t35;
  let t36;
  let button1;
  let t37;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div17 = element("div");
      div0 = element("div");
      h30 = element("h3");
      h30.textContent = "Deck Information";
      t1 = space();
      ul = element("ul");
      li0 = element("li");
      strong0 = element("strong");
      strong0.textContent = "Name:";
      t3 = space();
      t4 = text(t4_value);
      t5 = space();
      li1 = element("li");
      strong1 = element("strong");
      strong1.textContent = "Tag:";
      t7 = space();
      t8 = text(t8_value);
      t9 = space();
      li2 = element("li");
      strong2 = element("strong");
      strong2.textContent = "File:";
      t11 = space();
      t12 = text(t12_value);
      t13 = space();
      div7 = element("div");
      h31 = element("h3");
      h31.textContent = "Daily Card Limits";
      t15 = space();
      div1 = element("div");
      div1.textContent = "New cards are subject to daily limits when enabled.";
      t17 = space();
      div2 = element("div");
      t18 = space();
      div3 = element("div");
      t19 = space();
      div4 = element("div");
      t20 = space();
      div5 = element("div");
      t21 = space();
      div6 = element("div");
      t22 = space();
      div10 = element("div");
      h32 = element("h3");
      h32.textContent = "Parsing Settings";
      t24 = space();
      div8 = element("div");
      div8.textContent = "Configure how flashcards are parsed from your notes for this deck.";
      t26 = space();
      div9 = element("div");
      t27 = space();
      div15 = element("div");
      h33 = element("h3");
      h33.textContent = "FSRS Algorithm Settings";
      t29 = space();
      div11 = element("div");
      div11.textContent = "These settings control the spaced repetition algorithm for this\n            deck.";
      t31 = space();
      div12 = element("div");
      t32 = space();
      div13 = element("div");
      t33 = space();
      div14 = element("div");
      t34 = space();
      div16 = element("div");
      button0 = element("button");
      t35 = text(t35_value);
      t36 = space();
      button1 = element("button");
      t37 = text("Cancel");
      attr_dev(h30, "class", "svelte-svxaah");
      add_location(h30, file2, 208, 8, 7251);
      attr_dev(strong0, "class", "svelte-svxaah");
      add_location(strong0, file2, 210, 16, 7329);
      attr_dev(li0, "class", "svelte-svxaah");
      add_location(li0, file2, 210, 12, 7325);
      attr_dev(strong1, "class", "svelte-svxaah");
      add_location(strong1, file2, 211, 16, 7385);
      attr_dev(li1, "class", "svelte-svxaah");
      add_location(li1, file2, 211, 12, 7381);
      attr_dev(strong2, "class", "svelte-svxaah");
      add_location(strong2, file2, 212, 16, 7439);
      attr_dev(li2, "class", "svelte-svxaah");
      add_location(li2, file2, 212, 12, 7435);
      attr_dev(ul, "class", "deck-info-list svelte-svxaah");
      add_location(ul, file2, 209, 8, 7285);
      attr_dev(div0, "class", "deck-info-section svelte-svxaah");
      add_location(div0, file2, 207, 4, 7211);
      attr_dev(h31, "class", "svelte-svxaah");
      add_location(h31, file2, 218, 8, 7587);
      attr_dev(div1, "class", "setting-item-description-global svelte-svxaah");
      add_location(div1, file2, 219, 8, 7622);
      add_location(div2, file2, 224, 8, 7800);
      attr_dev(div3, "class", "svelte-svxaah");
      toggle_class(div3, "disabled", !/*enableNewCardsLimit*/
      ctx[1]);
      add_location(div3, file2, 225, 8, 7856);
      add_location(div4, file2, 229, 8, 7982);
      attr_dev(div5, "class", "svelte-svxaah");
      toggle_class(div5, "disabled", !/*enableReviewCardsLimit*/
      ctx[2]);
      add_location(div5, file2, 230, 8, 8041);
      add_location(div6, file2, 234, 8, 8173);
      attr_dev(div7, "class", "deck-settings-section svelte-svxaah");
      add_location(div7, file2, 217, 4, 7543);
      attr_dev(h32, "class", "svelte-svxaah");
      add_location(h32, file2, 239, 8, 8308);
      attr_dev(div8, "class", "setting-item-description-global svelte-svxaah");
      add_location(div8, file2, 240, 8, 8342);
      add_location(div9, file2, 244, 8, 8491);
      attr_dev(div10, "class", "deck-settings-section svelte-svxaah");
      add_location(div10, file2, 238, 4, 8264);
      attr_dev(h33, "class", "svelte-svxaah");
      add_location(h33, file2, 249, 8, 8633);
      attr_dev(div11, "class", "setting-item-description-global svelte-svxaah");
      add_location(div11, file2, 250, 8, 8674);
      add_location(div12, file2, 255, 8, 8838);
      add_location(div13, file2, 256, 8, 8896);
      add_location(div14, file2, 257, 8, 8945);
      attr_dev(div15, "class", "deck-settings-section svelte-svxaah");
      add_location(div15, file2, 248, 4, 8589);
      attr_dev(button0, "class", "mod-cta svelte-svxaah");
      button0.disabled = /*saving*/
      ctx[3];
      add_location(button0, file2, 262, 8, 9067);
      button1.disabled = /*saving*/
      ctx[3];
      attr_dev(button1, "class", "svelte-svxaah");
      add_location(button1, file2, 270, 8, 9340);
      attr_dev(div16, "class", "modal-footer svelte-svxaah");
      add_location(div16, file2, 261, 4, 9032);
      attr_dev(div17, "class", "deck-config-ui svelte-svxaah");
      add_location(div17, file2, 205, 0, 7140);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div17, anchor);
      append_dev(div17, div0);
      append_dev(div0, h30);
      append_dev(div0, t1);
      append_dev(div0, ul);
      append_dev(ul, li0);
      append_dev(li0, strong0);
      append_dev(li0, t3);
      append_dev(li0, t4);
      append_dev(ul, t5);
      append_dev(ul, li1);
      append_dev(li1, strong1);
      append_dev(li1, t7);
      append_dev(li1, t8);
      append_dev(ul, t9);
      append_dev(ul, li2);
      append_dev(li2, strong2);
      append_dev(li2, t11);
      append_dev(li2, t12);
      append_dev(div17, t13);
      append_dev(div17, div7);
      append_dev(div7, h31);
      append_dev(div7, t15);
      append_dev(div7, div1);
      append_dev(div7, t17);
      append_dev(div7, div2);
      ctx[24](div2);
      append_dev(div7, t18);
      append_dev(div7, div3);
      ctx[25](div3);
      append_dev(div7, t19);
      append_dev(div7, div4);
      ctx[26](div4);
      append_dev(div7, t20);
      append_dev(div7, div5);
      ctx[27](div5);
      append_dev(div7, t21);
      append_dev(div7, div6);
      ctx[28](div6);
      append_dev(div17, t22);
      append_dev(div17, div10);
      append_dev(div10, h32);
      append_dev(div10, t24);
      append_dev(div10, div8);
      append_dev(div10, t26);
      append_dev(div10, div9);
      ctx[29](div9);
      append_dev(div17, t27);
      append_dev(div17, div15);
      append_dev(div15, h33);
      append_dev(div15, t29);
      append_dev(div15, div11);
      append_dev(div15, t31);
      append_dev(div15, div12);
      ctx[30](div12);
      append_dev(div15, t32);
      append_dev(div15, div13);
      ctx[31](div13);
      append_dev(div15, t33);
      append_dev(div15, div14);
      ctx[32](div14);
      append_dev(div17, t34);
      append_dev(div17, div16);
      append_dev(div16, button0);
      append_dev(button0, t35);
      append_dev(div16, t36);
      append_dev(div16, button1);
      append_dev(button1, t37);
      if (!mounted) {
        dispose = [
          listen_dev(
            window,
            "keydown",
            /*handleKeydown*/
            ctx[16],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button0,
            "click",
            /*click_handler*/
            ctx[33],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button0,
            "touchend",
            /*touchend_handler*/
            ctx[34],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button1,
            "click",
            /*click_handler_1*/
            ctx[35],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button1,
            "touchend",
            /*touchend_handler_1*/
            ctx[36],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*deck*/
      1 && t4_value !== (t4_value = /*deck*/
      ctx2[0].name + ""))
        set_data_dev(t4, t4_value);
      if (dirty[0] & /*deck*/
      1 && t8_value !== (t8_value = /*deck*/
      ctx2[0].tag + ""))
        set_data_dev(t8, t8_value);
      if (dirty[0] & /*deck*/
      1 && t12_value !== (t12_value = /*deck*/
      ctx2[0].filepath + ""))
        set_data_dev(t12, t12_value);
      if (dirty[0] & /*enableNewCardsLimit*/
      2) {
        toggle_class(div3, "disabled", !/*enableNewCardsLimit*/
        ctx2[1]);
      }
      if (dirty[0] & /*enableReviewCardsLimit*/
      4) {
        toggle_class(div5, "disabled", !/*enableReviewCardsLimit*/
        ctx2[2]);
      }
      if (dirty[0] & /*saving*/
      8 && t35_value !== (t35_value = /*saving*/
      ctx2[3] ? "Saving..." : "Save"))
        set_data_dev(t35, t35_value);
      if (dirty[0] & /*saving*/
      8) {
        prop_dev(
          button0,
          "disabled",
          /*saving*/
          ctx2[3]
        );
      }
      if (dirty[0] & /*saving*/
      8) {
        prop_dev(
          button1,
          "disabled",
          /*saving*/
          ctx2[3]
        );
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div17);
      ctx[24](null);
      ctx[25](null);
      ctx[26](null);
      ctx[27](null);
      ctx[28](null);
      ctx[29](null);
      ctx[30](null);
      ctx[31](null);
      ctx[32](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment2.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance2($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("DeckConfigUI", slots, []);
  let { deck } = $$props;
  let { config } = $$props;
  const dispatch = createEventDispatcher();
  let newCardsLimit = config.newCardsPerDay;
  let reviewCardsLimit = config.reviewCardsPerDay;
  let enableNewCardsLimit = config.newCardsPerDay > 0;
  let enableReviewCardsLimit = config.reviewCardsPerDay > 0;
  let reviewOrder = config.reviewOrder;
  let headerLevel = config.headerLevel;
  let requestRetention = config.fsrs.requestRetention;
  let profile = config.fsrs.profile;
  let saving = false;
  let newCardsLimitContainer;
  let enableNewCardsContainer;
  let reviewCardsLimitContainer;
  let enableReviewCardsContainer;
  let enableReviewCardsLimitContainer;
  let reviewOrderContainer;
  let headerLevelContainer;
  let requestRetentionContainer;
  let profileContainer;
  let fsrsResetContainer;
  let lastEventTime = 0;
  let lastEventType = "";
  function handleSave() {
    $$invalidate(3, saving = true);
    const finalConfig = {
      newCardsPerDay: enableNewCardsLimit ? Number(newCardsLimit) || 0 : 0,
      reviewCardsPerDay: enableReviewCardsLimit ? Number(reviewCardsLimit) || 0 : 0,
      reviewOrder,
      headerLevel: Number(headerLevel) || 2,
      fsrs: {
        requestRetention: Number(requestRetention) || 0.9,
        profile
      }
    };
    dispatch("save", finalConfig);
  }
  function handleTouchClick(callback, event) {
    const now = Date.now();
    const eventType = event.type;
    if (now - lastEventTime < 100 && lastEventType !== eventType) {
      return;
    }
    lastEventTime = now;
    lastEventType = eventType;
    callback();
  }
  function handleCancel() {
    dispatch("cancel");
  }
  function handleKeydown(event) {
    if (event.key === "Enter" && (event.ctrlKey || event.metaKey)) {
      handleSave();
    }
  }
  onMount(() => {
    if (enableNewCardsContainer) {
      new import_obsidian3.Setting(enableNewCardsContainer).setName("Enable New Cards Limit").setDesc("Limit how many new cards (never seen before) can be shown per day").addToggle((toggle) => toggle.setValue(enableNewCardsLimit).onChange((value) => {
        $$invalidate(1, enableNewCardsLimit = value);
      }));
    }
    if (newCardsLimitContainer) {
      new import_obsidian3.Setting(newCardsLimitContainer).setName("New Cards per Day").setDesc("Maximum number of new cards to introduce per day").addText((text2) => text2.setPlaceholder("20").setValue(newCardsLimit.toString()).onChange((value) => {
        const num = parseInt(value);
        if (!isNaN(num) && num >= 0) {
          $$invalidate(18, newCardsLimit = num);
        }
      }));
    }
    if (enableReviewCardsContainer) {
      new import_obsidian3.Setting(enableReviewCardsContainer).setName("Enable Review Cards Limit").setDesc("Limit how many review cards (due for repetition) can be shown per day").addToggle((toggle) => toggle.setValue(enableReviewCardsLimit).onChange((value) => {
        $$invalidate(2, enableReviewCardsLimit = value);
      }));
    }
    if (reviewCardsLimitContainer) {
      new import_obsidian3.Setting(reviewCardsLimitContainer).setName("Review Cards per Day").setDesc("Maximum number of review cards to show per day").addText((text2) => text2.setPlaceholder("100").setValue(reviewCardsLimit.toString()).onChange((value) => {
        const num = parseInt(value);
        if (!isNaN(num) && num >= 0) {
          $$invalidate(19, reviewCardsLimit = num);
        }
      }));
    }
    if (reviewOrderContainer) {
      new import_obsidian3.Setting(reviewOrderContainer).setName("Review Order").setDesc("Order in which review cards are presented during study").addDropdown((dropdown) => dropdown.addOption("due-date", "Oldest due first").addOption("random", "Random order").setValue(reviewOrder).onChange((value) => {
        $$invalidate(20, reviewOrder = value);
      }));
    }
    if (headerLevelContainer) {
      new import_obsidian3.Setting(headerLevelContainer).setName("Header Level for Flashcards").setDesc("Which header level to use for header-paragraph flashcards").addDropdown((dropdown) => dropdown.addOption("1", "H1 (#)").addOption("2", "H2 (##)").addOption("3", "H3 (###)").addOption("4", "H4 (####)").addOption("5", "H5 (#####)").addOption("6", "H6 (######)").setValue(headerLevel.toString()).onChange((value) => {
        $$invalidate(21, headerLevel = parseInt(value));
      }));
    }
    if (requestRetentionContainer) {
      new import_obsidian3.Setting(requestRetentionContainer).setName("Request Retention").setDesc("Target recall rate for reviews (0.5-0.995)").addSlider((slider) => slider.setLimits(0.5, 0.995, 0.01).setValue(requestRetention).setDynamicTooltip().onChange((value) => {
        $$invalidate(22, requestRetention = value);
      }));
    }
    if (profileContainer) {
      new import_obsidian3.Setting(profileContainer).setName("FSRS Profile").setDesc("INTENSIVE: Sub-day intervals (1m/5m/10m/40m). STANDARD: Day-based intervals (\u22651 day minimum)").addDropdown((dropdown) => dropdown.addOption("INTENSIVE", "Intensive (Sub-day)").addOption("STANDARD", "Standard (Day-based)").setValue(profile).onChange((value) => {
        if (value === "INTENSIVE" || value === "STANDARD") {
          $$invalidate(23, profile = value);
        }
      }));
    }
    if (fsrsResetContainer) {
      new import_obsidian3.Setting(fsrsResetContainer).setName("Reset FSRS Settings").setDesc("Reset all FSRS parameters to default values").setName("Reset to Defaults").addButton((button) => button.setButtonText("Reset to Defaults").onClick(() => {
        $$invalidate(22, requestRetention = 0.9);
        $$invalidate(23, profile = "STANDARD");
      }));
    }
  });
  $$self.$$.on_mount.push(function() {
    if (deck === void 0 && !("deck" in $$props || $$self.$$.bound[$$self.$$.props["deck"]])) {
      console.warn("<DeckConfigUI> was created without expected prop 'deck'");
    }
    if (config === void 0 && !("config" in $$props || $$self.$$.bound[$$self.$$.props["config"]])) {
      console.warn("<DeckConfigUI> was created without expected prop 'config'");
    }
  });
  const writable_props = ["deck", "config"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<DeckConfigUI> was created with unknown prop '${key}'`);
  });
  function div2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      enableNewCardsContainer = $$value;
      $$invalidate(5, enableNewCardsContainer);
    });
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      newCardsLimitContainer = $$value;
      $$invalidate(4, newCardsLimitContainer);
    });
  }
  function div4_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      enableReviewCardsContainer = $$value;
      $$invalidate(7, enableReviewCardsContainer);
    });
  }
  function div5_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      reviewCardsLimitContainer = $$value;
      $$invalidate(6, reviewCardsLimitContainer);
    });
  }
  function div6_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      reviewOrderContainer = $$value;
      $$invalidate(8, reviewOrderContainer);
    });
  }
  function div9_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      headerLevelContainer = $$value;
      $$invalidate(9, headerLevelContainer);
    });
  }
  function div12_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      requestRetentionContainer = $$value;
      $$invalidate(10, requestRetentionContainer);
    });
  }
  function div13_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      profileContainer = $$value;
      $$invalidate(11, profileContainer);
    });
  }
  function div14_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      fsrsResetContainer = $$value;
      $$invalidate(12, fsrsResetContainer);
    });
  }
  const click_handler = (e) => handleTouchClick(handleSave, e);
  const touchend_handler = (e) => handleTouchClick(handleSave, e);
  const click_handler_1 = (e) => handleTouchClick(handleCancel, e);
  const touchend_handler_1 = (e) => handleTouchClick(handleCancel, e);
  $$self.$$set = ($$props2) => {
    if ("deck" in $$props2)
      $$invalidate(0, deck = $$props2.deck);
    if ("config" in $$props2)
      $$invalidate(17, config = $$props2.config);
  };
  $$self.$capture_state = () => ({
    createEventDispatcher,
    onMount,
    Setting: import_obsidian3.Setting,
    deck,
    config,
    dispatch,
    newCardsLimit,
    reviewCardsLimit,
    enableNewCardsLimit,
    enableReviewCardsLimit,
    reviewOrder,
    headerLevel,
    requestRetention,
    profile,
    saving,
    newCardsLimitContainer,
    enableNewCardsContainer,
    reviewCardsLimitContainer,
    enableReviewCardsContainer,
    enableReviewCardsLimitContainer,
    reviewOrderContainer,
    headerLevelContainer,
    requestRetentionContainer,
    profileContainer,
    fsrsResetContainer,
    lastEventTime,
    lastEventType,
    handleSave,
    handleTouchClick,
    handleCancel,
    handleKeydown
  });
  $$self.$inject_state = ($$props2) => {
    if ("deck" in $$props2)
      $$invalidate(0, deck = $$props2.deck);
    if ("config" in $$props2)
      $$invalidate(17, config = $$props2.config);
    if ("newCardsLimit" in $$props2)
      $$invalidate(18, newCardsLimit = $$props2.newCardsLimit);
    if ("reviewCardsLimit" in $$props2)
      $$invalidate(19, reviewCardsLimit = $$props2.reviewCardsLimit);
    if ("enableNewCardsLimit" in $$props2)
      $$invalidate(1, enableNewCardsLimit = $$props2.enableNewCardsLimit);
    if ("enableReviewCardsLimit" in $$props2)
      $$invalidate(2, enableReviewCardsLimit = $$props2.enableReviewCardsLimit);
    if ("reviewOrder" in $$props2)
      $$invalidate(20, reviewOrder = $$props2.reviewOrder);
    if ("headerLevel" in $$props2)
      $$invalidate(21, headerLevel = $$props2.headerLevel);
    if ("requestRetention" in $$props2)
      $$invalidate(22, requestRetention = $$props2.requestRetention);
    if ("profile" in $$props2)
      $$invalidate(23, profile = $$props2.profile);
    if ("saving" in $$props2)
      $$invalidate(3, saving = $$props2.saving);
    if ("newCardsLimitContainer" in $$props2)
      $$invalidate(4, newCardsLimitContainer = $$props2.newCardsLimitContainer);
    if ("enableNewCardsContainer" in $$props2)
      $$invalidate(5, enableNewCardsContainer = $$props2.enableNewCardsContainer);
    if ("reviewCardsLimitContainer" in $$props2)
      $$invalidate(6, reviewCardsLimitContainer = $$props2.reviewCardsLimitContainer);
    if ("enableReviewCardsContainer" in $$props2)
      $$invalidate(7, enableReviewCardsContainer = $$props2.enableReviewCardsContainer);
    if ("enableReviewCardsLimitContainer" in $$props2)
      enableReviewCardsLimitContainer = $$props2.enableReviewCardsLimitContainer;
    if ("reviewOrderContainer" in $$props2)
      $$invalidate(8, reviewOrderContainer = $$props2.reviewOrderContainer);
    if ("headerLevelContainer" in $$props2)
      $$invalidate(9, headerLevelContainer = $$props2.headerLevelContainer);
    if ("requestRetentionContainer" in $$props2)
      $$invalidate(10, requestRetentionContainer = $$props2.requestRetentionContainer);
    if ("profileContainer" in $$props2)
      $$invalidate(11, profileContainer = $$props2.profileContainer);
    if ("fsrsResetContainer" in $$props2)
      $$invalidate(12, fsrsResetContainer = $$props2.fsrsResetContainer);
    if ("lastEventTime" in $$props2)
      lastEventTime = $$props2.lastEventTime;
    if ("lastEventType" in $$props2)
      lastEventType = $$props2.lastEventType;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty[0] & /*enableNewCardsLimit, newCardsLimit, enableReviewCardsLimit, reviewCardsLimit, reviewOrder, headerLevel, requestRetention, profile*/
    16515078) {
      $: {
        const newConfig = {
          newCardsPerDay: enableNewCardsLimit ? Number(newCardsLimit) || 0 : 0,
          reviewCardsPerDay: enableReviewCardsLimit ? Number(reviewCardsLimit) || 0 : 0,
          reviewOrder,
          headerLevel: Number(headerLevel) || 2,
          fsrs: {
            requestRetention: Number(requestRetention) || 0.9,
            profile
          }
        };
        dispatch("configChange", newConfig);
      }
    }
  };
  return [
    deck,
    enableNewCardsLimit,
    enableReviewCardsLimit,
    saving,
    newCardsLimitContainer,
    enableNewCardsContainer,
    reviewCardsLimitContainer,
    enableReviewCardsContainer,
    reviewOrderContainer,
    headerLevelContainer,
    requestRetentionContainer,
    profileContainer,
    fsrsResetContainer,
    handleSave,
    handleTouchClick,
    handleCancel,
    handleKeydown,
    config,
    newCardsLimit,
    reviewCardsLimit,
    reviewOrder,
    headerLevel,
    requestRetention,
    profile,
    div2_binding,
    div3_binding,
    div4_binding,
    div5_binding,
    div6_binding,
    div9_binding,
    div12_binding,
    div13_binding,
    div14_binding,
    click_handler,
    touchend_handler,
    click_handler_1,
    touchend_handler_1
  ];
}
var DeckConfigUI = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance2, create_fragment2, safe_not_equal, { deck: 0, config: 17 }, null, [-1, -1]);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "DeckConfigUI",
      options,
      id: create_fragment2.name
    });
  }
  get deck() {
    throw new Error("<DeckConfigUI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set deck(value) {
    throw new Error("<DeckConfigUI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get config() {
    throw new Error("<DeckConfigUI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set config(value) {
    throw new Error("<DeckConfigUI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var DeckConfigUI_default = DeckConfigUI;

// src/components/DeckConfigModal.ts
var DeckConfigModal = class extends import_obsidian4.Modal {
  constructor(plugin, deck, onSave) {
    super(plugin.app);
    this.component = null;
    this.plugin = plugin;
    this.deck = deck;
    this.onSave = onSave;
    this.config = { ...deck.config };
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const modalEl = this.containerEl.querySelector(".modal");
    if (modalEl instanceof HTMLElement && window.innerWidth <= 768) {
      modalEl.addClass("deck-config-modal-mobile");
    }
    contentEl.createEl("h2", { text: `Configure Deck: ${this.deck.name}` });
    const componentContainer = contentEl.createDiv("deck-config-container");
    componentContainer.addClass("deck-config-container");
    this.component = new DeckConfigUI_default({
      target: componentContainer,
      props: {
        deck: this.deck,
        config: this.config
      }
    });
    this.component.$on("save", (event) => {
      this.handleSave(event.detail);
    });
    this.component.$on("cancel", () => {
      this.close();
    });
    this.component.$on("configChange", (event) => {
      this.config = event.detail;
    });
    const handleResize = () => {
      const modalEl2 = this.containerEl.querySelector(".modal");
      if (modalEl2 instanceof HTMLElement) {
        if (import_obsidian4.Platform.isIosApp || import_obsidian4.Platform.isAndroidApp) {
          modalEl2.addClass("deck-config-modal-mobile");
        } else {
          modalEl2.removeClass("deck-config-modal-mobile");
        }
      }
    };
    window.addEventListener("resize", handleResize);
    this._resizeHandler = handleResize;
  }
  async handleSave(config) {
    try {
      await this.onSave(config);
      this.close();
    } catch (error) {
      console.error("Error saving deck configuration:", error);
    }
  }
  onClose() {
    const { contentEl } = this;
    if (this._resizeHandler) {
      window.removeEventListener("resize", this._resizeHandler);
      delete this._resizeHandler;
    }
    if (this.component) {
      this.component.$destroy();
      this.component = null;
    }
    contentEl.empty();
  }
};

// src/components/AnkiExportModal.ts
var import_obsidian6 = require("obsidian");

// src/components/AnkiExportUI.svelte
var import_obsidian5 = require("obsidian");
var file3 = "src/components/AnkiExportUI.svelte";
function create_fragment3(ctx) {
  let div6;
  let div0;
  let h30;
  let t1;
  let ul;
  let li0;
  let strong0;
  let t3;
  let t4_value = (
    /*deck*/
    ctx[0].name + ""
  );
  let t4;
  let t5;
  let li1;
  let strong1;
  let t7;
  let t8_value = (
    /*deck*/
    ctx[0].tag + ""
  );
  let t8;
  let t9;
  let li2;
  let strong2;
  let t11;
  let t12_value = (
    /*deck*/
    ctx[0].filepath + ""
  );
  let t12;
  let t13;
  let div1;
  let h31;
  let t15;
  let ol;
  let li3;
  let t17;
  let li4;
  let t18;
  let strong3;
  let t20;
  let li5;
  let t22;
  let li6;
  let t24;
  let li7;
  let t25;
  let strong4;
  let t27;
  let t28;
  let div4;
  let h32;
  let t30;
  let div2;
  let t31;
  let div3;
  let t32;
  let div5;
  let button0;
  let t33_value = (
    /*exporting*/
    ctx[2] ? "Exporting..." : "Export to Anki"
  );
  let t33;
  let button0_disabled_value;
  let t34;
  let button1;
  let t35;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div6 = element("div");
      div0 = element("div");
      h30 = element("h3");
      h30.textContent = "Export Information";
      t1 = space();
      ul = element("ul");
      li0 = element("li");
      strong0 = element("strong");
      strong0.textContent = "Source Deck:";
      t3 = space();
      t4 = text(t4_value);
      t5 = space();
      li1 = element("li");
      strong1 = element("strong");
      strong1.textContent = "Source Tag:";
      t7 = space();
      t8 = text(t8_value);
      t9 = space();
      li2 = element("li");
      strong2 = element("strong");
      strong2.textContent = "Source File:";
      t11 = space();
      t12 = text(t12_value);
      t13 = space();
      div1 = element("div");
      h31 = element("h3");
      h31.textContent = "How to Import";
      t15 = space();
      ol = element("ol");
      li3 = element("li");
      li3.textContent = "This will download a text file compatible with Anki";
      t17 = space();
      li4 = element("li");
      t18 = text("Open Anki and go to ");
      strong3 = element("strong");
      strong3.textContent = "File \u2192 Import";
      t20 = space();
      li5 = element("li");
      li5.textContent = "Select the downloaded file";
      t22 = space();
      li6 = element("li");
      li6.textContent = "Choose your target deck and import settings";
      t24 = space();
      li7 = element("li");
      t25 = text("Click ");
      strong4 = element("strong");
      strong4.textContent = "Import";
      t27 = text(" to add the cards");
      t28 = space();
      div4 = element("div");
      h32 = element("h3");
      h32.textContent = "Export Settings";
      t30 = space();
      div2 = element("div");
      t31 = space();
      div3 = element("div");
      t32 = space();
      div5 = element("div");
      button0 = element("button");
      t33 = text(t33_value);
      t34 = space();
      button1 = element("button");
      t35 = text("Cancel");
      attr_dev(h30, "class", "svelte-u6l6b1");
      add_location(h30, file3, 88, 8, 2693);
      attr_dev(strong0, "class", "svelte-u6l6b1");
      add_location(strong0, file3, 90, 16, 2773);
      attr_dev(li0, "class", "svelte-u6l6b1");
      add_location(li0, file3, 90, 12, 2769);
      attr_dev(strong1, "class", "svelte-u6l6b1");
      add_location(strong1, file3, 91, 16, 2836);
      attr_dev(li1, "class", "svelte-u6l6b1");
      add_location(li1, file3, 91, 12, 2832);
      attr_dev(strong2, "class", "svelte-u6l6b1");
      add_location(strong2, file3, 92, 16, 2897);
      attr_dev(li2, "class", "svelte-u6l6b1");
      add_location(li2, file3, 92, 12, 2893);
      attr_dev(ul, "class", "deck-info-list svelte-u6l6b1");
      add_location(ul, file3, 89, 8, 2729);
      attr_dev(div0, "class", "deck-info-section svelte-u6l6b1");
      add_location(div0, file3, 87, 4, 2653);
      attr_dev(h31, "class", "svelte-u6l6b1");
      add_location(h31, file3, 98, 8, 3054);
      attr_dev(li3, "class", "svelte-u6l6b1");
      add_location(li3, file3, 100, 12, 3128);
      attr_dev(strong3, "class", "svelte-u6l6b1");
      add_location(strong3, file3, 101, 36, 3225);
      attr_dev(li4, "class", "svelte-u6l6b1");
      add_location(li4, file3, 101, 12, 3201);
      attr_dev(li5, "class", "svelte-u6l6b1");
      add_location(li5, file3, 102, 12, 3273);
      attr_dev(li6, "class", "svelte-u6l6b1");
      add_location(li6, file3, 103, 12, 3321);
      attr_dev(strong4, "class", "svelte-u6l6b1");
      add_location(strong4, file3, 104, 22, 3396);
      attr_dev(li7, "class", "svelte-u6l6b1");
      add_location(li7, file3, 104, 12, 3386);
      attr_dev(ol, "class", "instructions-list svelte-u6l6b1");
      add_location(ol, file3, 99, 8, 3085);
      attr_dev(div1, "class", "instructions-section svelte-u6l6b1");
      add_location(div1, file3, 97, 4, 3011);
      attr_dev(h32, "class", "svelte-u6l6b1");
      add_location(h32, file3, 110, 8, 3555);
      add_location(div2, file3, 113, 8, 3633);
      add_location(div3, file3, 114, 8, 3683);
      attr_dev(div4, "class", "export-settings-section svelte-u6l6b1");
      add_location(div4, file3, 109, 4, 3509);
      attr_dev(button0, "class", "mod-cta svelte-u6l6b1");
      button0.disabled = button0_disabled_value = /*exporting*/
      ctx[2] || !/*ankiDeckName*/
      ctx[1].trim();
      add_location(button0, file3, 119, 8, 3805);
      button1.disabled = /*exporting*/
      ctx[2];
      attr_dev(button1, "class", "svelte-u6l6b1");
      add_location(button1, file3, 127, 8, 4125);
      attr_dev(div5, "class", "modal-footer svelte-u6l6b1");
      add_location(div5, file3, 118, 4, 3770);
      attr_dev(div6, "class", "anki-export-ui svelte-u6l6b1");
      add_location(div6, file3, 85, 0, 2582);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div6, anchor);
      append_dev(div6, div0);
      append_dev(div0, h30);
      append_dev(div0, t1);
      append_dev(div0, ul);
      append_dev(ul, li0);
      append_dev(li0, strong0);
      append_dev(li0, t3);
      append_dev(li0, t4);
      append_dev(ul, t5);
      append_dev(ul, li1);
      append_dev(li1, strong1);
      append_dev(li1, t7);
      append_dev(li1, t8);
      append_dev(ul, t9);
      append_dev(ul, li2);
      append_dev(li2, strong2);
      append_dev(li2, t11);
      append_dev(li2, t12);
      append_dev(div6, t13);
      append_dev(div6, div1);
      append_dev(div1, h31);
      append_dev(div1, t15);
      append_dev(div1, ol);
      append_dev(ol, li3);
      append_dev(ol, t17);
      append_dev(ol, li4);
      append_dev(li4, t18);
      append_dev(li4, strong3);
      append_dev(ol, t20);
      append_dev(ol, li5);
      append_dev(ol, t22);
      append_dev(ol, li6);
      append_dev(ol, t24);
      append_dev(ol, li7);
      append_dev(li7, t25);
      append_dev(li7, strong4);
      append_dev(li7, t27);
      append_dev(div6, t28);
      append_dev(div6, div4);
      append_dev(div4, h32);
      append_dev(div4, t30);
      append_dev(div4, div2);
      ctx[9](div2);
      append_dev(div4, t31);
      append_dev(div4, div3);
      ctx[10](div3);
      append_dev(div6, t32);
      append_dev(div6, div5);
      append_dev(div5, button0);
      append_dev(button0, t33);
      append_dev(div5, t34);
      append_dev(div5, button1);
      append_dev(button1, t35);
      if (!mounted) {
        dispose = [
          listen_dev(
            window,
            "keydown",
            /*handleKeydown*/
            ctx[8],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button0,
            "click",
            /*click_handler*/
            ctx[11],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button0,
            "touchend",
            /*touchend_handler*/
            ctx[12],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button1,
            "click",
            /*click_handler_1*/
            ctx[13],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button1,
            "touchend",
            /*touchend_handler_1*/
            ctx[14],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update2(ctx2, [dirty]) {
      if (dirty & /*deck*/
      1 && t4_value !== (t4_value = /*deck*/
      ctx2[0].name + ""))
        set_data_dev(t4, t4_value);
      if (dirty & /*deck*/
      1 && t8_value !== (t8_value = /*deck*/
      ctx2[0].tag + ""))
        set_data_dev(t8, t8_value);
      if (dirty & /*deck*/
      1 && t12_value !== (t12_value = /*deck*/
      ctx2[0].filepath + ""))
        set_data_dev(t12, t12_value);
      if (dirty & /*exporting*/
      4 && t33_value !== (t33_value = /*exporting*/
      ctx2[2] ? "Exporting..." : "Export to Anki"))
        set_data_dev(t33, t33_value);
      if (dirty & /*exporting, ankiDeckName*/
      6 && button0_disabled_value !== (button0_disabled_value = /*exporting*/
      ctx2[2] || !/*ankiDeckName*/
      ctx2[1].trim())) {
        prop_dev(button0, "disabled", button0_disabled_value);
      }
      if (dirty & /*exporting*/
      4) {
        prop_dev(
          button1,
          "disabled",
          /*exporting*/
          ctx2[2]
        );
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div6);
      ctx[9](null);
      ctx[10](null);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment3.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function instance3($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("AnkiExportUI", slots, []);
  let { deck } = $$props;
  const dispatch = createEventDispatcher();
  let ankiDeckName = deck.name;
  let separator = "tab";
  let exporting = false;
  let deckNameContainer;
  let separatorContainer;
  let lastEventTime = 0;
  let lastEventType = "";
  function handleExport() {
    $$invalidate(2, exporting = true);
    const separatorMap = {
      tab: "	",
      semicolon: ";",
      colon: ":",
      pipe: "|",
      comma: ",",
      space: " "
    };
    const config = {
      ankiDeckName: ankiDeckName.trim() || deck.name,
      separator: separatorMap[separator] || "	"
    };
    dispatch("export", config);
  }
  function handleTouchClick(callback, event) {
    const now = Date.now();
    const eventType = event.type;
    if (now - lastEventTime < 100 && lastEventType !== eventType) {
      return;
    }
    lastEventTime = now;
    lastEventType = eventType;
    callback();
  }
  function handleCancel() {
    dispatch("cancel");
  }
  function handleKeydown(event) {
    if (event.key === "Enter" && (event.ctrlKey || event.metaKey)) {
      handleExport();
    }
  }
  onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    if (deckNameContainer) {
      new import_obsidian5.Setting(deckNameContainer).setName("Anki Deck Name").setDesc("Name of the deck in Anki where cards will be imported").addText((text2) => text2.setPlaceholder("Enter deck name...").setValue(ankiDeckName).onChange((value) => {
        $$invalidate(1, ankiDeckName = value);
      }));
    }
    if (separatorContainer) {
      new import_obsidian5.Setting(separatorContainer).setName("Field Separator").setDesc("Character used to separate fields in the exported file").addDropdown((dropdown) => dropdown.addOption("tab", "Tab").addOption("semicolon", "Semicolon (;)").addOption("colon", "Colon (:)").addOption("pipe", "Pipe (|)").addOption("comma", "Comma (,)").addOption("space", "Space").setValue(separator).onChange((value) => {
        separator = value;
      }));
    }
  }));
  $$self.$$.on_mount.push(function() {
    if (deck === void 0 && !("deck" in $$props || $$self.$$.bound[$$self.$$.props["deck"]])) {
      console.warn("<AnkiExportUI> was created without expected prop 'deck'");
    }
  });
  const writable_props = ["deck"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console.warn(`<AnkiExportUI> was created with unknown prop '${key}'`);
  });
  function div2_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      deckNameContainer = $$value;
      $$invalidate(3, deckNameContainer);
    });
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      separatorContainer = $$value;
      $$invalidate(4, separatorContainer);
    });
  }
  const click_handler = (e) => handleTouchClick(handleExport, e);
  const touchend_handler = (e) => handleTouchClick(handleExport, e);
  const click_handler_1 = (e) => handleTouchClick(handleCancel, e);
  const touchend_handler_1 = (e) => handleTouchClick(handleCancel, e);
  $$self.$$set = ($$props2) => {
    if ("deck" in $$props2)
      $$invalidate(0, deck = $$props2.deck);
  };
  $$self.$capture_state = () => ({
    __awaiter,
    createEventDispatcher,
    onMount,
    Setting: import_obsidian5.Setting,
    deck,
    dispatch,
    ankiDeckName,
    separator,
    exporting,
    deckNameContainer,
    separatorContainer,
    lastEventTime,
    lastEventType,
    handleExport,
    handleTouchClick,
    handleCancel,
    handleKeydown
  });
  $$self.$inject_state = ($$props2) => {
    if ("deck" in $$props2)
      $$invalidate(0, deck = $$props2.deck);
    if ("ankiDeckName" in $$props2)
      $$invalidate(1, ankiDeckName = $$props2.ankiDeckName);
    if ("separator" in $$props2)
      separator = $$props2.separator;
    if ("exporting" in $$props2)
      $$invalidate(2, exporting = $$props2.exporting);
    if ("deckNameContainer" in $$props2)
      $$invalidate(3, deckNameContainer = $$props2.deckNameContainer);
    if ("separatorContainer" in $$props2)
      $$invalidate(4, separatorContainer = $$props2.separatorContainer);
    if ("lastEventTime" in $$props2)
      lastEventTime = $$props2.lastEventTime;
    if ("lastEventType" in $$props2)
      lastEventType = $$props2.lastEventType;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    deck,
    ankiDeckName,
    exporting,
    deckNameContainer,
    separatorContainer,
    handleExport,
    handleTouchClick,
    handleCancel,
    handleKeydown,
    div2_binding,
    div3_binding,
    click_handler,
    touchend_handler,
    click_handler_1,
    touchend_handler_1
  ];
}
var AnkiExportUI = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance3, create_fragment3, safe_not_equal, { deck: 0 });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "AnkiExportUI",
      options,
      id: create_fragment3.name
    });
  }
  get deck() {
    throw new Error("<AnkiExportUI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set deck(value) {
    throw new Error("<AnkiExportUI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var AnkiExportUI_default = AnkiExportUI;

// src/components/AnkiExportModal.ts
var AnkiExportModal = class extends import_obsidian6.Modal {
  constructor(plugin, deck) {
    super(plugin.app);
    this.component = null;
    this.plugin = plugin;
    this.deck = deck;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const modalEl = this.containerEl.querySelector(".modal");
    if (modalEl instanceof HTMLElement && window.innerWidth <= 768) {
      modalEl.addClass("anki-export-modal-mobile");
    }
    contentEl.createEl("h2", { text: `Export to Anki: ${this.deck.name}` });
    const componentContainer = contentEl.createDiv("anki-export-container");
    componentContainer.addClass("anki-export-container");
    this.component = new AnkiExportUI_default({
      target: componentContainer,
      props: {
        deck: this.deck
      }
    });
    this.component.$on("export", (event) => {
      this.handleExport(event.detail);
    });
    this.component.$on("cancel", () => {
      this.close();
    });
    const handleResize = () => {
      const modalEl2 = this.containerEl.querySelector(".modal");
      if (modalEl2 instanceof HTMLElement) {
        if (window.innerWidth <= 768) {
          modalEl2.addClass("anki-export-modal-mobile");
        } else {
          modalEl2.removeClass("anki-export-modal-mobile");
        }
      }
    };
    window.addEventListener("resize", handleResize);
    this._resizeHandler = handleResize;
  }
  async handleExport(config) {
    try {
      const flashcards = await this.plugin.getFlashcardsByDeck(this.deck.id);
      if (flashcards.length === 0) {
        new import_obsidian6.Notice("No flashcards found in this deck to export");
        return;
      }
      const ankiData = this.generateAnkiData(flashcards, config);
      await this.downloadAnkiFile(ankiData, config.ankiDeckName);
      new import_obsidian6.Notice(
        `Successfully exported ${flashcards.length} flashcards to Anki format`
      );
      this.close();
    } catch (error) {
      console.error("Error exporting to Anki:", error);
      new import_obsidian6.Notice("Failed to export deck to Anki format");
    }
  }
  generateAnkiData(flashcards, config) {
    const headers = ["Front", "Back"];
    const rows = [headers.join(config.separator)];
    flashcards.forEach((card) => {
      const front = this.sanitizeForAnki(card.front, config.separator);
      const back = this.sanitizeForAnki(card.back, config.separator);
      rows.push([front, back].join(config.separator));
    });
    return rows.join("\n");
  }
  sanitizeForAnki(text2, separator) {
    let sanitized = text2.replace(/\*\*(.*?)\*\*/g, "<b>$1</b>").replace(/\*(.*?)\*/g, "<i>$1</i>").replace(/`(.*?)`/g, "<code>$1</code>").replace(/\n/g, "<br>").trim();
    if (separator === "	") {
      sanitized = sanitized.replace(/\t/g, " ");
    } else {
      sanitized = sanitized.replace(
        new RegExp(`\\${separator}`, "g"),
        `\\${separator}`
      );
    }
    return sanitized;
  }
  async downloadAnkiFile(data, deckName) {
    const fileName = `${deckName.replace(/[^a-zA-Z0-9-_]/g, "_")}_export.txt`;
    const blob = new Blob([data], { type: "text/plain;charset=utf-8" });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = fileName;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  }
  onClose() {
    const { contentEl } = this;
    if (this._resizeHandler) {
      window.removeEventListener("resize", this._resizeHandler);
      delete this._resizeHandler;
    }
    if (this.component) {
      this.component.$destroy();
      this.component = null;
    }
    contentEl.empty();
  }
};

// src/components/DeckListPanel.svelte
var { console: console_12 } = globals;
var file4 = "src/components/DeckListPanel.svelte";
function get_each_context2(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[59] = list[i];
  const constants_0 = (
    /*getDeckStats*/
    child_ctx[13](
      /*deck*/
      child_ctx[59].id
    )
  );
  child_ctx[12] = constants_0;
  return child_ctx;
}
function get_each_context_22(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[62] = list[i];
  return child_ctx;
}
function get_each_context_12(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[62] = list[i];
  return child_ctx;
}
function create_if_block_5(ctx) {
  let div1;
  let div0;
  let t1;
  let each_value_2 = (
    /*availableTags*/
    ctx[7].slice(0, 5)
  );
  validate_each_argument(each_value_2);
  let each_blocks = [];
  for (let i = 0; i < each_value_2.length; i += 1) {
    each_blocks[i] = create_each_block_22(get_each_context_22(ctx, each_value_2, i));
  }
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      div0.textContent = "Available tags (click to filter):";
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr_dev(div0, "class", "suggestions-header svelte-1hyrijk");
      add_location(div0, file4, 391, 20, 13228);
      attr_dev(div1, "class", "suggestions-dropdown svelte-1hyrijk");
      add_location(div1, file4, 390, 16, 13173);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div1, anchor);
      append_dev(div1, div0);
      append_dev(div1, t1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*selectSuggestion, availableTags, handleTouchClick*/
      2162816) {
        each_value_2 = /*availableTags*/
        ctx2[7].slice(0, 5);
        validate_each_argument(each_value_2);
        let i;
        for (i = 0; i < each_value_2.length; i += 1) {
          const child_ctx = get_each_context_22(ctx2, each_value_2, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_22(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_2.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_5.name,
    type: "if",
    source: "(390:85) ",
    ctx
  });
  return block;
}
function create_if_block_4(ctx) {
  let div1;
  let div0;
  let t1;
  let each_value_1 = (
    /*filteredSuggestions*/
    ctx[8]
  );
  validate_each_argument(each_value_1);
  let each_blocks = [];
  for (let i = 0; i < each_value_1.length; i += 1) {
    each_blocks[i] = create_each_block_12(get_each_context_12(ctx, each_value_1, i));
  }
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      div0.textContent = "Available tags:";
      t1 = space();
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr_dev(div0, "class", "suggestions-header svelte-1hyrijk");
      add_location(div0, file4, 368, 20, 12144);
      attr_dev(div1, "class", "suggestions-dropdown svelte-1hyrijk");
      add_location(div1, file4, 367, 16, 12089);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div1, anchor);
      append_dev(div1, div0);
      append_dev(div1, t1);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div1, null);
        }
      }
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*selectSuggestion, filteredSuggestions, handleTouchClick*/
      2162944) {
        each_value_1 = /*filteredSuggestions*/
        ctx2[8];
        validate_each_argument(each_value_1);
        let i;
        for (i = 0; i < each_value_1.length; i += 1) {
          const child_ctx = get_each_context_12(ctx2, each_value_1, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block_12(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div1, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value_1.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_4.name,
    type: "if",
    source: "(367:12) {#if showSuggestions && filteredSuggestions.length > 0}",
    ctx
  });
  return block;
}
function create_each_block_22(ctx) {
  let button;
  let t0_value = (
    /*tag*/
    ctx[62] + ""
  );
  let t0;
  let t1;
  let mounted;
  let dispose;
  function mousedown_handler_1() {
    return (
      /*mousedown_handler_1*/
      ctx[39](
        /*tag*/
        ctx[62]
      )
    );
  }
  function click_handler_3(...args) {
    return (
      /*click_handler_3*/
      ctx[40](
        /*tag*/
        ctx[62],
        ...args
      )
    );
  }
  function touchend_handler_3(...args) {
    return (
      /*touchend_handler_3*/
      ctx[41](
        /*tag*/
        ctx[62],
        ...args
      )
    );
  }
  const block = {
    c: function create() {
      button = element("button");
      t0 = text(t0_value);
      t1 = space();
      attr_dev(button, "class", "suggestion-item svelte-1hyrijk");
      add_location(button, file4, 395, 24, 13431);
    },
    m: function mount(target, anchor) {
      insert_dev(target, button, anchor);
      append_dev(button, t0);
      append_dev(button, t1);
      if (!mounted) {
        dispose = [
          listen_dev(button, "mousedown", prevent_default(mousedown_handler_1), false, true, false, false),
          listen_dev(button, "click", click_handler_3, false, false, false, false),
          listen_dev(button, "touchend", touchend_handler_3, false, false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update2(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*availableTags*/
      128 && t0_value !== (t0_value = /*tag*/
      ctx[62] + ""))
        set_data_dev(t0, t0_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(button);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_22.name,
    type: "each",
    source: "(395:20) {#each availableTags.slice(0, 5) as tag}",
    ctx
  });
  return block;
}
function create_each_block_12(ctx) {
  let button;
  let t0_value = (
    /*tag*/
    ctx[62] + ""
  );
  let t0;
  let t1;
  let mounted;
  let dispose;
  function mousedown_handler() {
    return (
      /*mousedown_handler*/
      ctx[36](
        /*tag*/
        ctx[62]
      )
    );
  }
  function click_handler_2(...args) {
    return (
      /*click_handler_2*/
      ctx[37](
        /*tag*/
        ctx[62],
        ...args
      )
    );
  }
  function touchend_handler_2(...args) {
    return (
      /*touchend_handler_2*/
      ctx[38](
        /*tag*/
        ctx[62],
        ...args
      )
    );
  }
  const block = {
    c: function create() {
      button = element("button");
      t0 = text(t0_value);
      t1 = space();
      attr_dev(button, "class", "suggestion-item svelte-1hyrijk");
      add_location(button, file4, 370, 24, 12277);
    },
    m: function mount(target, anchor) {
      insert_dev(target, button, anchor);
      append_dev(button, t0);
      append_dev(button, t1);
      if (!mounted) {
        dispose = [
          listen_dev(button, "mousedown", prevent_default(mousedown_handler), false, true, false, false),
          listen_dev(button, "click", click_handler_2, false, false, false, false),
          listen_dev(button, "touchend", touchend_handler_2, false, false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update2(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*filteredSuggestions*/
      256 && t0_value !== (t0_value = /*tag*/
      ctx[62] + ""))
        set_data_dev(t0, t0_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(button);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block_12.name,
    type: "each",
    source: "(370:20) {#each filteredSuggestions as tag}",
    ctx
  });
  return block;
}
function create_else_block2(ctx) {
  let div6;
  let div4;
  let div0;
  let t1;
  let div1;
  let t3;
  let div2;
  let t5;
  let div3;
  let t6;
  let div5;
  let each_value = (
    /*decks*/
    ctx[2]
  );
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block2(get_each_context2(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      div6 = element("div");
      div4 = element("div");
      div0 = element("div");
      div0.textContent = "Deck";
      t1 = space();
      div1 = element("div");
      div1.textContent = "New";
      t3 = space();
      div2 = element("div");
      div2.textContent = "Due";
      t5 = space();
      div3 = element("div");
      t6 = space();
      div5 = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      attr_dev(div0, "class", "col-deck svelte-1hyrijk");
      add_location(div0, file4, 433, 16, 14812);
      attr_dev(div1, "class", "col-stat svelte-1hyrijk");
      add_location(div1, file4, 434, 16, 14861);
      attr_dev(div2, "class", "col-stat svelte-1hyrijk");
      add_location(div2, file4, 435, 16, 14909);
      attr_dev(div3, "class", "col-config svelte-1hyrijk");
      add_location(div3, file4, 436, 16, 14957);
      attr_dev(div4, "class", "table-header svelte-1hyrijk");
      add_location(div4, file4, 432, 12, 14769);
      attr_dev(div5, "class", "table-body svelte-1hyrijk");
      add_location(div5, file4, 439, 12, 15020);
      attr_dev(div6, "class", "deck-table svelte-1hyrijk");
      add_location(div6, file4, 431, 8, 14732);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div6, anchor);
      append_dev(div6, div4);
      append_dev(div4, div0);
      append_dev(div4, t1);
      append_dev(div4, div1);
      append_dev(div4, t3);
      append_dev(div4, div2);
      append_dev(div4, t5);
      append_dev(div4, div3);
      append_dev(div6, t6);
      append_dev(div6, div5);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div5, null);
        }
      }
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*decks, handleTouchClick, handleConfigClick, getDeckStats, isUpdatingStats, handleDeckClick*/
      3680260) {
        each_value = /*decks*/
        ctx2[2];
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context2(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block2(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div5, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div6);
      destroy_each(each_blocks, detaching);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block2.name,
    type: "else",
    source: "(431:4) {:else}",
    ctx
  });
  return block;
}
function create_if_block_12(ctx) {
  let div;
  let p0;
  let t1;
  let p1;
  const block = {
    c: function create() {
      div = element("div");
      p0 = element("p");
      p0.textContent = "No decks match your filter.";
      t1 = space();
      p1 = element("p");
      p1.textContent = "Try adjusting your search terms.";
      attr_dev(p0, "class", "svelte-1hyrijk");
      add_location(p0, file4, 427, 12, 14592);
      attr_dev(p1, "class", "help-text svelte-1hyrijk");
      add_location(p1, file4, 428, 12, 14639);
      attr_dev(div, "class", "empty-state svelte-1hyrijk");
      add_location(div, file4, 426, 8, 14554);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p0);
      append_dev(div, t1);
      append_dev(div, p1);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_12.name,
    type: "if",
    source: "(426:33) ",
    ctx
  });
  return block;
}
function create_if_block2(ctx) {
  let div;
  let p0;
  let t1;
  let p1;
  const block = {
    c: function create() {
      div = element("div");
      p0 = element("p");
      p0.textContent = "No flashcard decks found.";
      t1 = space();
      p1 = element("p");
      p1.textContent = "Tag your notes with #flashcards to create decks.";
      attr_dev(p0, "class", "svelte-1hyrijk");
      add_location(p0, file4, 420, 12, 14348);
      attr_dev(p1, "class", "help-text svelte-1hyrijk");
      add_location(p1, file4, 421, 12, 14393);
      attr_dev(div, "class", "empty-state svelte-1hyrijk");
      add_location(div, file4, 419, 8, 14310);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p0);
      append_dev(div, t1);
      append_dev(div, p1);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block2.name,
    type: "if",
    source: "(419:4) {#if allDecks.length === 0}",
    ctx
  });
  return block;
}
function create_if_block_3(ctx) {
  let span;
  const block = {
    c: function create() {
      span = element("span");
      span.textContent = "\u{1F4C5}";
      attr_dev(span, "class", "limit-indicator svelte-1hyrijk");
      add_location(span, file4, 476, 32, 16973);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(span);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_3.name,
    type: "if",
    source: "(476:28) {#if deck.config.newCardsPerDay > 0}",
    ctx
  });
  return block;
}
function create_if_block_2(ctx) {
  let span;
  const block = {
    c: function create() {
      span = element("span");
      span.textContent = "\u{1F4C5}";
      attr_dev(span, "class", "limit-indicator svelte-1hyrijk");
      add_location(span, file4, 498, 32, 18120);
    },
    m: function mount(target, anchor) {
      insert_dev(target, span, anchor);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(span);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_2.name,
    type: "if",
    source: "(498:28) {#if deck.config.reviewCardsPerDay > 0}",
    ctx
  });
  return block;
}
function create_each_block2(ctx) {
  let div5;
  let div0;
  let span;
  let t0_value = formatDeckName(
    /*deck*/
    ctx[59]
  ) + "";
  let t0;
  let span_title_value;
  let t1;
  let div1;
  let t2_value = (
    /*stats*/
    ctx[12].newCount + ""
  );
  let t2;
  let t3;
  let div1_title_value;
  let t4;
  let div2;
  let t6;
  let div3;
  let t7_value = (
    /*stats*/
    ctx[12].dueCount + ""
  );
  let t7;
  let t8;
  let div3_title_value;
  let t9;
  let div4;
  let button;
  let svg;
  let circle;
  let path;
  let button_aria_label_value;
  let t10;
  let mounted;
  let dispose;
  function click_handler_4(...args) {
    return (
      /*click_handler_4*/
      ctx[42](
        /*deck*/
        ctx[59],
        ...args
      )
    );
  }
  function touchend_handler_4(...args) {
    return (
      /*touchend_handler_4*/
      ctx[43](
        /*deck*/
        ctx[59],
        ...args
      )
    );
  }
  function keydown_handler(...args) {
    return (
      /*keydown_handler*/
      ctx[44](
        /*deck*/
        ctx[59],
        ...args
      )
    );
  }
  let if_block0 = (
    /*deck*/
    ctx[59].config.newCardsPerDay > 0 && create_if_block_3(ctx)
  );
  let if_block1 = (
    /*deck*/
    ctx[59].config.reviewCardsPerDay > 0 && create_if_block_2(ctx)
  );
  function click_handler_5(...args) {
    return (
      /*click_handler_5*/
      ctx[45](
        /*deck*/
        ctx[59],
        ...args
      )
    );
  }
  function touchend_handler_5(...args) {
    return (
      /*touchend_handler_5*/
      ctx[46](
        /*deck*/
        ctx[59],
        ...args
      )
    );
  }
  const block = {
    c: function create() {
      div5 = element("div");
      div0 = element("div");
      span = element("span");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      t2 = text(t2_value);
      t3 = space();
      if (if_block0)
        if_block0.c();
      t4 = space();
      div2 = element("div");
      div2.textContent = "0";
      t6 = space();
      div3 = element("div");
      t7 = text(t7_value);
      t8 = space();
      if (if_block1)
        if_block1.c();
      t9 = space();
      div4 = element("div");
      button = element("button");
      svg = svg_element("svg");
      circle = svg_element("circle");
      path = svg_element("path");
      t10 = space();
      attr_dev(span, "class", "deck-name-link svelte-1hyrijk");
      attr_dev(span, "role", "button");
      attr_dev(span, "tabindex", "0");
      attr_dev(span, "title", span_title_value = "Click to review " + /*deck*/
      ctx[59].name);
      add_location(span, file4, 444, 28, 15260);
      attr_dev(div0, "class", "col-deck svelte-1hyrijk");
      add_location(div0, file4, 443, 24, 15209);
      attr_dev(div1, "class", "col-stat svelte-1hyrijk");
      attr_dev(div1, "title", div1_title_value = /*deck*/
      ctx[59].config.newCardsPerDay > 0 ? `${/*stats*/
      ctx[12].newCount} new cards available today (limit: ${/*deck*/
      ctx[59].config.newCardsPerDay})` : `${/*stats*/
      ctx[12].newCount} new cards due`);
      toggle_class(
        div1,
        "has-cards",
        /*stats*/
        ctx[12].newCount > 0
      );
      toggle_class(
        div1,
        "updating",
        /*isUpdatingStats*/
        ctx[11]
      );
      toggle_class(
        div1,
        "has-limit",
        /*deck*/
        ctx[59].config.newCardsPerDay > 0
      );
      add_location(div1, file4, 465, 24, 16298);
      attr_dev(div2, "class", "col-stat svelte-1hyrijk");
      set_style(div2, "display", "none");
      toggle_class(div2, "has-cards", false);
      toggle_class(
        div2,
        "updating",
        /*isUpdatingStats*/
        ctx[11]
      );
      add_location(div2, file4, 479, 24, 17102);
      attr_dev(div3, "class", "col-stat svelte-1hyrijk");
      attr_dev(div3, "title", div3_title_value = /*deck*/
      ctx[59].config.reviewCardsPerDay > 0 ? `${/*stats*/
      ctx[12].dueCount} review cards available today (limit: ${/*deck*/
      ctx[59].config.reviewCardsPerDay})` : `${/*stats*/
      ctx[12].dueCount} review cards due`);
      toggle_class(
        div3,
        "has-cards",
        /*stats*/
        ctx[12].dueCount > 0
      );
      toggle_class(
        div3,
        "updating",
        /*isUpdatingStats*/
        ctx[11]
      );
      toggle_class(
        div3,
        "has-limit",
        /*deck*/
        ctx[59].config.reviewCardsPerDay > 0
      );
      add_location(div3, file4, 487, 24, 17427);
      attr_dev(circle, "cx", "12");
      attr_dev(circle, "cy", "12");
      attr_dev(circle, "r", "3");
      add_location(circle, file4, 528, 36, 19658);
      attr_dev(path, "d", "M19.4 15a1.65 1.65 0 0 0 .33 1.82l.06.06a2 2 0 0 1 0 2.83 2 2 0 0 1-2.83 0l-.06-.06a1.65 1.65 0 0 0-1.82-.33 1.65 1.65 0 0 0-1 1.51V21a2 2 0 0 1-2 2 2 2 0 0 1-2-2v-.09A1.65 1.65 0 0 0 9 19.4a1.65 1.65 0 0 0-1.82.33l-.06.06a2 2 0 0 1-2.83 0 2 2 0 0 1 0-2.83l.06-.06a1.65 1.65 0 0 0 .33-1.82 1.65 1.65 0 0 0-1.51-1H3a2 2 0 0 1-2-2 2 2 0 0 1 2-2h.09A1.65 1.65 0 0 0 4.6 9a1.65 1.65 0 0 0-.33-1.82l-.06-.06a2 2 0 0 1 0-2.83 2 2 0 0 1 2.83 0l.06.06a1.65 1.65 0 0 0 1.82.33H9a1.65 1.65 0 0 0 1 1.51V3a2 2 0 0 1 2-2 2 2 0 0 1 2 2v.09a1.65 1.65 0 0 0 1 1.51 1.65 1.65 0 0 0 1.82-.33l.06-.06a2 2 0 0 1 2.83 0 2 2 0 0 1 0 2.83l-.06.06a1.65 1.65 0 0 0-.33 1.82V9a1.65 1.65 0 0 0 1.51 1H21a2 2 0 0 1 2 2 2 2 0 0 1-2 2h-.09a1.65 1.65 0 0 0-1.51 1z");
      add_location(path, file4, 529, 36, 19734);
      attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg, "width", "16");
      attr_dev(svg, "height", "16");
      attr_dev(svg, "viewBox", "0 0 24 24");
      attr_dev(svg, "fill", "none");
      attr_dev(svg, "stroke", "currentColor");
      attr_dev(svg, "stroke-width", "2");
      attr_dev(svg, "stroke-linecap", "round");
      attr_dev(svg, "stroke-linejoin", "round");
      add_location(svg, file4, 517, 32, 19083);
      attr_dev(button, "class", "deck-config-button svelte-1hyrijk");
      attr_dev(button, "title", "Configure deck settings");
      attr_dev(button, "aria-label", button_aria_label_value = "Configure " + /*deck*/
      ctx[59].name);
      add_location(button, file4, 502, 28, 18302);
      attr_dev(div4, "class", "col-config svelte-1hyrijk");
      add_location(div4, file4, 501, 24, 18249);
      attr_dev(div5, "class", "deck-row svelte-1hyrijk");
      add_location(div5, file4, 442, 20, 15162);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div5, anchor);
      append_dev(div5, div0);
      append_dev(div0, span);
      append_dev(span, t0);
      append_dev(div5, t1);
      append_dev(div5, div1);
      append_dev(div1, t2);
      append_dev(div1, t3);
      if (if_block0)
        if_block0.m(div1, null);
      append_dev(div5, t4);
      append_dev(div5, div2);
      append_dev(div5, t6);
      append_dev(div5, div3);
      append_dev(div3, t7);
      append_dev(div3, t8);
      if (if_block1)
        if_block1.m(div3, null);
      append_dev(div5, t9);
      append_dev(div5, div4);
      append_dev(div4, button);
      append_dev(button, svg);
      append_dev(svg, circle);
      append_dev(svg, path);
      append_dev(div5, t10);
      if (!mounted) {
        dispose = [
          listen_dev(span, "click", click_handler_4, false, false, false, false),
          listen_dev(span, "touchend", touchend_handler_4, false, false, false, false),
          listen_dev(span, "keydown", keydown_handler, false, false, false, false),
          listen_dev(button, "click", click_handler_5, false, false, false, false),
          listen_dev(button, "touchend", touchend_handler_5, false, false, false, false)
        ];
        mounted = true;
      }
    },
    p: function update2(new_ctx, dirty) {
      ctx = new_ctx;
      if (dirty[0] & /*decks*/
      4 && t0_value !== (t0_value = formatDeckName(
        /*deck*/
        ctx[59]
      ) + ""))
        set_data_dev(t0, t0_value);
      if (dirty[0] & /*decks*/
      4 && span_title_value !== (span_title_value = "Click to review " + /*deck*/
      ctx[59].name)) {
        attr_dev(span, "title", span_title_value);
      }
      if (dirty[0] & /*decks*/
      4 && t2_value !== (t2_value = /*stats*/
      ctx[12].newCount + ""))
        set_data_dev(t2, t2_value);
      if (
        /*deck*/
        ctx[59].config.newCardsPerDay > 0
      ) {
        if (if_block0) {
        } else {
          if_block0 = create_if_block_3(ctx);
          if_block0.c();
          if_block0.m(div1, null);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (dirty[0] & /*decks*/
      4 && div1_title_value !== (div1_title_value = /*deck*/
      ctx[59].config.newCardsPerDay > 0 ? `${/*stats*/
      ctx[12].newCount} new cards available today (limit: ${/*deck*/
      ctx[59].config.newCardsPerDay})` : `${/*stats*/
      ctx[12].newCount} new cards due`)) {
        attr_dev(div1, "title", div1_title_value);
      }
      if (dirty[0] & /*getDeckStats, decks*/
      8196) {
        toggle_class(
          div1,
          "has-cards",
          /*stats*/
          ctx[12].newCount > 0
        );
      }
      if (dirty[0] & /*isUpdatingStats*/
      2048) {
        toggle_class(
          div1,
          "updating",
          /*isUpdatingStats*/
          ctx[11]
        );
      }
      if (dirty[0] & /*decks*/
      4) {
        toggle_class(
          div1,
          "has-limit",
          /*deck*/
          ctx[59].config.newCardsPerDay > 0
        );
      }
      if (dirty[0] & /*isUpdatingStats*/
      2048) {
        toggle_class(
          div2,
          "updating",
          /*isUpdatingStats*/
          ctx[11]
        );
      }
      if (dirty[0] & /*decks*/
      4 && t7_value !== (t7_value = /*stats*/
      ctx[12].dueCount + ""))
        set_data_dev(t7, t7_value);
      if (
        /*deck*/
        ctx[59].config.reviewCardsPerDay > 0
      ) {
        if (if_block1) {
        } else {
          if_block1 = create_if_block_2(ctx);
          if_block1.c();
          if_block1.m(div3, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
      if (dirty[0] & /*decks*/
      4 && div3_title_value !== (div3_title_value = /*deck*/
      ctx[59].config.reviewCardsPerDay > 0 ? `${/*stats*/
      ctx[12].dueCount} review cards available today (limit: ${/*deck*/
      ctx[59].config.reviewCardsPerDay})` : `${/*stats*/
      ctx[12].dueCount} review cards due`)) {
        attr_dev(div3, "title", div3_title_value);
      }
      if (dirty[0] & /*getDeckStats, decks*/
      8196) {
        toggle_class(
          div3,
          "has-cards",
          /*stats*/
          ctx[12].dueCount > 0
        );
      }
      if (dirty[0] & /*isUpdatingStats*/
      2048) {
        toggle_class(
          div3,
          "updating",
          /*isUpdatingStats*/
          ctx[11]
        );
      }
      if (dirty[0] & /*decks*/
      4) {
        toggle_class(
          div3,
          "has-limit",
          /*deck*/
          ctx[59].config.reviewCardsPerDay > 0
        );
      }
      if (dirty[0] & /*decks*/
      4 && button_aria_label_value !== (button_aria_label_value = "Configure " + /*deck*/
      ctx[59].name)) {
        attr_dev(button, "aria-label", button_aria_label_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div5);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block2.name,
    type: "each",
    source: "(441:16) {#each decks as deck}",
    ctx
  });
  return block;
}
function create_fragment4(ctx) {
  let div4;
  let div1;
  let h3;
  let t1;
  let div0;
  let button0;
  let svg0;
  let path0;
  let path1;
  let path2;
  let path3;
  let t2;
  let button1;
  let svg1;
  let path4;
  let path5;
  let path6;
  let t3;
  let div3;
  let div2;
  let input;
  let t4;
  let show_if;
  let t5;
  let t6;
  let reviewheatmap;
  let current;
  let mounted;
  let dispose;
  function select_block_type(ctx2, dirty) {
    if (dirty[0] & /*filterText, availableTags, inputFocused*/
    656)
      show_if = null;
    if (
      /*showSuggestions*/
      ctx2[6] && /*filteredSuggestions*/
      ctx2[8].length > 0
    )
      return create_if_block_4;
    if (show_if == null)
      show_if = !!(!/*filterText*/
      ctx2[4].trim() && /*availableTags*/
      ctx2[7].length > 0 && /*inputFocused*/
      ctx2[9]);
    if (show_if)
      return create_if_block_5;
  }
  let current_block_type = select_block_type(ctx, [-1, -1, -1]);
  let if_block0 = current_block_type && current_block_type(ctx);
  function select_block_type_1(ctx2, dirty) {
    if (
      /*allDecks*/
      ctx2[3].length === 0
    )
      return create_if_block2;
    if (
      /*decks*/
      ctx2[2].length === 0
    )
      return create_if_block_12;
    return create_else_block2;
  }
  let current_block_type_1 = select_block_type_1(ctx, [-1, -1, -1]);
  let if_block1 = current_block_type_1(ctx);
  let reviewheatmap_props = {
    getReviewCounts: (
      /*getReviewCounts*/
      ctx[0]
    )
  };
  reviewheatmap = new ReviewHeatmap_default({
    props: reviewheatmap_props,
    $$inline: true
  });
  ctx[47](reviewheatmap);
  const block = {
    c: function create() {
      div4 = element("div");
      div1 = element("div");
      h3 = element("h3");
      h3.textContent = "Flashcard Decks";
      t1 = space();
      div0 = element("div");
      button0 = element("button");
      svg0 = svg_element("svg");
      path0 = svg_element("path");
      path1 = svg_element("path");
      path2 = svg_element("path");
      path3 = svg_element("path");
      t2 = space();
      button1 = element("button");
      svg1 = svg_element("svg");
      path4 = svg_element("path");
      path5 = svg_element("path");
      path6 = svg_element("path");
      t3 = space();
      div3 = element("div");
      div2 = element("div");
      input = element("input");
      t4 = space();
      if (if_block0)
        if_block0.c();
      t5 = space();
      if_block1.c();
      t6 = space();
      create_component(reviewheatmap.$$.fragment);
      attr_dev(h3, "class", "panel-title svelte-1hyrijk");
      add_location(h3, file4, 302, 8, 9576);
      attr_dev(path0, "d", "M3 3v18h18");
      add_location(path0, file4, 321, 20, 10339);
      attr_dev(path1, "d", "M18 17V9");
      add_location(path1, file4, 322, 20, 10388);
      attr_dev(path2, "d", "M13 17V5");
      add_location(path2, file4, 323, 20, 10435);
      attr_dev(path3, "d", "M8 17v-3");
      add_location(path3, file4, 324, 20, 10482);
      attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg0, "width", "14");
      attr_dev(svg0, "height", "14");
      attr_dev(svg0, "viewBox", "0 0 24 24");
      attr_dev(svg0, "fill", "none");
      attr_dev(svg0, "stroke", "currentColor");
      attr_dev(svg0, "stroke-width", "2");
      attr_dev(svg0, "stroke-linecap", "round");
      attr_dev(svg0, "stroke-linejoin", "round");
      add_location(svg0, file4, 310, 16, 9940);
      attr_dev(button0, "class", "stats-button svelte-1hyrijk");
      attr_dev(button0, "title", "View Overall Statistics");
      add_location(button0, file4, 304, 12, 9670);
      attr_dev(path4, "d", "M23 4v6h-6");
      add_location(path4, file4, 345, 20, 11271);
      attr_dev(path5, "d", "M1 20v-6h6");
      add_location(path5, file4, 346, 20, 11320);
      attr_dev(path6, "d", "M3.51 9a9 9 0 0 1 14.85-3.36L23 10M1 14l4.64 4.36A9 9 0 0 0 20.49 15");
      add_location(path6, file4, 347, 20, 11369);
      attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
      attr_dev(svg1, "width", "14");
      attr_dev(svg1, "height", "14");
      attr_dev(svg1, "viewBox", "0 0 24 24");
      attr_dev(svg1, "fill", "none");
      attr_dev(svg1, "stroke", "currentColor");
      attr_dev(svg1, "stroke-width", "2");
      attr_dev(svg1, "stroke-linecap", "round");
      attr_dev(svg1, "stroke-linejoin", "round");
      attr_dev(svg1, "class", "svelte-1hyrijk");
      add_location(svg1, file4, 334, 16, 10872);
      attr_dev(button1, "class", "refresh-button svelte-1hyrijk");
      button1.disabled = /*isRefreshing*/
      ctx[10];
      toggle_class(
        button1,
        "refreshing",
        /*isRefreshing*/
        ctx[10]
      );
      add_location(button1, file4, 327, 12, 10566);
      attr_dev(div0, "class", "header-buttons svelte-1hyrijk");
      add_location(div0, file4, 303, 8, 9629);
      attr_dev(div1, "class", "panel-header svelte-1hyrijk");
      add_location(div1, file4, 301, 4, 9541);
      attr_dev(input, "type", "text");
      attr_dev(input, "class", "filter-input svelte-1hyrijk");
      attr_dev(input, "placeholder", "Filter by name or tag... (e.g., 'spanish', '#flashcards')");
      add_location(input, file4, 357, 12, 11657);
      attr_dev(div2, "class", "filter-container svelte-1hyrijk");
      add_location(div2, file4, 356, 8, 11614);
      attr_dev(div3, "class", "filter-section svelte-1hyrijk");
      add_location(div3, file4, 355, 4, 11577);
      attr_dev(div4, "class", "deck-list-panel svelte-1hyrijk");
      add_location(div4, file4, 300, 0, 9507);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div4, anchor);
      append_dev(div4, div1);
      append_dev(div1, h3);
      append_dev(div1, t1);
      append_dev(div1, div0);
      append_dev(div0, button0);
      append_dev(button0, svg0);
      append_dev(svg0, path0);
      append_dev(svg0, path1);
      append_dev(svg0, path2);
      append_dev(svg0, path3);
      append_dev(div0, t2);
      append_dev(div0, button1);
      append_dev(button1, svg1);
      append_dev(svg1, path4);
      append_dev(svg1, path5);
      append_dev(svg1, path6);
      append_dev(div4, t3);
      append_dev(div4, div3);
      append_dev(div3, div2);
      append_dev(div2, input);
      set_input_value(
        input,
        /*filterText*/
        ctx[4]
      );
      append_dev(div2, t4);
      if (if_block0)
        if_block0.m(div2, null);
      append_dev(div4, t5);
      if_block1.m(div4, null);
      append_dev(div4, t6);
      mount_component(reviewheatmap, div4, null);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            button0,
            "click",
            /*click_handler*/
            ctx[31],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button0,
            "touchend",
            /*touchend_handler*/
            ctx[32],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button1,
            "click",
            /*click_handler_1*/
            ctx[33],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button1,
            "touchend",
            /*touchend_handler_1*/
            ctx[34],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            input,
            "input",
            /*input_input_handler*/
            ctx[35]
          ),
          listen_dev(
            input,
            "input",
            /*handleFilterInput*/
            ctx[15],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            input,
            "focus",
            /*handleFilterFocus*/
            ctx[17],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            input,
            "blur",
            /*handleFilterBlur*/
            ctx[18],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update2(ctx2, dirty) {
      if (!current || dirty[0] & /*isRefreshing*/
      1024) {
        prop_dev(
          button1,
          "disabled",
          /*isRefreshing*/
          ctx2[10]
        );
      }
      if (!current || dirty[0] & /*isRefreshing*/
      1024) {
        toggle_class(
          button1,
          "refreshing",
          /*isRefreshing*/
          ctx2[10]
        );
      }
      if (dirty[0] & /*filterText*/
      16 && input.value !== /*filterText*/
      ctx2[4]) {
        set_input_value(
          input,
          /*filterText*/
          ctx2[4]
        );
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if (if_block0)
          if_block0.d(1);
        if_block0 = current_block_type && current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div2, null);
        }
      }
      if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx2, dirty)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type_1(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div4, t6);
        }
      }
      const reviewheatmap_changes = {};
      if (dirty[0] & /*getReviewCounts*/
      1)
        reviewheatmap_changes.getReviewCounts = /*getReviewCounts*/
        ctx2[0];
      reviewheatmap.$set(reviewheatmap_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(reviewheatmap.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(reviewheatmap.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div4);
      if (if_block0) {
        if_block0.d();
      }
      if_block1.d();
      ctx[47](null);
      destroy_component(reviewheatmap);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment4.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function formatDeckName(deck) {
  return deck.name;
}
function instance4($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("DeckListPanel", slots, []);
  let decks = [];
  let allDecks = [];
  let stats = /* @__PURE__ */ new Map();
  let filterText = "";
  let heatmapComponent;
  let showSuggestions = false;
  let availableTags = [];
  let filteredSuggestions = [];
  let inputFocused = false;
  let activeDropdown = null;
  let activeDropdownDeckId = null;
  let dropdownEventListeners = {};
  let { onDeckClick } = $$props;
  let { onRefresh } = $$props;
  let { onForceRefreshDeck } = $$props;
  let { getReviewCounts } = $$props;
  let { onUpdateDeckConfig } = $$props;
  let { onOpenStatistics } = $$props;
  let { plugin = null } = $$props;
  let isRefreshing = false;
  let isUpdatingStats = false;
  let lastEventTime = 0;
  let lastEventType = "";
  function getDeckStats(deckId) {
    var _a;
    return (_a = stats.get(deckId)) !== null && _a !== void 0 ? _a : {
      deckId,
      newCount: 0,
      dueCount: 0,
      totalCount: 0
    };
  }
  function handleRefresh() {
    return __awaiter(this, void 0, void 0, function* () {
      $$invalidate(10, isRefreshing = true);
      try {
        onRefresh();
        refreshHeatmap();
      } catch (error) {
        console.error("Error during refresh:", error);
      } finally {
        $$invalidate(10, isRefreshing = false);
      }
    });
  }
  function handleForceRefreshDeck(deck) {
    return __awaiter(this, void 0, void 0, function* () {
      $$invalidate(10, isRefreshing = true);
      try {
        yield onForceRefreshDeck(deck.filepath);
        refreshHeatmap();
      } catch (error) {
        console.error("Error during deck force refresh:", error);
      } finally {
        $$invalidate(10, isRefreshing = false);
      }
    });
  }
  function updateStatsById(deckId, newStats) {
    $$invalidate(11, isUpdatingStats = true);
    stats.set(deckId, newStats);
    $$invalidate(2, decks);
    $$invalidate(11, isUpdatingStats = false);
  }
  function updateStats(newStats) {
    $$invalidate(11, isUpdatingStats = true);
    $$invalidate(12, stats = newStats);
    $$invalidate(2, decks);
    $$invalidate(11, isUpdatingStats = false);
  }
  function updateDecks(newDecks) {
    $$invalidate(3, allDecks = newDecks);
    $$invalidate(7, availableTags = [...new Set(newDecks.map((deck) => deck.tag))].filter((tag) => tag));
    applyFilter();
  }
  function applyFilter() {
    if (!filterText.trim()) {
      $$invalidate(2, decks = allDecks);
    } else {
      const filter = filterText.toLowerCase();
      $$invalidate(2, decks = allDecks.filter((deck) => deck.name.toLowerCase().includes(filter) || deck.tag.toLowerCase().includes(filter)));
    }
  }
  function handleFilterInput(event) {
    const target = event.target;
    $$invalidate(4, filterText = target.value);
    updateSuggestions();
    applyFilter();
  }
  function updateSuggestions() {
    if (!filterText.trim()) {
      $$invalidate(6, showSuggestions = false);
      return;
    }
    const filter = filterText.toLowerCase();
    $$invalidate(8, filteredSuggestions = availableTags.filter((tag) => tag.toLowerCase().includes(filter) && tag.toLowerCase() !== filter));
    $$invalidate(6, showSuggestions = filteredSuggestions.length > 0);
  }
  function selectSuggestion(tag) {
    $$invalidate(4, filterText = tag);
    $$invalidate(6, showSuggestions = false);
    applyFilter();
  }
  function handleFilterFocus() {
    $$invalidate(9, inputFocused = true);
    if (filterText.trim()) {
      updateSuggestions();
    } else if (availableTags.length > 0) {
      $$invalidate(6, showSuggestions = true);
    }
  }
  function handleFilterBlur() {
    $$invalidate(9, inputFocused = false);
    setTimeout(
      () => {
        $$invalidate(6, showSuggestions = false);
      },
      200
    );
  }
  function handleDeckClick(deck) {
    onDeckClick(deck);
  }
  function refreshHeatmap() {
    if (heatmapComponent) {
      heatmapComponent.refresh();
    }
  }
  function handleConfigClick(deck, event) {
    event.stopPropagation();
    if (activeDropdown && activeDropdownDeckId === deck.id) {
      closeActiveDropdown();
      return;
    }
    closeActiveDropdown();
    const dropdown = document.createElement("div");
    dropdown.className = "deck-config-dropdown";
    const configOption = document.createElement("div");
    configOption.className = "dropdown-option";
    configOption.textContent = "Configure deck";
    configOption.onclick = () => {
      closeActiveDropdown();
      openDeckConfig(deck);
    };
    const forceRefreshOption = document.createElement("div");
    forceRefreshOption.className = "dropdown-option";
    forceRefreshOption.textContent = "Force refresh";
    forceRefreshOption.onclick = () => {
      closeActiveDropdown();
      handleForceRefreshDeck(deck);
    };
    const exportOption = document.createElement("div");
    exportOption.className = "dropdown-option";
    exportOption.textContent = "Export to Anki";
    exportOption.onclick = () => {
      closeActiveDropdown();
      openAnkiExport(deck);
    };
    dropdown.appendChild(configOption);
    dropdown.appendChild(forceRefreshOption);
    dropdown.appendChild(exportOption);
    const button = event.target;
    const rect = button.getBoundingClientRect();
    const viewportWidth = window.innerWidth;
    const viewportHeight = window.innerHeight;
    dropdown.style.position = "fixed";
    dropdown.style.zIndex = "1000";
    dropdown.style.visibility = "hidden";
    document.body.appendChild(dropdown);
    const dropdownRect = dropdown.getBoundingClientRect();
    let top = rect.bottom + 5;
    let left = rect.left;
    if (top + dropdownRect.height > viewportHeight - 10) {
      top = rect.top - dropdownRect.height - 5;
    }
    if (left + dropdownRect.width > viewportWidth - 10) {
      left = viewportWidth - dropdownRect.width - 10;
    }
    top = Math.max(10, top);
    left = Math.max(10, left);
    dropdown.style.top = `${top}px`;
    dropdown.style.left = `${left}px`;
    dropdown.style.visibility = "visible";
    activeDropdown = dropdown;
    activeDropdownDeckId = deck.id;
    dropdownEventListeners.click = (e) => {
      if (!dropdown.contains(e.target)) {
        closeActiveDropdown();
      }
    };
    dropdownEventListeners.scroll = closeActiveDropdown;
    dropdownEventListeners.resize = closeActiveDropdown;
    setTimeout(
      () => {
        if (dropdownEventListeners.click) {
          document.addEventListener("click", dropdownEventListeners.click);
        }
        if (dropdownEventListeners.scroll) {
          window.addEventListener("scroll", dropdownEventListeners.scroll, true);
        }
        if (dropdownEventListeners.resize) {
          window.addEventListener("resize", dropdownEventListeners.resize);
        }
      },
      0
    );
  }
  function closeActiveDropdown() {
    if (activeDropdown) {
      activeDropdown.remove();
      activeDropdown = null;
      activeDropdownDeckId = null;
      if (dropdownEventListeners.click) {
        document.removeEventListener("click", dropdownEventListeners.click);
      }
      if (dropdownEventListeners.scroll) {
        window.removeEventListener("scroll", dropdownEventListeners.scroll, true);
      }
      if (dropdownEventListeners.resize) {
        window.removeEventListener("resize", dropdownEventListeners.resize);
      }
      dropdownEventListeners = {};
    }
  }
  onDestroy(() => {
    closeActiveDropdown();
  });
  function openDeckConfig(deck) {
    if (!plugin) {
      console.warn("Plugin not available for deck config");
      return;
    }
    const modal = new DeckConfigModal(
      plugin,
      deck,
      (config) => __awaiter(this, void 0, void 0, function* () {
        if (onUpdateDeckConfig) {
          yield onUpdateDeckConfig(deck.id, config);
          const deckIndex = allDecks.findIndex((d) => d.id === deck.id);
          if (deckIndex !== -1) {
            $$invalidate(3, allDecks[deckIndex].config = config, allDecks);
            $$invalidate(3, allDecks = [...allDecks]);
          }
        }
      })
    );
    modal.open();
  }
  function openAnkiExport(deck) {
    if (!plugin) {
      console.warn("Plugin not available for Anki export");
      return;
    }
    const modal = new AnkiExportModal(plugin, deck);
    modal.open();
  }
  function handleTouchClick(callback, event) {
    const now = Date.now();
    const eventType = event.type;
    if (now - lastEventTime < 100 && lastEventType !== eventType) {
      return;
    }
    lastEventTime = now;
    lastEventType = eventType;
    callback();
  }
  onMount(() => {
  });
  $$self.$$.on_mount.push(function() {
    if (onDeckClick === void 0 && !("onDeckClick" in $$props || $$self.$$.bound[$$self.$$.props["onDeckClick"]])) {
      console_12.warn("<DeckListPanel> was created without expected prop 'onDeckClick'");
    }
    if (onRefresh === void 0 && !("onRefresh" in $$props || $$self.$$.bound[$$self.$$.props["onRefresh"]])) {
      console_12.warn("<DeckListPanel> was created without expected prop 'onRefresh'");
    }
    if (onForceRefreshDeck === void 0 && !("onForceRefreshDeck" in $$props || $$self.$$.bound[$$self.$$.props["onForceRefreshDeck"]])) {
      console_12.warn("<DeckListPanel> was created without expected prop 'onForceRefreshDeck'");
    }
    if (getReviewCounts === void 0 && !("getReviewCounts" in $$props || $$self.$$.bound[$$self.$$.props["getReviewCounts"]])) {
      console_12.warn("<DeckListPanel> was created without expected prop 'getReviewCounts'");
    }
    if (onUpdateDeckConfig === void 0 && !("onUpdateDeckConfig" in $$props || $$self.$$.bound[$$self.$$.props["onUpdateDeckConfig"]])) {
      console_12.warn("<DeckListPanel> was created without expected prop 'onUpdateDeckConfig'");
    }
    if (onOpenStatistics === void 0 && !("onOpenStatistics" in $$props || $$self.$$.bound[$$self.$$.props["onOpenStatistics"]])) {
      console_12.warn("<DeckListPanel> was created without expected prop 'onOpenStatistics'");
    }
  });
  const writable_props = [
    "onDeckClick",
    "onRefresh",
    "onForceRefreshDeck",
    "getReviewCounts",
    "onUpdateDeckConfig",
    "onOpenStatistics",
    "plugin"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_12.warn(`<DeckListPanel> was created with unknown prop '${key}'`);
  });
  const click_handler = (e) => handleTouchClick(onOpenStatistics, e);
  const touchend_handler = (e) => handleTouchClick(onOpenStatistics, e);
  const click_handler_1 = (e) => handleTouchClick(handleRefresh, e);
  const touchend_handler_1 = (e) => handleTouchClick(handleRefresh, e);
  function input_input_handler() {
    filterText = this.value;
    $$invalidate(4, filterText);
  }
  const mousedown_handler = (tag) => selectSuggestion(tag);
  const click_handler_2 = (tag, e) => handleTouchClick(() => selectSuggestion(tag), e);
  const touchend_handler_2 = (tag, e) => handleTouchClick(() => selectSuggestion(tag), e);
  const mousedown_handler_1 = (tag) => selectSuggestion(tag);
  const click_handler_3 = (tag, e) => handleTouchClick(() => selectSuggestion(tag), e);
  const touchend_handler_3 = (tag, e) => handleTouchClick(() => selectSuggestion(tag), e);
  const click_handler_4 = (deck, e) => handleTouchClick(() => handleDeckClick(deck), e);
  const touchend_handler_4 = (deck, e) => handleTouchClick(() => handleDeckClick(deck), e);
  const keydown_handler = (deck, e) => e.key === "Enter" && handleDeckClick(deck);
  const click_handler_5 = (deck, e) => handleTouchClick(() => handleConfigClick(deck, e), e);
  const touchend_handler_5 = (deck, e) => handleTouchClick(() => handleConfigClick(deck, e), e);
  function reviewheatmap_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      heatmapComponent = $$value;
      $$invalidate(5, heatmapComponent);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("onDeckClick" in $$props2)
      $$invalidate(22, onDeckClick = $$props2.onDeckClick);
    if ("onRefresh" in $$props2)
      $$invalidate(23, onRefresh = $$props2.onRefresh);
    if ("onForceRefreshDeck" in $$props2)
      $$invalidate(24, onForceRefreshDeck = $$props2.onForceRefreshDeck);
    if ("getReviewCounts" in $$props2)
      $$invalidate(0, getReviewCounts = $$props2.getReviewCounts);
    if ("onUpdateDeckConfig" in $$props2)
      $$invalidate(25, onUpdateDeckConfig = $$props2.onUpdateDeckConfig);
    if ("onOpenStatistics" in $$props2)
      $$invalidate(1, onOpenStatistics = $$props2.onOpenStatistics);
    if ("plugin" in $$props2)
      $$invalidate(26, plugin = $$props2.plugin);
  };
  $$self.$capture_state = () => ({
    __awaiter,
    onMount,
    onDestroy,
    ReviewHeatmap: ReviewHeatmap_default,
    DeckConfigModal,
    AnkiExportModal,
    decks,
    allDecks,
    stats,
    filterText,
    heatmapComponent,
    showSuggestions,
    availableTags,
    filteredSuggestions,
    inputFocused,
    activeDropdown,
    activeDropdownDeckId,
    dropdownEventListeners,
    onDeckClick,
    onRefresh,
    onForceRefreshDeck,
    getReviewCounts,
    onUpdateDeckConfig,
    onOpenStatistics,
    plugin,
    isRefreshing,
    isUpdatingStats,
    lastEventTime,
    lastEventType,
    getDeckStats,
    formatDeckName,
    handleRefresh,
    handleForceRefreshDeck,
    updateStatsById,
    updateStats,
    updateDecks,
    applyFilter,
    handleFilterInput,
    updateSuggestions,
    selectSuggestion,
    handleFilterFocus,
    handleFilterBlur,
    handleDeckClick,
    refreshHeatmap,
    handleConfigClick,
    closeActiveDropdown,
    openDeckConfig,
    openAnkiExport,
    handleTouchClick
  });
  $$self.$inject_state = ($$props2) => {
    if ("decks" in $$props2)
      $$invalidate(2, decks = $$props2.decks);
    if ("allDecks" in $$props2)
      $$invalidate(3, allDecks = $$props2.allDecks);
    if ("stats" in $$props2)
      $$invalidate(12, stats = $$props2.stats);
    if ("filterText" in $$props2)
      $$invalidate(4, filterText = $$props2.filterText);
    if ("heatmapComponent" in $$props2)
      $$invalidate(5, heatmapComponent = $$props2.heatmapComponent);
    if ("showSuggestions" in $$props2)
      $$invalidate(6, showSuggestions = $$props2.showSuggestions);
    if ("availableTags" in $$props2)
      $$invalidate(7, availableTags = $$props2.availableTags);
    if ("filteredSuggestions" in $$props2)
      $$invalidate(8, filteredSuggestions = $$props2.filteredSuggestions);
    if ("inputFocused" in $$props2)
      $$invalidate(9, inputFocused = $$props2.inputFocused);
    if ("activeDropdown" in $$props2)
      activeDropdown = $$props2.activeDropdown;
    if ("activeDropdownDeckId" in $$props2)
      activeDropdownDeckId = $$props2.activeDropdownDeckId;
    if ("dropdownEventListeners" in $$props2)
      dropdownEventListeners = $$props2.dropdownEventListeners;
    if ("onDeckClick" in $$props2)
      $$invalidate(22, onDeckClick = $$props2.onDeckClick);
    if ("onRefresh" in $$props2)
      $$invalidate(23, onRefresh = $$props2.onRefresh);
    if ("onForceRefreshDeck" in $$props2)
      $$invalidate(24, onForceRefreshDeck = $$props2.onForceRefreshDeck);
    if ("getReviewCounts" in $$props2)
      $$invalidate(0, getReviewCounts = $$props2.getReviewCounts);
    if ("onUpdateDeckConfig" in $$props2)
      $$invalidate(25, onUpdateDeckConfig = $$props2.onUpdateDeckConfig);
    if ("onOpenStatistics" in $$props2)
      $$invalidate(1, onOpenStatistics = $$props2.onOpenStatistics);
    if ("plugin" in $$props2)
      $$invalidate(26, plugin = $$props2.plugin);
    if ("isRefreshing" in $$props2)
      $$invalidate(10, isRefreshing = $$props2.isRefreshing);
    if ("isUpdatingStats" in $$props2)
      $$invalidate(11, isUpdatingStats = $$props2.isUpdatingStats);
    if ("lastEventTime" in $$props2)
      lastEventTime = $$props2.lastEventTime;
    if ("lastEventType" in $$props2)
      lastEventType = $$props2.lastEventType;
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    getReviewCounts,
    onOpenStatistics,
    decks,
    allDecks,
    filterText,
    heatmapComponent,
    showSuggestions,
    availableTags,
    filteredSuggestions,
    inputFocused,
    isRefreshing,
    isUpdatingStats,
    stats,
    getDeckStats,
    handleRefresh,
    handleFilterInput,
    selectSuggestion,
    handleFilterFocus,
    handleFilterBlur,
    handleDeckClick,
    handleConfigClick,
    handleTouchClick,
    onDeckClick,
    onRefresh,
    onForceRefreshDeck,
    onUpdateDeckConfig,
    plugin,
    updateStatsById,
    updateStats,
    updateDecks,
    refreshHeatmap,
    click_handler,
    touchend_handler,
    click_handler_1,
    touchend_handler_1,
    input_input_handler,
    mousedown_handler,
    click_handler_2,
    touchend_handler_2,
    mousedown_handler_1,
    click_handler_3,
    touchend_handler_3,
    click_handler_4,
    touchend_handler_4,
    keydown_handler,
    click_handler_5,
    touchend_handler_5,
    reviewheatmap_binding
  ];
}
var DeckListPanel = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(
      this,
      options,
      instance4,
      create_fragment4,
      safe_not_equal,
      {
        onDeckClick: 22,
        onRefresh: 23,
        onForceRefreshDeck: 24,
        getReviewCounts: 0,
        onUpdateDeckConfig: 25,
        onOpenStatistics: 1,
        plugin: 26,
        updateStatsById: 27,
        updateStats: 28,
        updateDecks: 29,
        refreshHeatmap: 30
      },
      null,
      [-1, -1, -1]
    );
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "DeckListPanel",
      options,
      id: create_fragment4.name
    });
  }
  get onDeckClick() {
    throw new Error("<DeckListPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set onDeckClick(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get onRefresh() {
    throw new Error("<DeckListPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set onRefresh(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get onForceRefreshDeck() {
    throw new Error("<DeckListPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set onForceRefreshDeck(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get getReviewCounts() {
    throw new Error("<DeckListPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set getReviewCounts(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get onUpdateDeckConfig() {
    throw new Error("<DeckListPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set onUpdateDeckConfig(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get onOpenStatistics() {
    throw new Error("<DeckListPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set onOpenStatistics(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get plugin() {
    throw new Error("<DeckListPanel>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set plugin(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get updateStatsById() {
    return this.$$.ctx[27];
  }
  set updateStatsById(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get updateStats() {
    return this.$$.ctx[28];
  }
  set updateStats(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get updateDecks() {
    return this.$$.ctx[29];
  }
  set updateDecks(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get refreshHeatmap() {
    return this.$$.ctx[30];
  }
  set refreshHeatmap(value) {
    throw new Error("<DeckListPanel>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var DeckListPanel_default = DeckListPanel;

// src/components/StatisticsModal.ts
var import_obsidian8 = require("obsidian");

// src/components/StatisticsUI.svelte
var import_obsidian7 = require("obsidian");
var { console: console_13 } = globals;
var file5 = "src/components/StatisticsUI.svelte";
function get_each_context3(ctx, list, i) {
  const child_ctx = ctx.slice();
  child_ctx[39] = list[i];
  child_ctx[42] = i;
  const constants_0 = (
    /*statistics*/
    child_ctx[2].forecast.indexOf(
      /*day*/
      child_ctx[39]
    )
  );
  child_ctx[40] = constants_0;
  return child_ctx;
}
function get_if_ctx(ctx) {
  const child_ctx = ctx.slice();
  const constants_0 = (
    /*statistics*/
    child_ctx[2].forecast.filter((day) => day.dueCount > 0).slice(0, 20)
  );
  child_ctx[37] = constants_0;
  const constants_1 = Math.max(.../*filteredForecast*/
  child_ctx[37].map((day) => day.dueCount));
  child_ctx[38] = constants_1;
  return child_ctx;
}
function create_else_block3(ctx) {
  var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s;
  let div2;
  let div0;
  let t0;
  let div1;
  let t1;
  let div19;
  let h30;
  let t3;
  let div18;
  let div5;
  let div3;
  let t4_value = (
    /*statistics*/
    (((_b = (_a = ctx[2]) == null ? void 0 : _a.cardStats) == null ? void 0 : _b.new) || 0) + ""
  );
  let t4;
  let t5;
  let div4;
  let t7;
  let div8;
  let div6;
  let t9;
  let div7;
  let t11;
  let div11;
  let div9;
  let t12_value = (
    /*statistics*/
    (((_d = (_c = ctx[2]) == null ? void 0 : _c.cardStats) == null ? void 0 : _d.review) || 0) + ""
  );
  let t12;
  let t13;
  let div10;
  let t15;
  let div14;
  let div12;
  let t16_value = (
    /*statistics*/
    (((_f = (_e = ctx[2]) == null ? void 0 : _e.cardStats) == null ? void 0 : _f.mature) || 0) + ""
  );
  let t16;
  let t17;
  let div13;
  let t19;
  let div17;
  let div15;
  let t21;
  let div16;
  let t23;
  let div27;
  let h31;
  let t25;
  let div26;
  let div22;
  let div20;
  let t26_value = (
    /*statistics*/
    (((_g = ctx[2]) == null ? void 0 : _g.averagePace) ? formatPace(
      /*statistics*/
      ctx[2].averagePace
    ) : "N/A") + ""
  );
  let t26;
  let t27;
  let div21;
  let t29;
  let div25;
  let div23;
  let t30_value = (
    /*statistics*/
    (((_h = ctx[2]) == null ? void 0 : _h.totalReviewTime) ? formatTime(
      /*statistics*/
      ctx[2].totalReviewTime
    ) : "N/A") + ""
  );
  let t30;
  let t31;
  let div24;
  let t33;
  let div28;
  let h32;
  let t35;
  let t36;
  let div29;
  let h33;
  let t38;
  let t39;
  let h34;
  let t41;
  let t42;
  let h35;
  let t44;
  let t45;
  let div73;
  let h36;
  let t47;
  let div62;
  let div33;
  let div30;
  let t48_value = (
    /*statistics*/
    (((_i = ctx[2]) == null ? void 0 : _i.retentionRate) || 0).toFixed(1) + ""
  );
  let t48;
  let t49;
  let t50;
  let div31;
  let t52;
  let div32;
  let t54;
  let div37;
  let div34;
  let t56;
  let div35;
  let t58;
  let div36;
  let t60;
  let div41;
  let div38;
  let t63;
  let div39;
  let t65;
  let div40;
  let t67;
  let div45;
  let div42;
  let t69;
  let div43;
  let t71;
  let div44;
  let t73;
  let div49;
  let div46;
  let t75;
  let div47;
  let t77;
  let div48;
  let t79;
  let div53;
  let div50;
  let t81;
  let div51;
  let t83;
  let div52;
  let t85;
  let div57;
  let div54;
  let t88;
  let div55;
  let t90;
  let div56;
  let t92;
  let div61;
  let div58;
  let t93_value = (
    /*statistics*/
    (((_k = (_j = ctx[2]) == null ? void 0 : _j.cardStats) == null ? void 0 : _k.new) || 0) + /*statistics*/
    (((_m = (_l = ctx[2]) == null ? void 0 : _l.cardStats) == null ? void 0 : _m.review) || 0) + /*statistics*/
    (((_o = (_n = ctx[2]) == null ? void 0 : _n.cardStats) == null ? void 0 : _o.mature) || 0) + ""
  );
  let t93;
  let t94;
  let div59;
  let t96;
  let div60;
  let t98;
  let h4;
  let t100;
  let div72;
  let div65;
  let div63;
  let t101_value = (
    /*statistics*/
    (((_q = (_p = ctx[2]) == null ? void 0 : _p.cardStats) == null ? void 0 : _q.new) || 0) + ""
  );
  let t101;
  let t102;
  let div64;
  let t104;
  let div68;
  let div66;
  let t106;
  let div67;
  let t108;
  let div71;
  let div69;
  let t109_value = (
    /*statistics*/
    (((_s = (_r = ctx[2]) == null ? void 0 : _r.cardStats) == null ? void 0 : _s.mature) || 0) + ""
  );
  let t109;
  let t110;
  let div70;
  let t112;
  let div74;
  let h37;
  let t114;
  let t115;
  let div75;
  let h38;
  let t117;
  let show_if;
  let t118;
  let div76;
  let h39;
  let t120;
  let p;
  let t122;
  let reviewheatmap;
  let t123;
  let div77;
  let button;
  let current;
  let mounted;
  let dispose;
  function select_block_type_1(ctx2, dirty) {
    if (
      /*todayStats*/
      ctx2[6]
    )
      return create_if_block_8;
    return create_else_block_6;
  }
  let current_block_type = select_block_type_1(ctx, [-1, -1]);
  let if_block0 = current_block_type(ctx);
  function select_block_type_2(ctx2, dirty) {
    if (
      /*weekStats*/
      ctx2[7] && /*weekStats*/
      ctx2[7].reviews > 0
    )
      return create_if_block_7;
    return create_else_block_5;
  }
  let current_block_type_1 = select_block_type_2(ctx, [-1, -1]);
  let if_block1 = current_block_type_1(ctx);
  function select_block_type_3(ctx2, dirty) {
    if (
      /*monthStats*/
      ctx2[8] && /*monthStats*/
      ctx2[8].reviews > 0
    )
      return create_if_block_6;
    return create_else_block_4;
  }
  let current_block_type_2 = select_block_type_3(ctx, [-1, -1]);
  let if_block2 = current_block_type_2(ctx);
  function select_block_type_4(ctx2, dirty) {
    if (
      /*yearStats*/
      ctx2[9] && /*yearStats*/
      ctx2[9].reviews > 0
    )
      return create_if_block_52;
    return create_else_block_3;
  }
  let current_block_type_3 = select_block_type_4(ctx, [-1, -1]);
  let if_block3 = current_block_type_3(ctx);
  function select_block_type_5(ctx2, dirty) {
    var _a2;
    if (
      /*statistics*/
      ((_a2 = ctx2[2]) == null ? void 0 : _a2.answerButtons) && /*statistics*/
      (ctx2[2].answerButtons.again > 0 || /*statistics*/
      ctx2[2].answerButtons.hard > 0 || /*statistics*/
      ctx2[2].answerButtons.good > 0 || /*statistics*/
      ctx2[2].answerButtons.easy > 0)
    )
      return create_if_block_42;
    return create_else_block_2;
  }
  let current_block_type_4 = select_block_type_5(ctx, [-1, -1]);
  let if_block4 = current_block_type_4(ctx);
  function select_block_type_6(ctx2, dirty) {
    var _a2;
    if (dirty[0] & /*statistics*/
    4)
      show_if = null;
    if (show_if == null)
      show_if = !!/*statistics*/
      (((_a2 = ctx2[2]) == null ? void 0 : _a2.forecast) && /*statistics*/
      ctx2[2].forecast.length > 0 && /*statistics*/
      ctx2[2].forecast.some(func2));
    if (show_if)
      return create_if_block_32;
    return create_else_block_1;
  }
  function select_block_ctx(ctx2, type) {
    if (type === create_if_block_32)
      return get_if_ctx(ctx2);
    return ctx2;
  }
  let current_block_type_5 = select_block_type_6(ctx, [-1, -1]);
  let if_block5 = current_block_type_5(select_block_ctx(ctx, current_block_type_5));
  let reviewheatmap_props = { getReviewCounts: (
    /*func_3*/
    ctx[22]
  ) };
  reviewheatmap = new ReviewHeatmap_default({
    props: reviewheatmap_props,
    $$inline: true
  });
  ctx[23](reviewheatmap);
  const block = {
    c: function create() {
      div2 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = space();
      div19 = element("div");
      h30 = element("h3");
      h30.textContent = "Current Status";
      t3 = space();
      div18 = element("div");
      div5 = element("div");
      div3 = element("div");
      t4 = text(t4_value);
      t5 = space();
      div4 = element("div");
      div4.textContent = "New Cards";
      t7 = space();
      div8 = element("div");
      div6 = element("div");
      div6.textContent = "0";
      t9 = space();
      div7 = element("div");
      div7.textContent = "Learning";
      t11 = space();
      div11 = element("div");
      div9 = element("div");
      t12 = text(t12_value);
      t13 = space();
      div10 = element("div");
      div10.textContent = "Review";
      t15 = space();
      div14 = element("div");
      div12 = element("div");
      t16 = text(t16_value);
      t17 = space();
      div13 = element("div");
      div13.textContent = "Mature";
      t19 = space();
      div17 = element("div");
      div15 = element("div");
      div15.textContent = `${/*getDueToday*/
      ctx[15]()}`;
      t21 = space();
      div16 = element("div");
      div16.textContent = "Due Today";
      t23 = space();
      div27 = element("div");
      h31 = element("h3");
      h31.textContent = "Review Pace";
      t25 = space();
      div26 = element("div");
      div22 = element("div");
      div20 = element("div");
      t26 = text(t26_value);
      t27 = space();
      div21 = element("div");
      div21.textContent = "Average per Card";
      t29 = space();
      div25 = element("div");
      div23 = element("div");
      t30 = text(t30_value);
      t31 = space();
      div24 = element("div");
      div24.textContent = "Total Review Time";
      t33 = space();
      div28 = element("div");
      h32 = element("h3");
      h32.textContent = "Today's Statistics";
      t35 = space();
      if_block0.c();
      t36 = space();
      div29 = element("div");
      h33 = element("h3");
      h33.textContent = "This Week";
      t38 = space();
      if_block1.c();
      t39 = space();
      h34 = element("h3");
      h34.textContent = "This Month";
      t41 = space();
      if_block2.c();
      t42 = space();
      h35 = element("h3");
      h35.textContent = "This Year";
      t44 = space();
      if_block3.c();
      t45 = space();
      div73 = element("div");
      h36 = element("h3");
      h36.textContent = "Deck Statistics & Metrics";
      t47 = space();
      div62 = element("div");
      div33 = element("div");
      div30 = element("div");
      t48 = text(t48_value);
      t49 = text("%");
      t50 = space();
      div31 = element("div");
      div31.textContent = "Retention Rate";
      t52 = space();
      div32 = element("div");
      div32.textContent = '% of reviews answered correctly (excluding "Again")';
      t54 = space();
      div37 = element("div");
      div34 = element("div");
      div34.textContent = `${/*calculateAverageEase*/
      ctx[13]()}`;
      t56 = space();
      div35 = element("div");
      div35.textContent = "Average Ease";
      t58 = space();
      div36 = element("div");
      div36.textContent = "Mean of ease button values";
      t60 = space();
      div41 = element("div");
      div38 = element("div");
      div38.textContent = `${/*calculateAverageInterval*/
      ctx[14]()}d`;
      t63 = space();
      div39 = element("div");
      div39.textContent = "Avg Interval";
      t65 = space();
      div40 = element("div");
      div40.textContent = "Mean interval of all review cards";
      t67 = space();
      div45 = element("div");
      div42 = element("div");
      div42.textContent = `${/*getDueToday*/
      ctx[15]()}`;
      t69 = space();
      div43 = element("div");
      div43.textContent = "Due Today";
      t71 = space();
      div44 = element("div");
      div44.textContent = "Number of cards due today";
      t73 = space();
      div49 = element("div");
      div46 = element("div");
      div46.textContent = `${/*getDueTomorrow*/
      ctx[16]()}`;
      t75 = space();
      div47 = element("div");
      div47.textContent = "Due Tomorrow";
      t77 = space();
      div48 = element("div");
      div48.textContent = "Number of cards due tomorrow";
      t79 = space();
      div53 = element("div");
      div50 = element("div");
      div50.textContent = "0";
      t81 = space();
      div51 = element("div");
      div51.textContent = "Learning Cards";
      t83 = space();
      div52 = element("div");
      div52.textContent = "Number of cards in the learning queue";
      t85 = space();
      div57 = element("div");
      div54 = element("div");
      div54.textContent = `${/*getMaturityRatio*/
      ctx[17]()}%`;
      t88 = space();
      div55 = element("div");
      div55.textContent = "Maturity Ratio";
      t90 = space();
      div56 = element("div");
      div56.textContent = "Mature cards \xF7 total cards";
      t92 = space();
      div61 = element("div");
      div58 = element("div");
      t93 = text(t93_value);
      t94 = space();
      div59 = element("div");
      div59.textContent = "Total Cards";
      t96 = space();
      div60 = element("div");
      div60.textContent = "All cards in collection";
      t98 = space();
      h4 = element("h4");
      h4.textContent = "Card Status Breakdown";
      t100 = space();
      div72 = element("div");
      div65 = element("div");
      div63 = element("div");
      t101 = text(t101_value);
      t102 = space();
      div64 = element("div");
      div64.textContent = "New Cards";
      t104 = space();
      div68 = element("div");
      div66 = element("div");
      div66.textContent = "0";
      t106 = space();
      div67 = element("div");
      div67.textContent = "Learning";
      t108 = space();
      div71 = element("div");
      div69 = element("div");
      t109 = text(t109_value);
      t110 = space();
      div70 = element("div");
      div70.textContent = "Mature";
      t112 = space();
      div74 = element("div");
      h37 = element("h3");
      h37.textContent = "Answer Button Usage";
      t114 = space();
      if_block4.c();
      t115 = space();
      div75 = element("div");
      h38 = element("h3");
      h38.textContent = "Review Load Forecast";
      t117 = space();
      if_block5.c();
      t118 = space();
      div76 = element("div");
      h39 = element("h3");
      h39.textContent = "Review Heatmap";
      t120 = space();
      p = element("p");
      p.textContent = "Daily review activity over time";
      t122 = space();
      create_component(reviewheatmap.$$.fragment);
      t123 = space();
      div77 = element("div");
      button = element("button");
      button.textContent = "Close";
      attr_dev(div0, "class", "svelte-dph41p");
      add_location(div0, file5, 292, 12, 10389);
      attr_dev(div1, "class", "svelte-dph41p");
      add_location(div1, file5, 293, 12, 10445);
      attr_dev(div2, "class", "filters svelte-dph41p");
      add_location(div2, file5, 291, 8, 10355);
      attr_dev(h30, "class", "svelte-dph41p");
      add_location(h30, file5, 298, 12, 10590);
      attr_dev(div3, "class", "stat-value svelte-dph41p");
      add_location(div3, file5, 301, 20, 10711);
      attr_dev(div4, "class", "stat-label svelte-dph41p");
      add_location(div4, file5, 304, 20, 10841);
      attr_dev(div5, "class", "stat-card svelte-dph41p");
      add_location(div5, file5, 300, 16, 10667);
      attr_dev(div6, "class", "stat-value svelte-dph41p");
      set_style(div6, "display", "none");
      add_location(div6, file5, 307, 20, 10964);
      attr_dev(div7, "class", "stat-label svelte-dph41p");
      set_style(div7, "display", "none");
      add_location(div7, file5, 308, 20, 11039);
      attr_dev(div8, "class", "stat-card svelte-dph41p");
      add_location(div8, file5, 306, 16, 10920);
      attr_dev(div9, "class", "stat-value svelte-dph41p");
      add_location(div9, file5, 313, 20, 11230);
      attr_dev(div10, "class", "stat-label svelte-dph41p");
      add_location(div10, file5, 316, 20, 11363);
      attr_dev(div11, "class", "stat-card svelte-dph41p");
      add_location(div11, file5, 312, 16, 11186);
      attr_dev(div12, "class", "stat-value svelte-dph41p");
      add_location(div12, file5, 319, 20, 11483);
      attr_dev(div13, "class", "stat-label svelte-dph41p");
      add_location(div13, file5, 322, 20, 11616);
      attr_dev(div14, "class", "stat-card svelte-dph41p");
      add_location(div14, file5, 318, 16, 11439);
      attr_dev(div15, "class", "stat-value svelte-dph41p");
      add_location(div15, file5, 325, 20, 11736);
      attr_dev(div16, "class", "stat-label svelte-dph41p");
      add_location(div16, file5, 326, 20, 11802);
      attr_dev(div17, "class", "stat-card svelte-dph41p");
      add_location(div17, file5, 324, 16, 11692);
      attr_dev(div18, "class", "stats-grid svelte-dph41p");
      add_location(div18, file5, 299, 12, 10626);
      attr_dev(div19, "class", "stats-section svelte-dph41p");
      add_location(div19, file5, 297, 8, 10550);
      attr_dev(h31, "class", "svelte-dph41p");
      add_location(h31, file5, 333, 12, 11981);
      attr_dev(div20, "class", "stat-value svelte-dph41p");
      add_location(div20, file5, 336, 20, 12099);
      attr_dev(div21, "class", "stat-label svelte-dph41p");
      add_location(div21, file5, 341, 20, 12322);
      attr_dev(div22, "class", "stat-card svelte-dph41p");
      add_location(div22, file5, 335, 16, 12055);
      attr_dev(div23, "class", "stat-value svelte-dph41p");
      add_location(div23, file5, 344, 20, 12452);
      attr_dev(div24, "class", "stat-label svelte-dph41p");
      add_location(div24, file5, 349, 20, 12683);
      attr_dev(div25, "class", "stat-card svelte-dph41p");
      add_location(div25, file5, 343, 16, 12408);
      attr_dev(div26, "class", "stats-grid svelte-dph41p");
      add_location(div26, file5, 334, 12, 12014);
      attr_dev(div27, "class", "stats-section svelte-dph41p");
      add_location(div27, file5, 332, 8, 11941);
      attr_dev(h32, "class", "svelte-dph41p");
      add_location(h32, file5, 356, 12, 12873);
      attr_dev(div28, "class", "stats-section svelte-dph41p");
      add_location(div28, file5, 355, 8, 12833);
      attr_dev(h33, "class", "svelte-dph41p");
      add_location(h33, file5, 399, 12, 14676);
      attr_dev(h34, "class", "svelte-dph41p");
      add_location(h34, file5, 425, 12, 15758);
      attr_dev(h35, "class", "svelte-dph41p");
      add_location(h35, file5, 451, 12, 16847);
      attr_dev(div29, "class", "stats-section svelte-dph41p");
      add_location(div29, file5, 398, 8, 14636);
      attr_dev(h36, "class", "svelte-dph41p");
      add_location(h36, file5, 480, 12, 18023);
      attr_dev(div30, "class", "metric-value svelte-dph41p");
      add_location(div30, file5, 483, 20, 18159);
      attr_dev(div31, "class", "metric-label svelte-dph41p");
      add_location(div31, file5, 486, 20, 18304);
      attr_dev(div32, "class", "metric-description svelte-dph41p");
      add_location(div32, file5, 487, 20, 18371);
      attr_dev(div33, "class", "metric-card svelte-dph41p");
      add_location(div33, file5, 482, 16, 18113);
      attr_dev(div34, "class", "metric-value svelte-dph41p");
      add_location(div34, file5, 492, 20, 18592);
      attr_dev(div35, "class", "metric-label svelte-dph41p");
      add_location(div35, file5, 493, 20, 18669);
      attr_dev(div36, "class", "metric-description svelte-dph41p");
      add_location(div36, file5, 494, 20, 18734);
      attr_dev(div37, "class", "metric-card svelte-dph41p");
      add_location(div37, file5, 491, 16, 18546);
      attr_dev(div38, "class", "metric-value svelte-dph41p");
      add_location(div38, file5, 499, 20, 18930);
      attr_dev(div39, "class", "metric-label svelte-dph41p");
      add_location(div39, file5, 502, 20, 19058);
      attr_dev(div40, "class", "metric-description svelte-dph41p");
      add_location(div40, file5, 503, 20, 19123);
      attr_dev(div41, "class", "metric-card svelte-dph41p");
      add_location(div41, file5, 498, 16, 18884);
      attr_dev(div42, "class", "metric-value svelte-dph41p");
      add_location(div42, file5, 508, 20, 19326);
      attr_dev(div43, "class", "metric-label svelte-dph41p");
      add_location(div43, file5, 509, 20, 19394);
      attr_dev(div44, "class", "metric-description svelte-dph41p");
      add_location(div44, file5, 510, 20, 19456);
      attr_dev(div45, "class", "metric-card svelte-dph41p");
      add_location(div45, file5, 507, 16, 19280);
      attr_dev(div46, "class", "metric-value svelte-dph41p");
      add_location(div46, file5, 515, 20, 19651);
      attr_dev(div47, "class", "metric-label svelte-dph41p");
      add_location(div47, file5, 516, 20, 19722);
      attr_dev(div48, "class", "metric-description svelte-dph41p");
      add_location(div48, file5, 517, 20, 19787);
      attr_dev(div49, "class", "metric-card svelte-dph41p");
      add_location(div49, file5, 514, 16, 19605);
      attr_dev(div50, "class", "metric-value svelte-dph41p");
      set_style(div50, "display", "none");
      add_location(div50, file5, 522, 20, 19985);
      attr_dev(div51, "class", "metric-label svelte-dph41p");
      set_style(div51, "display", "none");
      add_location(div51, file5, 523, 20, 20062);
      attr_dev(div52, "class", "metric-description svelte-dph41p");
      set_style(div52, "display", "none");
      add_location(div52, file5, 526, 20, 20198);
      attr_dev(div53, "class", "metric-card svelte-dph41p");
      add_location(div53, file5, 521, 16, 19939);
      attr_dev(div54, "class", "metric-value svelte-dph41p");
      add_location(div54, file5, 531, 20, 20428);
      attr_dev(div55, "class", "metric-label svelte-dph41p");
      add_location(div55, file5, 532, 20, 20502);
      attr_dev(div56, "class", "metric-description svelte-dph41p");
      add_location(div56, file5, 533, 20, 20569);
      attr_dev(div57, "class", "metric-card svelte-dph41p");
      add_location(div57, file5, 530, 16, 20382);
      attr_dev(div58, "class", "metric-value svelte-dph41p");
      add_location(div58, file5, 538, 20, 20765);
      attr_dev(div59, "class", "metric-label svelte-dph41p");
      add_location(div59, file5, 543, 20, 21033);
      attr_dev(div60, "class", "metric-description svelte-dph41p");
      add_location(div60, file5, 544, 20, 21097);
      attr_dev(div61, "class", "metric-card svelte-dph41p");
      add_location(div61, file5, 537, 16, 20719);
      attr_dev(div62, "class", "metrics-grid svelte-dph41p");
      add_location(div62, file5, 481, 12, 18070);
      attr_dev(h4, "class", "svelte-dph41p");
      add_location(h4, file5, 550, 12, 21260);
      attr_dev(div63, "class", "stat-value svelte-dph41p");
      add_location(div63, file5, 553, 20, 21388);
      attr_dev(div64, "class", "stat-label svelte-dph41p");
      add_location(div64, file5, 556, 20, 21518);
      attr_dev(div65, "class", "stat-card svelte-dph41p");
      add_location(div65, file5, 552, 16, 21344);
      attr_dev(div66, "class", "stat-value svelte-dph41p");
      set_style(div66, "display", "none");
      add_location(div66, file5, 559, 20, 21641);
      attr_dev(div67, "class", "stat-label svelte-dph41p");
      set_style(div67, "display", "none");
      add_location(div67, file5, 560, 20, 21716);
      attr_dev(div68, "class", "stat-card svelte-dph41p");
      add_location(div68, file5, 558, 16, 21597);
      attr_dev(div69, "class", "stat-value svelte-dph41p");
      add_location(div69, file5, 565, 20, 21907);
      attr_dev(div70, "class", "stat-label svelte-dph41p");
      add_location(div70, file5, 568, 20, 22040);
      attr_dev(div71, "class", "stat-card svelte-dph41p");
      add_location(div71, file5, 564, 16, 21863);
      attr_dev(div72, "class", "stats-grid svelte-dph41p");
      add_location(div72, file5, 551, 12, 21303);
      attr_dev(div73, "class", "stats-section svelte-dph41p");
      add_location(div73, file5, 479, 8, 17983);
      attr_dev(h37, "class", "svelte-dph41p");
      add_location(h37, file5, 575, 12, 22220);
      attr_dev(div74, "class", "stats-section svelte-dph41p");
      add_location(div74, file5, 574, 8, 22180);
      attr_dev(h38, "class", "svelte-dph41p");
      add_location(h38, file5, 655, 12, 26241);
      attr_dev(div75, "class", "stats-section svelte-dph41p");
      add_location(div75, file5, 654, 8, 26201);
      attr_dev(h39, "class", "svelte-dph41p");
      add_location(h39, file5, 708, 12, 28628);
      add_location(p, file5, 709, 12, 28664);
      attr_dev(div76, "class", "stats-section svelte-dph41p");
      add_location(div76, file5, 707, 8, 28588);
      attr_dev(button, "class", "close-button svelte-dph41p");
      add_location(button, file5, 719, 12, 28987);
      attr_dev(div77, "class", "modal-actions svelte-dph41p");
      add_location(div77, file5, 718, 8, 28947);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div2, anchor);
      append_dev(div2, div0);
      ctx[20](div0);
      append_dev(div2, t0);
      append_dev(div2, div1);
      ctx[21](div1);
      insert_dev(target, t1, anchor);
      insert_dev(target, div19, anchor);
      append_dev(div19, h30);
      append_dev(div19, t3);
      append_dev(div19, div18);
      append_dev(div18, div5);
      append_dev(div5, div3);
      append_dev(div3, t4);
      append_dev(div5, t5);
      append_dev(div5, div4);
      append_dev(div18, t7);
      append_dev(div18, div8);
      append_dev(div8, div6);
      append_dev(div8, t9);
      append_dev(div8, div7);
      append_dev(div18, t11);
      append_dev(div18, div11);
      append_dev(div11, div9);
      append_dev(div9, t12);
      append_dev(div11, t13);
      append_dev(div11, div10);
      append_dev(div18, t15);
      append_dev(div18, div14);
      append_dev(div14, div12);
      append_dev(div12, t16);
      append_dev(div14, t17);
      append_dev(div14, div13);
      append_dev(div18, t19);
      append_dev(div18, div17);
      append_dev(div17, div15);
      append_dev(div17, t21);
      append_dev(div17, div16);
      insert_dev(target, t23, anchor);
      insert_dev(target, div27, anchor);
      append_dev(div27, h31);
      append_dev(div27, t25);
      append_dev(div27, div26);
      append_dev(div26, div22);
      append_dev(div22, div20);
      append_dev(div20, t26);
      append_dev(div22, t27);
      append_dev(div22, div21);
      append_dev(div26, t29);
      append_dev(div26, div25);
      append_dev(div25, div23);
      append_dev(div23, t30);
      append_dev(div25, t31);
      append_dev(div25, div24);
      insert_dev(target, t33, anchor);
      insert_dev(target, div28, anchor);
      append_dev(div28, h32);
      append_dev(div28, t35);
      if_block0.m(div28, null);
      insert_dev(target, t36, anchor);
      insert_dev(target, div29, anchor);
      append_dev(div29, h33);
      append_dev(div29, t38);
      if_block1.m(div29, null);
      append_dev(div29, t39);
      append_dev(div29, h34);
      append_dev(div29, t41);
      if_block2.m(div29, null);
      append_dev(div29, t42);
      append_dev(div29, h35);
      append_dev(div29, t44);
      if_block3.m(div29, null);
      insert_dev(target, t45, anchor);
      insert_dev(target, div73, anchor);
      append_dev(div73, h36);
      append_dev(div73, t47);
      append_dev(div73, div62);
      append_dev(div62, div33);
      append_dev(div33, div30);
      append_dev(div30, t48);
      append_dev(div30, t49);
      append_dev(div33, t50);
      append_dev(div33, div31);
      append_dev(div33, t52);
      append_dev(div33, div32);
      append_dev(div62, t54);
      append_dev(div62, div37);
      append_dev(div37, div34);
      append_dev(div37, t56);
      append_dev(div37, div35);
      append_dev(div37, t58);
      append_dev(div37, div36);
      append_dev(div62, t60);
      append_dev(div62, div41);
      append_dev(div41, div38);
      append_dev(div41, t63);
      append_dev(div41, div39);
      append_dev(div41, t65);
      append_dev(div41, div40);
      append_dev(div62, t67);
      append_dev(div62, div45);
      append_dev(div45, div42);
      append_dev(div45, t69);
      append_dev(div45, div43);
      append_dev(div45, t71);
      append_dev(div45, div44);
      append_dev(div62, t73);
      append_dev(div62, div49);
      append_dev(div49, div46);
      append_dev(div49, t75);
      append_dev(div49, div47);
      append_dev(div49, t77);
      append_dev(div49, div48);
      append_dev(div62, t79);
      append_dev(div62, div53);
      append_dev(div53, div50);
      append_dev(div53, t81);
      append_dev(div53, div51);
      append_dev(div53, t83);
      append_dev(div53, div52);
      append_dev(div62, t85);
      append_dev(div62, div57);
      append_dev(div57, div54);
      append_dev(div57, t88);
      append_dev(div57, div55);
      append_dev(div57, t90);
      append_dev(div57, div56);
      append_dev(div62, t92);
      append_dev(div62, div61);
      append_dev(div61, div58);
      append_dev(div58, t93);
      append_dev(div61, t94);
      append_dev(div61, div59);
      append_dev(div61, t96);
      append_dev(div61, div60);
      append_dev(div73, t98);
      append_dev(div73, h4);
      append_dev(div73, t100);
      append_dev(div73, div72);
      append_dev(div72, div65);
      append_dev(div65, div63);
      append_dev(div63, t101);
      append_dev(div65, t102);
      append_dev(div65, div64);
      append_dev(div72, t104);
      append_dev(div72, div68);
      append_dev(div68, div66);
      append_dev(div68, t106);
      append_dev(div68, div67);
      append_dev(div72, t108);
      append_dev(div72, div71);
      append_dev(div71, div69);
      append_dev(div69, t109);
      append_dev(div71, t110);
      append_dev(div71, div70);
      insert_dev(target, t112, anchor);
      insert_dev(target, div74, anchor);
      append_dev(div74, h37);
      append_dev(div74, t114);
      if_block4.m(div74, null);
      insert_dev(target, t115, anchor);
      insert_dev(target, div75, anchor);
      append_dev(div75, h38);
      append_dev(div75, t117);
      if_block5.m(div75, null);
      insert_dev(target, t118, anchor);
      insert_dev(target, div76, anchor);
      append_dev(div76, h39);
      append_dev(div76, t120);
      append_dev(div76, p);
      append_dev(div76, t122);
      mount_component(reviewheatmap, div76, null);
      insert_dev(target, t123, anchor);
      insert_dev(target, div77, anchor);
      append_dev(div77, button);
      current = true;
      if (!mounted) {
        dispose = [
          listen_dev(
            button,
            "click",
            /*click_handler_1*/
            ctx[24],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button,
            "touchend",
            /*touchend_handler_1*/
            ctx[25],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: function update2(ctx2, dirty) {
      var _a2, _b2, _c2, _d2, _e2, _f2, _g2, _h2, _i2, _j2, _k2, _l2, _m2, _n2, _o2, _p2, _q2, _r2, _s2;
      if ((!current || dirty[0] & /*statistics*/
      4) && t4_value !== (t4_value = /*statistics*/
      (((_b2 = (_a2 = ctx2[2]) == null ? void 0 : _a2.cardStats) == null ? void 0 : _b2.new) || 0) + ""))
        set_data_dev(t4, t4_value);
      if ((!current || dirty[0] & /*statistics*/
      4) && t12_value !== (t12_value = /*statistics*/
      (((_d2 = (_c2 = ctx2[2]) == null ? void 0 : _c2.cardStats) == null ? void 0 : _d2.review) || 0) + ""))
        set_data_dev(t12, t12_value);
      if ((!current || dirty[0] & /*statistics*/
      4) && t16_value !== (t16_value = /*statistics*/
      (((_f2 = (_e2 = ctx2[2]) == null ? void 0 : _e2.cardStats) == null ? void 0 : _f2.mature) || 0) + ""))
        set_data_dev(t16, t16_value);
      if ((!current || dirty[0] & /*statistics*/
      4) && t26_value !== (t26_value = /*statistics*/
      (((_g2 = ctx2[2]) == null ? void 0 : _g2.averagePace) ? formatPace(
        /*statistics*/
        ctx2[2].averagePace
      ) : "N/A") + ""))
        set_data_dev(t26, t26_value);
      if ((!current || dirty[0] & /*statistics*/
      4) && t30_value !== (t30_value = /*statistics*/
      (((_h2 = ctx2[2]) == null ? void 0 : _h2.totalReviewTime) ? formatTime(
        /*statistics*/
        ctx2[2].totalReviewTime
      ) : "N/A") + ""))
        set_data_dev(t30, t30_value);
      if (current_block_type === (current_block_type = select_block_type_1(ctx2, dirty)) && if_block0) {
        if_block0.p(ctx2, dirty);
      } else {
        if_block0.d(1);
        if_block0 = current_block_type(ctx2);
        if (if_block0) {
          if_block0.c();
          if_block0.m(div28, null);
        }
      }
      if (current_block_type_1 === (current_block_type_1 = select_block_type_2(ctx2, dirty)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type_1(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div29, t39);
        }
      }
      if (current_block_type_2 === (current_block_type_2 = select_block_type_3(ctx2, dirty)) && if_block2) {
        if_block2.p(ctx2, dirty);
      } else {
        if_block2.d(1);
        if_block2 = current_block_type_2(ctx2);
        if (if_block2) {
          if_block2.c();
          if_block2.m(div29, t42);
        }
      }
      if (current_block_type_3 === (current_block_type_3 = select_block_type_4(ctx2, dirty)) && if_block3) {
        if_block3.p(ctx2, dirty);
      } else {
        if_block3.d(1);
        if_block3 = current_block_type_3(ctx2);
        if (if_block3) {
          if_block3.c();
          if_block3.m(div29, null);
        }
      }
      if ((!current || dirty[0] & /*statistics*/
      4) && t48_value !== (t48_value = /*statistics*/
      (((_i2 = ctx2[2]) == null ? void 0 : _i2.retentionRate) || 0).toFixed(1) + ""))
        set_data_dev(t48, t48_value);
      if ((!current || dirty[0] & /*statistics*/
      4) && t93_value !== (t93_value = /*statistics*/
      (((_k2 = (_j2 = ctx2[2]) == null ? void 0 : _j2.cardStats) == null ? void 0 : _k2.new) || 0) + /*statistics*/
      (((_m2 = (_l2 = ctx2[2]) == null ? void 0 : _l2.cardStats) == null ? void 0 : _m2.review) || 0) + /*statistics*/
      (((_o2 = (_n2 = ctx2[2]) == null ? void 0 : _n2.cardStats) == null ? void 0 : _o2.mature) || 0) + ""))
        set_data_dev(t93, t93_value);
      if ((!current || dirty[0] & /*statistics*/
      4) && t101_value !== (t101_value = /*statistics*/
      (((_q2 = (_p2 = ctx2[2]) == null ? void 0 : _p2.cardStats) == null ? void 0 : _q2.new) || 0) + ""))
        set_data_dev(t101, t101_value);
      if ((!current || dirty[0] & /*statistics*/
      4) && t109_value !== (t109_value = /*statistics*/
      (((_s2 = (_r2 = ctx2[2]) == null ? void 0 : _r2.cardStats) == null ? void 0 : _s2.mature) || 0) + ""))
        set_data_dev(t109, t109_value);
      if (current_block_type_4 === (current_block_type_4 = select_block_type_5(ctx2, dirty)) && if_block4) {
        if_block4.p(ctx2, dirty);
      } else {
        if_block4.d(1);
        if_block4 = current_block_type_4(ctx2);
        if (if_block4) {
          if_block4.c();
          if_block4.m(div74, null);
        }
      }
      if (current_block_type_5 === (current_block_type_5 = select_block_type_6(ctx2, dirty)) && if_block5) {
        if_block5.p(select_block_ctx(ctx2, current_block_type_5), dirty);
      } else {
        if_block5.d(1);
        if_block5 = current_block_type_5(select_block_ctx(ctx2, current_block_type_5));
        if (if_block5) {
          if_block5.c();
          if_block5.m(div75, null);
        }
      }
      const reviewheatmap_changes = {};
      if (dirty[0] & /*plugin*/
      1)
        reviewheatmap_changes.getReviewCounts = /*func_3*/
        ctx2[22];
      reviewheatmap.$set(reviewheatmap_changes);
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(reviewheatmap.$$.fragment, local);
      current = true;
    },
    o: function outro(local) {
      transition_out(reviewheatmap.$$.fragment, local);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div2);
      ctx[20](null);
      ctx[21](null);
      if (detaching)
        detach_dev(t1);
      if (detaching)
        detach_dev(div19);
      if (detaching)
        detach_dev(t23);
      if (detaching)
        detach_dev(div27);
      if (detaching)
        detach_dev(t33);
      if (detaching)
        detach_dev(div28);
      if_block0.d();
      if (detaching)
        detach_dev(t36);
      if (detaching)
        detach_dev(div29);
      if_block1.d();
      if_block2.d();
      if_block3.d();
      if (detaching)
        detach_dev(t45);
      if (detaching)
        detach_dev(div73);
      if (detaching)
        detach_dev(t112);
      if (detaching)
        detach_dev(div74);
      if_block4.d();
      if (detaching)
        detach_dev(t115);
      if (detaching)
        detach_dev(div75);
      if_block5.d();
      if (detaching)
        detach_dev(t118);
      if (detaching)
        detach_dev(div76);
      ctx[23](null);
      destroy_component(reviewheatmap);
      if (detaching)
        detach_dev(t123);
      if (detaching)
        detach_dev(div77);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block3.name,
    type: "else",
    source: "(291:4) {:else}",
    ctx
  });
  return block;
}
function create_if_block_22(ctx) {
  let div;
  let p;
  let t1;
  let button;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div = element("div");
      p = element("p");
      p.textContent = "Failed to load statistics";
      t1 = space();
      button = element("button");
      button.textContent = "Retry";
      add_location(p, file5, 281, 12, 10029);
      attr_dev(button, "class", "retry-button svelte-dph41p");
      add_location(button, file5, 282, 12, 10074);
      attr_dev(div, "class", "error svelte-dph41p");
      add_location(div, file5, 280, 8, 9997);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p);
      append_dev(div, t1);
      append_dev(div, button);
      if (!mounted) {
        dispose = [
          listen_dev(
            button,
            "click",
            /*click_handler*/
            ctx[18],
            false,
            false,
            false,
            false
          ),
          listen_dev(
            button,
            "touchend",
            /*touchend_handler*/
            ctx[19],
            false,
            false,
            false,
            false
          )
        ];
        mounted = true;
      }
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_22.name,
    type: "if",
    source: "(280:26) ",
    ctx
  });
  return block;
}
function create_if_block_13(ctx) {
  let div;
  const block = {
    c: function create() {
      div = element("div");
      div.textContent = "Loading statistics...";
      attr_dev(div, "class", "loading svelte-dph41p");
      add_location(div, file5, 278, 8, 9913);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
    },
    p: noop,
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_13.name,
    type: "if",
    source: "(278:4) {#if loading}",
    ctx
  });
  return block;
}
function create_else_block_6(ctx) {
  let div;
  let p0;
  let t1;
  let p1;
  const block = {
    c: function create() {
      div = element("div");
      p0 = element("p");
      p0.textContent = "No reviews today yet.";
      t1 = space();
      p1 = element("p");
      p1.textContent = "Start reviewing flashcards to see your daily statistics\n                        here!";
      attr_dev(p0, "class", "svelte-dph41p");
      add_location(p0, file5, 388, 20, 14321);
      attr_dev(p1, "class", "help-text svelte-dph41p");
      add_location(p1, file5, 389, 20, 14370);
      attr_dev(div, "class", "no-data-message svelte-dph41p");
      add_location(div, file5, 387, 16, 14271);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p0);
      append_dev(div, t1);
      append_dev(div, p1);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block_6.name,
    type: "else",
    source: "(387:12) {:else}",
    ctx
  });
  return block;
}
function create_if_block_8(ctx) {
  let div6;
  let div2;
  let div0;
  let t0_value = (
    /*todayStats*/
    ctx[6].reviews + ""
  );
  let t0;
  let t1;
  let div1;
  let t3;
  let div5;
  let div3;
  let t4_value = formatTime(
    /*todayStats*/
    ctx[6].timeSpent
  ) + "";
  let t4;
  let t5;
  let div4;
  let t7;
  let h4;
  let t9;
  let div16;
  let div9;
  let div7;
  let t10_value = (
    /*todayStats*/
    ctx[6].newCards + ""
  );
  let t10;
  let t11;
  let div8;
  let t13;
  let div12;
  let div10;
  let t15;
  let div11;
  let t17;
  let div15;
  let div13;
  let t18_value = (
    /*todayStats*/
    ctx[6].reviewCards + ""
  );
  let t18;
  let t19;
  let div14;
  const block = {
    c: function create() {
      div6 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      div1.textContent = "Cards Studied";
      t3 = space();
      div5 = element("div");
      div3 = element("div");
      t4 = text(t4_value);
      t5 = space();
      div4 = element("div");
      div4.textContent = "Time Spent";
      t7 = space();
      h4 = element("h4");
      h4.textContent = "Breakdown by Card Type";
      t9 = space();
      div16 = element("div");
      div9 = element("div");
      div7 = element("div");
      t10 = text(t10_value);
      t11 = space();
      div8 = element("div");
      div8.textContent = "New Cards";
      t13 = space();
      div12 = element("div");
      div10 = element("div");
      div10.textContent = "0";
      t15 = space();
      div11 = element("div");
      div11.textContent = "Learning";
      t17 = space();
      div15 = element("div");
      div13 = element("div");
      t18 = text(t18_value);
      t19 = space();
      div14 = element("div");
      div14.textContent = "Review";
      attr_dev(div0, "class", "stat-value svelte-dph41p");
      add_location(div0, file5, 360, 24, 13039);
      attr_dev(div1, "class", "stat-label svelte-dph41p");
      add_location(div1, file5, 361, 24, 13114);
      attr_dev(div2, "class", "stat-card svelte-dph41p");
      add_location(div2, file5, 359, 20, 12991);
      attr_dev(div3, "class", "stat-value svelte-dph41p");
      add_location(div3, file5, 364, 24, 13253);
      attr_dev(div4, "class", "stat-label svelte-dph41p");
      add_location(div4, file5, 367, 24, 13396);
      attr_dev(div5, "class", "stat-card svelte-dph41p");
      add_location(div5, file5, 363, 20, 13205);
      attr_dev(div6, "class", "stats-grid svelte-dph41p");
      add_location(div6, file5, 358, 16, 12946);
      attr_dev(h4, "class", "svelte-dph41p");
      add_location(h4, file5, 371, 16, 13504);
      attr_dev(div7, "class", "stat-value svelte-dph41p");
      add_location(div7, file5, 374, 24, 13645);
      attr_dev(div8, "class", "stat-label svelte-dph41p");
      add_location(div8, file5, 375, 24, 13721);
      attr_dev(div9, "class", "stat-card svelte-dph41p");
      add_location(div9, file5, 373, 20, 13597);
      attr_dev(div10, "class", "stat-value svelte-dph41p");
      add_location(div10, file5, 378, 24, 13879);
      attr_dev(div11, "class", "stat-label svelte-dph41p");
      add_location(div11, file5, 379, 24, 13935);
      attr_dev(div12, "class", "stat-card svelte-dph41p");
      set_style(div12, "display", "none");
      add_location(div12, file5, 377, 20, 13808);
      attr_dev(div13, "class", "stat-value svelte-dph41p");
      add_location(div13, file5, 382, 24, 14069);
      attr_dev(div14, "class", "stat-label svelte-dph41p");
      add_location(div14, file5, 383, 24, 14148);
      attr_dev(div15, "class", "stat-card svelte-dph41p");
      add_location(div15, file5, 381, 20, 14021);
      attr_dev(div16, "class", "stats-grid svelte-dph41p");
      add_location(div16, file5, 372, 16, 13552);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div6, anchor);
      append_dev(div6, div2);
      append_dev(div2, div0);
      append_dev(div0, t0);
      append_dev(div2, t1);
      append_dev(div2, div1);
      append_dev(div6, t3);
      append_dev(div6, div5);
      append_dev(div5, div3);
      append_dev(div3, t4);
      append_dev(div5, t5);
      append_dev(div5, div4);
      insert_dev(target, t7, anchor);
      insert_dev(target, h4, anchor);
      insert_dev(target, t9, anchor);
      insert_dev(target, div16, anchor);
      append_dev(div16, div9);
      append_dev(div9, div7);
      append_dev(div7, t10);
      append_dev(div9, t11);
      append_dev(div9, div8);
      append_dev(div16, t13);
      append_dev(div16, div12);
      append_dev(div12, div10);
      append_dev(div12, t15);
      append_dev(div12, div11);
      append_dev(div16, t17);
      append_dev(div16, div15);
      append_dev(div15, div13);
      append_dev(div13, t18);
      append_dev(div15, t19);
      append_dev(div15, div14);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*todayStats*/
      64 && t0_value !== (t0_value = /*todayStats*/
      ctx2[6].reviews + ""))
        set_data_dev(t0, t0_value);
      if (dirty[0] & /*todayStats*/
      64 && t4_value !== (t4_value = formatTime(
        /*todayStats*/
        ctx2[6].timeSpent
      ) + ""))
        set_data_dev(t4, t4_value);
      if (dirty[0] & /*todayStats*/
      64 && t10_value !== (t10_value = /*todayStats*/
      ctx2[6].newCards + ""))
        set_data_dev(t10, t10_value);
      if (dirty[0] & /*todayStats*/
      64 && t18_value !== (t18_value = /*todayStats*/
      ctx2[6].reviewCards + ""))
        set_data_dev(t18, t18_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div6);
      if (detaching)
        detach_dev(t7);
      if (detaching)
        detach_dev(h4);
      if (detaching)
        detach_dev(t9);
      if (detaching)
        detach_dev(div16);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_8.name,
    type: "if",
    source: "(358:12) {#if todayStats}",
    ctx
  });
  return block;
}
function create_else_block_5(ctx) {
  let div;
  let p;
  const block = {
    c: function create() {
      div = element("div");
      p = element("p");
      p.textContent = "No reviews this week yet.";
      attr_dev(p, "class", "svelte-dph41p");
      add_location(p, file5, 421, 20, 15671);
      attr_dev(div, "class", "no-data-message svelte-dph41p");
      add_location(div, file5, 420, 16, 15621);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block_5.name,
    type: "else",
    source: "(420:12) {:else}",
    ctx
  });
  return block;
}
function create_if_block_7(ctx) {
  let div9;
  let div2;
  let div0;
  let t0_value = (
    /*weekStats*/
    ctx[7].reviews + ""
  );
  let t0;
  let t1;
  let div1;
  let t3;
  let div5;
  let div3;
  let t4_value = formatTime(
    /*weekStats*/
    ctx[7].timeSpent
  ) + "";
  let t4;
  let t5;
  let div4;
  let t7;
  let div8;
  let div6;
  let t8_value = (
    /*weekStats*/
    ctx[7].correctRate.toFixed(1) + ""
  );
  let t8;
  let t9;
  let t10;
  let div7;
  const block = {
    c: function create() {
      div9 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      div1.textContent = "Cards Studied";
      t3 = space();
      div5 = element("div");
      div3 = element("div");
      t4 = text(t4_value);
      t5 = space();
      div4 = element("div");
      div4.textContent = "Time Spent";
      t7 = space();
      div8 = element("div");
      div6 = element("div");
      t8 = text(t8_value);
      t9 = text("%");
      t10 = space();
      div7 = element("div");
      div7.textContent = "Success Rate";
      attr_dev(div0, "class", "stat-value svelte-dph41p");
      add_location(div0, file5, 403, 24, 14857);
      attr_dev(div1, "class", "stat-label svelte-dph41p");
      add_location(div1, file5, 404, 24, 14931);
      attr_dev(div2, "class", "stat-card svelte-dph41p");
      add_location(div2, file5, 402, 20, 14809);
      attr_dev(div3, "class", "stat-value svelte-dph41p");
      add_location(div3, file5, 407, 24, 15070);
      attr_dev(div4, "class", "stat-label svelte-dph41p");
      add_location(div4, file5, 410, 24, 15212);
      attr_dev(div5, "class", "stat-card svelte-dph41p");
      add_location(div5, file5, 406, 20, 15022);
      attr_dev(div6, "class", "stat-value svelte-dph41p");
      add_location(div6, file5, 413, 24, 15348);
      attr_dev(div7, "class", "stat-label svelte-dph41p");
      add_location(div7, file5, 416, 24, 15492);
      attr_dev(div8, "class", "stat-card svelte-dph41p");
      add_location(div8, file5, 412, 20, 15300);
      attr_dev(div9, "class", "stats-grid svelte-dph41p");
      add_location(div9, file5, 401, 16, 14764);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div9, anchor);
      append_dev(div9, div2);
      append_dev(div2, div0);
      append_dev(div0, t0);
      append_dev(div2, t1);
      append_dev(div2, div1);
      append_dev(div9, t3);
      append_dev(div9, div5);
      append_dev(div5, div3);
      append_dev(div3, t4);
      append_dev(div5, t5);
      append_dev(div5, div4);
      append_dev(div9, t7);
      append_dev(div9, div8);
      append_dev(div8, div6);
      append_dev(div6, t8);
      append_dev(div6, t9);
      append_dev(div8, t10);
      append_dev(div8, div7);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*weekStats*/
      128 && t0_value !== (t0_value = /*weekStats*/
      ctx2[7].reviews + ""))
        set_data_dev(t0, t0_value);
      if (dirty[0] & /*weekStats*/
      128 && t4_value !== (t4_value = formatTime(
        /*weekStats*/
        ctx2[7].timeSpent
      ) + ""))
        set_data_dev(t4, t4_value);
      if (dirty[0] & /*weekStats*/
      128 && t8_value !== (t8_value = /*weekStats*/
      ctx2[7].correctRate.toFixed(1) + ""))
        set_data_dev(t8, t8_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div9);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_7.name,
    type: "if",
    source: "(401:12) {#if weekStats && weekStats.reviews > 0}",
    ctx
  });
  return block;
}
function create_else_block_4(ctx) {
  let div;
  let p;
  const block = {
    c: function create() {
      div = element("div");
      p = element("p");
      p.textContent = "No reviews this month yet.";
      attr_dev(p, "class", "svelte-dph41p");
      add_location(p, file5, 447, 20, 16759);
      attr_dev(div, "class", "no-data-message svelte-dph41p");
      add_location(div, file5, 446, 16, 16709);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block_4.name,
    type: "else",
    source: "(446:12) {:else}",
    ctx
  });
  return block;
}
function create_if_block_6(ctx) {
  let div9;
  let div2;
  let div0;
  let t0_value = (
    /*monthStats*/
    ctx[8].reviews + ""
  );
  let t0;
  let t1;
  let div1;
  let t3;
  let div5;
  let div3;
  let t4_value = formatTime(
    /*monthStats*/
    ctx[8].timeSpent
  ) + "";
  let t4;
  let t5;
  let div4;
  let t7;
  let div8;
  let div6;
  let t8_value = (
    /*monthStats*/
    ctx[8].correctRate.toFixed(1) + ""
  );
  let t8;
  let t9;
  let t10;
  let div7;
  const block = {
    c: function create() {
      div9 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      div1.textContent = "Cards Studied";
      t3 = space();
      div5 = element("div");
      div3 = element("div");
      t4 = text(t4_value);
      t5 = space();
      div4 = element("div");
      div4.textContent = "Time Spent";
      t7 = space();
      div8 = element("div");
      div6 = element("div");
      t8 = text(t8_value);
      t9 = text("%");
      t10 = space();
      div7 = element("div");
      div7.textContent = "Success Rate";
      attr_dev(div0, "class", "stat-value svelte-dph41p");
      add_location(div0, file5, 429, 24, 15942);
      attr_dev(div1, "class", "stat-label svelte-dph41p");
      add_location(div1, file5, 430, 24, 16017);
      attr_dev(div2, "class", "stat-card svelte-dph41p");
      add_location(div2, file5, 428, 20, 15894);
      attr_dev(div3, "class", "stat-value svelte-dph41p");
      add_location(div3, file5, 433, 24, 16156);
      attr_dev(div4, "class", "stat-label svelte-dph41p");
      add_location(div4, file5, 436, 24, 16299);
      attr_dev(div5, "class", "stat-card svelte-dph41p");
      add_location(div5, file5, 432, 20, 16108);
      attr_dev(div6, "class", "stat-value svelte-dph41p");
      add_location(div6, file5, 439, 24, 16435);
      attr_dev(div7, "class", "stat-label svelte-dph41p");
      add_location(div7, file5, 442, 24, 16580);
      attr_dev(div8, "class", "stat-card svelte-dph41p");
      add_location(div8, file5, 438, 20, 16387);
      attr_dev(div9, "class", "stats-grid svelte-dph41p");
      add_location(div9, file5, 427, 16, 15849);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div9, anchor);
      append_dev(div9, div2);
      append_dev(div2, div0);
      append_dev(div0, t0);
      append_dev(div2, t1);
      append_dev(div2, div1);
      append_dev(div9, t3);
      append_dev(div9, div5);
      append_dev(div5, div3);
      append_dev(div3, t4);
      append_dev(div5, t5);
      append_dev(div5, div4);
      append_dev(div9, t7);
      append_dev(div9, div8);
      append_dev(div8, div6);
      append_dev(div6, t8);
      append_dev(div6, t9);
      append_dev(div8, t10);
      append_dev(div8, div7);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*monthStats*/
      256 && t0_value !== (t0_value = /*monthStats*/
      ctx2[8].reviews + ""))
        set_data_dev(t0, t0_value);
      if (dirty[0] & /*monthStats*/
      256 && t4_value !== (t4_value = formatTime(
        /*monthStats*/
        ctx2[8].timeSpent
      ) + ""))
        set_data_dev(t4, t4_value);
      if (dirty[0] & /*monthStats*/
      256 && t8_value !== (t8_value = /*monthStats*/
      ctx2[8].correctRate.toFixed(1) + ""))
        set_data_dev(t8, t8_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div9);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_6.name,
    type: "if",
    source: "(427:12) {#if monthStats && monthStats.reviews > 0}",
    ctx
  });
  return block;
}
function create_else_block_3(ctx) {
  let div;
  let p;
  const block = {
    c: function create() {
      div = element("div");
      p = element("p");
      p.textContent = "No reviews this year yet.";
      attr_dev(p, "class", "svelte-dph41p");
      add_location(p, file5, 473, 20, 17842);
      attr_dev(div, "class", "no-data-message svelte-dph41p");
      add_location(div, file5, 472, 16, 17792);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block_3.name,
    type: "else",
    source: "(472:12) {:else}",
    ctx
  });
  return block;
}
function create_if_block_52(ctx) {
  let div9;
  let div2;
  let div0;
  let t0_value = (
    /*yearStats*/
    ctx[9].reviews + ""
  );
  let t0;
  let t1;
  let div1;
  let t3;
  let div5;
  let div3;
  let t4_value = formatTime(
    /*yearStats*/
    ctx[9].timeSpent
  ) + "";
  let t4;
  let t5;
  let div4;
  let t7;
  let div8;
  let div6;
  let t8_value = (
    /*yearStats*/
    ctx[9].correctRate.toFixed(1) + ""
  );
  let t8;
  let t9;
  let t10;
  let div7;
  const block = {
    c: function create() {
      div9 = element("div");
      div2 = element("div");
      div0 = element("div");
      t0 = text(t0_value);
      t1 = space();
      div1 = element("div");
      div1.textContent = "Cards Studied";
      t3 = space();
      div5 = element("div");
      div3 = element("div");
      t4 = text(t4_value);
      t5 = space();
      div4 = element("div");
      div4.textContent = "Time Spent";
      t7 = space();
      div8 = element("div");
      div6 = element("div");
      t8 = text(t8_value);
      t9 = text("%");
      t10 = space();
      div7 = element("div");
      div7.textContent = "Success Rate";
      attr_dev(div0, "class", "stat-value svelte-dph41p");
      add_location(div0, file5, 455, 24, 17028);
      attr_dev(div1, "class", "stat-label svelte-dph41p");
      add_location(div1, file5, 456, 24, 17102);
      attr_dev(div2, "class", "stat-card svelte-dph41p");
      add_location(div2, file5, 454, 20, 16980);
      attr_dev(div3, "class", "stat-value svelte-dph41p");
      add_location(div3, file5, 459, 24, 17241);
      attr_dev(div4, "class", "stat-label svelte-dph41p");
      add_location(div4, file5, 462, 24, 17383);
      attr_dev(div5, "class", "stat-card svelte-dph41p");
      add_location(div5, file5, 458, 20, 17193);
      attr_dev(div6, "class", "stat-value svelte-dph41p");
      add_location(div6, file5, 465, 24, 17519);
      attr_dev(div7, "class", "stat-label svelte-dph41p");
      add_location(div7, file5, 468, 24, 17663);
      attr_dev(div8, "class", "stat-card svelte-dph41p");
      add_location(div8, file5, 464, 20, 17471);
      attr_dev(div9, "class", "stats-grid svelte-dph41p");
      add_location(div9, file5, 453, 16, 16935);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div9, anchor);
      append_dev(div9, div2);
      append_dev(div2, div0);
      append_dev(div0, t0);
      append_dev(div2, t1);
      append_dev(div2, div1);
      append_dev(div9, t3);
      append_dev(div9, div5);
      append_dev(div5, div3);
      append_dev(div3, t4);
      append_dev(div5, t5);
      append_dev(div5, div4);
      append_dev(div9, t7);
      append_dev(div9, div8);
      append_dev(div8, div6);
      append_dev(div6, t8);
      append_dev(div6, t9);
      append_dev(div8, t10);
      append_dev(div8, div7);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*yearStats*/
      512 && t0_value !== (t0_value = /*yearStats*/
      ctx2[9].reviews + ""))
        set_data_dev(t0, t0_value);
      if (dirty[0] & /*yearStats*/
      512 && t4_value !== (t4_value = formatTime(
        /*yearStats*/
        ctx2[9].timeSpent
      ) + ""))
        set_data_dev(t4, t4_value);
      if (dirty[0] & /*yearStats*/
      512 && t8_value !== (t8_value = /*yearStats*/
      ctx2[9].correctRate.toFixed(1) + ""))
        set_data_dev(t8, t8_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div9);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_52.name,
    type: "if",
    source: "(453:12) {#if yearStats && yearStats.reviews > 0}",
    ctx
  });
  return block;
}
function create_else_block_2(ctx) {
  let div;
  let p0;
  let t1;
  let p1;
  const block = {
    c: function create() {
      div = element("div");
      p0 = element("p");
      p0.textContent = "No answer button data available yet.";
      t1 = space();
      p1 = element("p");
      p1.textContent = "Complete some reviews to see answer button statistics.";
      attr_dev(p0, "class", "svelte-dph41p");
      add_location(p0, file5, 645, 20, 25920);
      attr_dev(p1, "class", "help-text svelte-dph41p");
      add_location(p1, file5, 646, 20, 25984);
      attr_dev(div, "class", "no-data-message svelte-dph41p");
      add_location(div, file5, 644, 16, 25870);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p0);
      append_dev(div, t1);
      append_dev(div, p1);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block_2.name,
    type: "else",
    source: "(644:12) {:else}",
    ctx
  });
  return block;
}
function create_if_block_42(ctx) {
  let div16;
  let div3;
  let div0;
  let t1;
  let div1;
  let t2_value = (
    /*statistics*/
    ctx[2].answerButtons.again + ""
  );
  let t2;
  let t3;
  let div2;
  let t4_value = (
    /*statistics*/
    (ctx[2].answerButtons.again / /*statistics*/
    (ctx[2].answerButtons.again + /*statistics*/
    ctx[2].answerButtons.hard + /*statistics*/
    ctx[2].answerButtons.good + /*statistics*/
    ctx[2].answerButtons.easy) * 100).toFixed(1) + ""
  );
  let t4;
  let t5;
  let t6;
  let div7;
  let div4;
  let t8;
  let div5;
  let t9_value = (
    /*statistics*/
    ctx[2].answerButtons.hard + ""
  );
  let t9;
  let t10;
  let div6;
  let t11_value = (
    /*statistics*/
    (ctx[2].answerButtons.hard / /*statistics*/
    (ctx[2].answerButtons.again + /*statistics*/
    ctx[2].answerButtons.hard + /*statistics*/
    ctx[2].answerButtons.good + /*statistics*/
    ctx[2].answerButtons.easy) * 100).toFixed(1) + ""
  );
  let t11;
  let t12;
  let t13;
  let div11;
  let div8;
  let t15;
  let div9;
  let t16_value = (
    /*statistics*/
    ctx[2].answerButtons.good + ""
  );
  let t16;
  let t17;
  let div10;
  let t18_value = (
    /*statistics*/
    (ctx[2].answerButtons.good / /*statistics*/
    (ctx[2].answerButtons.again + /*statistics*/
    ctx[2].answerButtons.hard + /*statistics*/
    ctx[2].answerButtons.good + /*statistics*/
    ctx[2].answerButtons.easy) * 100).toFixed(1) + ""
  );
  let t18;
  let t19;
  let t20;
  let div15;
  let div12;
  let t22;
  let div13;
  let t23_value = (
    /*statistics*/
    ctx[2].answerButtons.easy + ""
  );
  let t23;
  let t24;
  let div14;
  let t25_value = (
    /*statistics*/
    (ctx[2].answerButtons.easy / /*statistics*/
    (ctx[2].answerButtons.again + /*statistics*/
    ctx[2].answerButtons.hard + /*statistics*/
    ctx[2].answerButtons.good + /*statistics*/
    ctx[2].answerButtons.easy) * 100).toFixed(1) + ""
  );
  let t25;
  let t26;
  const block = {
    c: function create() {
      div16 = element("div");
      div3 = element("div");
      div0 = element("div");
      div0.textContent = "Again";
      t1 = space();
      div1 = element("div");
      t2 = text(t2_value);
      t3 = space();
      div2 = element("div");
      t4 = text(t4_value);
      t5 = text("%");
      t6 = space();
      div7 = element("div");
      div4 = element("div");
      div4.textContent = "Hard";
      t8 = space();
      div5 = element("div");
      t9 = text(t9_value);
      t10 = space();
      div6 = element("div");
      t11 = text(t11_value);
      t12 = text("%");
      t13 = space();
      div11 = element("div");
      div8 = element("div");
      div8.textContent = "Good";
      t15 = space();
      div9 = element("div");
      t16 = text(t16_value);
      t17 = space();
      div10 = element("div");
      t18 = text(t18_value);
      t19 = text("%");
      t20 = space();
      div15 = element("div");
      div12 = element("div");
      div12.textContent = "Easy";
      t22 = space();
      div13 = element("div");
      t23 = text(t23_value);
      t24 = space();
      div14 = element("div");
      t25 = text(t25_value);
      t26 = text("%");
      attr_dev(div0, "class", "button-label svelte-dph41p");
      add_location(div0, file5, 579, 24, 22562);
      attr_dev(div1, "class", "button-count svelte-dph41p");
      add_location(div1, file5, 580, 24, 22624);
      attr_dev(div2, "class", "button-percentage svelte-dph41p");
      add_location(div2, file5, 583, 24, 22767);
      attr_dev(div3, "class", "button-bar again svelte-dph41p");
      add_location(div3, file5, 578, 20, 22507);
      attr_dev(div4, "class", "button-label svelte-dph41p");
      add_location(div4, file5, 595, 24, 23395);
      attr_dev(div5, "class", "button-count svelte-dph41p");
      add_location(div5, file5, 596, 24, 23456);
      attr_dev(div6, "class", "button-percentage svelte-dph41p");
      add_location(div6, file5, 599, 24, 23598);
      attr_dev(div7, "class", "button-bar hard svelte-dph41p");
      add_location(div7, file5, 594, 20, 23341);
      attr_dev(div8, "class", "button-label svelte-dph41p");
      add_location(div8, file5, 611, 24, 24225);
      attr_dev(div9, "class", "button-count svelte-dph41p");
      add_location(div9, file5, 612, 24, 24286);
      attr_dev(div10, "class", "button-percentage svelte-dph41p");
      add_location(div10, file5, 615, 24, 24428);
      attr_dev(div11, "class", "button-bar good svelte-dph41p");
      add_location(div11, file5, 610, 20, 24171);
      attr_dev(div12, "class", "button-label svelte-dph41p");
      add_location(div12, file5, 627, 24, 25055);
      attr_dev(div13, "class", "button-count svelte-dph41p");
      add_location(div13, file5, 628, 24, 25116);
      attr_dev(div14, "class", "button-percentage svelte-dph41p");
      add_location(div14, file5, 631, 24, 25258);
      attr_dev(div15, "class", "button-bar easy svelte-dph41p");
      add_location(div15, file5, 626, 20, 25001);
      attr_dev(div16, "class", "button-stats svelte-dph41p");
      add_location(div16, file5, 577, 16, 22460);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div16, anchor);
      append_dev(div16, div3);
      append_dev(div3, div0);
      append_dev(div3, t1);
      append_dev(div3, div1);
      append_dev(div1, t2);
      append_dev(div3, t3);
      append_dev(div3, div2);
      append_dev(div2, t4);
      append_dev(div2, t5);
      append_dev(div16, t6);
      append_dev(div16, div7);
      append_dev(div7, div4);
      append_dev(div7, t8);
      append_dev(div7, div5);
      append_dev(div5, t9);
      append_dev(div7, t10);
      append_dev(div7, div6);
      append_dev(div6, t11);
      append_dev(div6, t12);
      append_dev(div16, t13);
      append_dev(div16, div11);
      append_dev(div11, div8);
      append_dev(div11, t15);
      append_dev(div11, div9);
      append_dev(div9, t16);
      append_dev(div11, t17);
      append_dev(div11, div10);
      append_dev(div10, t18);
      append_dev(div10, t19);
      append_dev(div16, t20);
      append_dev(div16, div15);
      append_dev(div15, div12);
      append_dev(div15, t22);
      append_dev(div15, div13);
      append_dev(div13, t23);
      append_dev(div15, t24);
      append_dev(div15, div14);
      append_dev(div14, t25);
      append_dev(div14, t26);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*statistics*/
      4 && t2_value !== (t2_value = /*statistics*/
      ctx2[2].answerButtons.again + ""))
        set_data_dev(t2, t2_value);
      if (dirty[0] & /*statistics*/
      4 && t4_value !== (t4_value = /*statistics*/
      (ctx2[2].answerButtons.again / /*statistics*/
      (ctx2[2].answerButtons.again + /*statistics*/
      ctx2[2].answerButtons.hard + /*statistics*/
      ctx2[2].answerButtons.good + /*statistics*/
      ctx2[2].answerButtons.easy) * 100).toFixed(1) + ""))
        set_data_dev(t4, t4_value);
      if (dirty[0] & /*statistics*/
      4 && t9_value !== (t9_value = /*statistics*/
      ctx2[2].answerButtons.hard + ""))
        set_data_dev(t9, t9_value);
      if (dirty[0] & /*statistics*/
      4 && t11_value !== (t11_value = /*statistics*/
      (ctx2[2].answerButtons.hard / /*statistics*/
      (ctx2[2].answerButtons.again + /*statistics*/
      ctx2[2].answerButtons.hard + /*statistics*/
      ctx2[2].answerButtons.good + /*statistics*/
      ctx2[2].answerButtons.easy) * 100).toFixed(1) + ""))
        set_data_dev(t11, t11_value);
      if (dirty[0] & /*statistics*/
      4 && t16_value !== (t16_value = /*statistics*/
      ctx2[2].answerButtons.good + ""))
        set_data_dev(t16, t16_value);
      if (dirty[0] & /*statistics*/
      4 && t18_value !== (t18_value = /*statistics*/
      (ctx2[2].answerButtons.good / /*statistics*/
      (ctx2[2].answerButtons.again + /*statistics*/
      ctx2[2].answerButtons.hard + /*statistics*/
      ctx2[2].answerButtons.good + /*statistics*/
      ctx2[2].answerButtons.easy) * 100).toFixed(1) + ""))
        set_data_dev(t18, t18_value);
      if (dirty[0] & /*statistics*/
      4 && t23_value !== (t23_value = /*statistics*/
      ctx2[2].answerButtons.easy + ""))
        set_data_dev(t23, t23_value);
      if (dirty[0] & /*statistics*/
      4 && t25_value !== (t25_value = /*statistics*/
      (ctx2[2].answerButtons.easy / /*statistics*/
      (ctx2[2].answerButtons.again + /*statistics*/
      ctx2[2].answerButtons.hard + /*statistics*/
      ctx2[2].answerButtons.good + /*statistics*/
      ctx2[2].answerButtons.easy) * 100).toFixed(1) + ""))
        set_data_dev(t25, t25_value);
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div16);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_42.name,
    type: "if",
    source: "(577:12) {#if statistics?.answerButtons && (statistics.answerButtons.again > 0 || statistics.answerButtons.hard > 0 || statistics.answerButtons.good > 0 || statistics.answerButtons.easy > 0)}",
    ctx
  });
  return block;
}
function create_else_block_1(ctx) {
  let div;
  let p0;
  let t1;
  let p1;
  const block = {
    c: function create() {
      div = element("div");
      p0 = element("p");
      p0.textContent = "No upcoming reviews scheduled.";
      t1 = space();
      p1 = element("p");
      p1.textContent = "Add flashcards to your decks to see future review\n                        forecasts.";
      attr_dev(p0, "class", "svelte-dph41p");
      add_location(p0, file5, 697, 20, 28277);
      attr_dev(p1, "class", "help-text svelte-dph41p");
      add_location(p1, file5, 698, 20, 28335);
      attr_dev(div, "class", "no-data-message svelte-dph41p");
      add_location(div, file5, 696, 16, 28227);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p0);
      append_dev(div, t1);
      append_dev(div, p1);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block_1.name,
    type: "else",
    source: "(696:12) {:else}",
    ctx
  });
  return block;
}
function create_if_block_32(ctx) {
  let div;
  let t0;
  let p;
  let each_value = (
    /*filteredForecast*/
    ctx[37]
  );
  validate_each_argument(each_value);
  let each_blocks = [];
  for (let i = 0; i < each_value.length; i += 1) {
    each_blocks[i] = create_each_block3(get_each_context3(ctx, each_value, i));
  }
  const block = {
    c: function create() {
      div = element("div");
      for (let i = 0; i < each_blocks.length; i += 1) {
        each_blocks[i].c();
      }
      t0 = space();
      p = element("p");
      p.textContent = "Showing days with scheduled reviews based on FSRS intervals.";
      attr_dev(div, "class", "forecast-chart svelte-dph41p");
      add_location(div, file5, 663, 16, 26703);
      attr_dev(p, "class", "forecast-note svelte-dph41p");
      add_location(p, file5, 692, 16, 28063);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      for (let i = 0; i < each_blocks.length; i += 1) {
        if (each_blocks[i]) {
          each_blocks[i].m(div, null);
        }
      }
      insert_dev(target, t0, anchor);
      insert_dev(target, p, anchor);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*statistics*/
      4) {
        each_value = /*filteredForecast*/
        ctx2[37];
        validate_each_argument(each_value);
        let i;
        for (i = 0; i < each_value.length; i += 1) {
          const child_ctx = get_each_context3(ctx2, each_value, i);
          if (each_blocks[i]) {
            each_blocks[i].p(child_ctx, dirty);
          } else {
            each_blocks[i] = create_each_block3(child_ctx);
            each_blocks[i].c();
            each_blocks[i].m(div, null);
          }
        }
        for (; i < each_blocks.length; i += 1) {
          each_blocks[i].d(1);
        }
        each_blocks.length = each_value.length;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
      destroy_each(each_blocks, detaching);
      if (detaching)
        detach_dev(t0);
      if (detaching)
        detach_dev(p);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_32.name,
    type: "if",
    source: "(657:12) {#if statistics?.forecast && statistics.forecast.length > 0 && statistics.forecast.some((day) => day.dueCount > 0)}",
    ctx
  });
  return block;
}
function create_each_block3(ctx) {
  let div3;
  let div0;
  let t0;
  let div1;
  let t1_value = (
    /*originalIndex*/
    ctx[40] + ""
  );
  let t1;
  let t2;
  let div2;
  let t3_value = (
    /*day*/
    ctx[39].dueCount + ""
  );
  let t3;
  let t4;
  let div3_title_value;
  const block = {
    c: function create() {
      div3 = element("div");
      div0 = element("div");
      t0 = space();
      div1 = element("div");
      t1 = text(t1_value);
      t2 = space();
      div2 = element("div");
      t3 = text(t3_value);
      t4 = space();
      attr_dev(div0, "class", "bar svelte-dph41p");
      set_style(div0, "height", calculateBarHeight(
        /*day*/
        ctx[39].dueCount,
        /*maxDueCount*/
        ctx[38]
      ) + "px");
      add_location(div0, file5, 678, 28, 27468);
      attr_dev(div1, "class", "bar-label svelte-dph41p");
      add_location(div1, file5, 685, 28, 27786);
      attr_dev(div2, "class", "bar-value svelte-dph41p");
      add_location(div2, file5, 688, 28, 27921);
      attr_dev(div3, "class", "forecast-bar svelte-dph41p");
      attr_dev(div3, "title", div3_title_value = /*originalIndex*/
      (ctx[40] === 0 ? "Today" : (
        /*originalIndex*/
        ctx[40] === 1 ? "Tomorrow" : `Day ${/*originalIndex*/
        ctx[40]} (in ${/*originalIndex*/
        ctx[40]} days)`
      )) + ": " + /*day*/
      ctx[39].dueCount + " card" + /*day*/
      (ctx[39].dueCount !== 1 ? "s" : "") + " due");
      add_location(div3, file5, 667, 24, 26925);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div3, anchor);
      append_dev(div3, div0);
      append_dev(div3, t0);
      append_dev(div3, div1);
      append_dev(div1, t1);
      append_dev(div3, t2);
      append_dev(div3, div2);
      append_dev(div2, t3);
      append_dev(div3, t4);
    },
    p: function update2(ctx2, dirty) {
      if (dirty[0] & /*statistics*/
      4) {
        set_style(div0, "height", calculateBarHeight(
          /*day*/
          ctx2[39].dueCount,
          /*maxDueCount*/
          ctx2[38]
        ) + "px");
      }
      if (dirty[0] & /*statistics*/
      4 && t1_value !== (t1_value = /*originalIndex*/
      ctx2[40] + ""))
        set_data_dev(t1, t1_value);
      if (dirty[0] & /*statistics*/
      4 && t3_value !== (t3_value = /*day*/
      ctx2[39].dueCount + ""))
        set_data_dev(t3, t3_value);
      if (dirty[0] & /*statistics*/
      4 && div3_title_value !== (div3_title_value = /*originalIndex*/
      (ctx2[40] === 0 ? "Today" : (
        /*originalIndex*/
        ctx2[40] === 1 ? "Tomorrow" : `Day ${/*originalIndex*/
        ctx2[40]} (in ${/*originalIndex*/
        ctx2[40]} days)`
      )) + ": " + /*day*/
      ctx2[39].dueCount + " card" + /*day*/
      (ctx2[39].dueCount !== 1 ? "s" : "") + " due")) {
        attr_dev(div3, "title", div3_title_value);
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div3);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_each_block3.name,
    type: "each",
    source: "(665:20) {#each filteredForecast as day, index}",
    ctx
  });
  return block;
}
function create_fragment5(ctx) {
  let div1;
  let current_block_type_index;
  let if_block0;
  let t0;
  let div0;
  let a;
  let img;
  let img_src_value;
  let t1;
  let if_block1_anchor;
  let current;
  const if_block_creators = [create_if_block_13, create_if_block_22, create_else_block3];
  const if_blocks = [];
  function select_block_type(ctx2, dirty) {
    if (
      /*loading*/
      ctx2[1]
    )
      return 0;
    if (!/*statistics*/
    ctx2[2])
      return 1;
    return 2;
  }
  current_block_type_index = select_block_type(ctx, [-1, -1]);
  if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
  let if_block1 = false;
  const block = {
    c: function create() {
      div1 = element("div");
      if_block0.c();
      t0 = space();
      div0 = element("div");
      a = element("a");
      img = element("img");
      t1 = space();
      if (if_block1)
        if_block1.c();
      if_block1_anchor = empty();
      if (!src_url_equal(img.src, img_src_value = "https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png"))
        attr_dev(img, "src", img_src_value);
      attr_dev(img, "alt", "Buy Me A Coffee");
      attr_dev(img, "height", "40");
      add_location(img, file5, 731, 12, 29418);
      attr_dev(a, "href", "https://www.buymeacoffee.com/dscherdil0");
      add_location(a, file5, 730, 8, 29355);
      attr_dev(div0, "class", "stats-section buymeacoffee-badge svelte-dph41p");
      add_location(div0, file5, 729, 4, 29300);
      attr_dev(div1, "class", "statistics-container svelte-dph41p");
      add_location(div1, file5, 276, 0, 9852);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div1, anchor);
      if_blocks[current_block_type_index].m(div1, null);
      append_dev(div1, t0);
      append_dev(div1, div0);
      append_dev(div0, a);
      append_dev(a, img);
      insert_dev(target, t1, anchor);
      if (if_block1)
        if_block1.m(target, anchor);
      insert_dev(target, if_block1_anchor, anchor);
      current = true;
    },
    p: function update2(ctx2, dirty) {
      let previous_block_index = current_block_type_index;
      current_block_type_index = select_block_type(ctx2, dirty);
      if (current_block_type_index === previous_block_index) {
        if_blocks[current_block_type_index].p(ctx2, dirty);
      } else {
        group_outros();
        transition_out(if_blocks[previous_block_index], 1, 1, () => {
          if_blocks[previous_block_index] = null;
        });
        check_outros();
        if_block0 = if_blocks[current_block_type_index];
        if (!if_block0) {
          if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx2);
          if_block0.c();
        } else {
          if_block0.p(ctx2, dirty);
        }
        transition_in(if_block0, 1);
        if_block0.m(div1, t0);
      }
    },
    i: function intro(local) {
      if (current)
        return;
      transition_in(if_block0);
      current = true;
    },
    o: function outro(local) {
      transition_out(if_block0);
      current = false;
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
      if_blocks[current_block_type_index].d();
      if (detaching)
        detach_dev(t1);
      if (if_block1)
        if_block1.d(detaching);
      if (detaching)
        detach_dev(if_block1_anchor);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment5.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function formatDate2(dateString) {
  return new Date(dateString).toLocaleDateString();
}
function formatTime(seconds) {
  const minutes = Math.floor(seconds / 60);
  const hours = Math.floor(minutes / 60);
  if (hours > 0) {
    return `${hours}h ${minutes % 60}m`;
  }
  return `${minutes}m`;
}
function formatPace(seconds) {
  if (seconds < 60) {
    return `${seconds.toFixed(1)}s`;
  }
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = Math.round(seconds % 60);
  return `${minutes}m ${remainingSeconds}s`;
}
function calculateBarHeight(dueCount, maxDueCount) {
  const barHeight = 400;
  if (maxDueCount === 0)
    return 0;
  const proportion = dueCount / maxDueCount;
  return Math.max(proportion * barHeight - 80, 10);
}
var func2 = (day) => day.dueCount > 0;
function instance5($$self, $$props, $$invalidate) {
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("StatisticsUI", slots, []);
  let { plugin } = $$props;
  const dispatch = createEventDispatcher();
  let loading = true;
  let statistics = null;
  let selectedDeckFilter = "all";
  let selectedTimeframe = "12months";
  let availableDecks = [];
  let availableTags = [];
  let heatmapComponent;
  let deckFilterContainer;
  let timeframeFilterContainer;
  let lastEventTime = 0;
  let lastEventType = "";
  let todayStats = null;
  let weekStats = null;
  let monthStats = null;
  let yearStats = null;
  onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    $$invalidate(1, loading = true);
    yield loadDecksAndTags();
    yield loadStatistics();
    tick().then(() => {
      mountFilterComponents();
    });
  }));
  function mountFilterComponents() {
    if (deckFilterContainer) {
      new import_obsidian7.Setting(deckFilterContainer).setName("Select Deck(s):").setClass("deck-filter-container").addDropdown((dropdown) => {
        dropdown.addOption("all", "All Decks");
        availableTags.forEach((tag) => {
          dropdown.addOption(`tag:${tag}`, `Tag: ${tag}`);
        });
        availableDecks.forEach((deck) => {
          dropdown.addOption(`deck:${deck.id}`, deck.name);
        });
        dropdown.setValue(selectedDeckFilter);
        dropdown.onChange((value) => {
          selectedDeckFilter = value;
          handleFilterChange();
        });
      });
    }
    if (timeframeFilterContainer) {
      new import_obsidian7.Setting(timeframeFilterContainer).setName("Timeframe:").setClass("timeframe-filter-container").addDropdown((dropdown) => dropdown.addOption("12months", "Last 12 Months").addOption("all", "All History").setValue(selectedTimeframe).onChange((value) => {
        selectedTimeframe = value;
        handleFilterChange();
      }));
    }
  }
  function loadDecksAndTags() {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        availableDecks = yield plugin.getDecks();
        availableTags = [...new Set(availableDecks.map((deck) => deck.tag))];
      } catch (error) {
        console.error("Error loading decks and tags:", error);
      }
    });
  }
  function handleTouchClick(callback, event) {
    const now = Date.now();
    const eventType = event.type;
    if (now - lastEventTime < 100 && lastEventType !== eventType) {
      return;
    }
    lastEventTime = now;
    lastEventType = eventType;
    callback();
  }
  function loadStatistics() {
    return __awaiter(this, void 0, void 0, function* () {
      try {
        $$invalidate(2, statistics = yield plugin.getOverallStatistics(selectedDeckFilter, selectedTimeframe));
        plugin.debugLog("Loaded statistics:", statistics);
        $$invalidate(6, todayStats = getTodayStats());
        $$invalidate(7, weekStats = getTimeframeStats(7));
        $$invalidate(8, monthStats = getTimeframeStats(30));
        $$invalidate(9, yearStats = getTimeframeStats(365));
      } catch (error) {
        console.error("Error loading statistics:", error);
        $$invalidate(2, statistics = {
          dailyStats: [],
          cardStats: { new: 0, review: 0, mature: 0 },
          answerButtons: { again: 0, hard: 0, good: 0, easy: 0 },
          retentionRate: 0,
          intervals: [],
          forecast: [],
          averagePace: 0,
          totalReviewTime: 0
        });
        $$invalidate(6, todayStats = null);
        $$invalidate(7, weekStats = null);
        $$invalidate(8, monthStats = null);
        $$invalidate(9, yearStats = null);
      } finally {
        $$invalidate(1, loading = false);
      }
    });
  }
  function handleFilterChange() {
    return __awaiter(this, void 0, void 0, function* () {
      yield loadStatistics();
    });
  }
  function getTodayStats() {
    if (!(statistics === null || statistics === void 0 ? void 0 : statistics.dailyStats) || statistics.dailyStats.length === 0)
      return null;
    const today = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    return statistics.dailyStats.find((day) => day.date === today) || statistics.dailyStats[0] || null;
  }
  function getTimeframeStats(days) {
    if (!(statistics === null || statistics === void 0 ? void 0 : statistics.dailyStats)) {
      return {
        reviews: 0,
        timeSpent: 0,
        newCards: 0,
        learningCards: 0,
        reviewCards: 0,
        correctRate: 0
      };
    }
    const cutoffDate = /* @__PURE__ */ new Date();
    cutoffDate.setDate(cutoffDate.getDate() - days);
    const cutoffStr = cutoffDate.toISOString().split("T")[0];
    const filteredStats = statistics.dailyStats.filter((day) => day.date >= cutoffStr);
    if (filteredStats.length === 0) {
      return {
        reviews: 0,
        timeSpent: 0,
        newCards: 0,
        learningCards: 0,
        reviewCards: 0,
        correctRate: 0
      };
    }
    return filteredStats.reduce(
      (acc, day) => ({
        reviews: acc.reviews + day.reviews,
        timeSpent: acc.timeSpent + day.timeSpent,
        newCards: acc.newCards + day.newCards,
        learningCards: 0,
        // No learning cards in pure FSRS
        reviewCards: acc.reviewCards + day.reviewCards,
        correctRate: acc.reviews + day.reviews > 0 ? (acc.correctRate * acc.reviews + day.correctRate * day.reviews) / (acc.reviews + day.reviews) : 0
      }),
      {
        reviews: 0,
        timeSpent: 0,
        newCards: 0,
        learningCards: 0,
        reviewCards: 0,
        correctRate: 0
      }
    );
  }
  function calculateAverageEase() {
    if (!(statistics === null || statistics === void 0 ? void 0 : statistics.answerButtons))
      return "0.00";
    const { again, hard, good, easy } = statistics.answerButtons;
    const total = again + hard + good + easy;
    if (total === 0)
      return "0.00";
    const weightedSum = again * 1 + hard * 2 + good * 3 + easy * 4;
    return (weightedSum / total).toFixed(2);
  }
  function calculateAverageInterval() {
    if (!(statistics === null || statistics === void 0 ? void 0 : statistics.intervals) || statistics.intervals.length === 0)
      return 0;
    let totalInterval = 0;
    let totalCards = 0;
    statistics.intervals.forEach((interval) => {
      const intervalStr = interval.interval;
      let minutes = 0;
      if (intervalStr.endsWith("h")) {
        minutes = parseInt(intervalStr) * 60;
      } else if (intervalStr.endsWith("d")) {
        minutes = parseInt(intervalStr) * 1440;
      } else if (intervalStr.endsWith("m")) {
        minutes = parseInt(intervalStr) * 43200;
      }
      totalInterval += minutes * interval.count;
      totalCards += interval.count;
    });
    if (totalCards === 0)
      return 0;
    const avgMinutes = totalInterval / totalCards;
    return Math.round(avgMinutes / 1440);
  }
  function getDueToday() {
    if (!(statistics === null || statistics === void 0 ? void 0 : statistics.forecast) || statistics.forecast.length === 0)
      return 0;
    const today = (/* @__PURE__ */ new Date()).toISOString().split("T")[0];
    const todayForecast = statistics.forecast.find((day) => day.date === today);
    return todayForecast ? todayForecast.dueCount : 0;
  }
  function getDueTomorrow() {
    if (!(statistics === null || statistics === void 0 ? void 0 : statistics.forecast) || statistics.forecast.length === 0)
      return 0;
    const tomorrow = /* @__PURE__ */ new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    const tomorrowStr = tomorrow.toISOString().split("T")[0];
    const tomorrowForecast = statistics.forecast.find((day) => day.date === tomorrowStr);
    return tomorrowForecast ? tomorrowForecast.dueCount : 0;
  }
  function getMaturityRatio() {
    if (!(statistics === null || statistics === void 0 ? void 0 : statistics.cardStats))
      return "0.0";
    const { new: newCards, review, mature } = statistics.cardStats;
    const total = newCards + (review || 0) + mature;
    if (total === 0)
      return "0.0";
    return (mature / total * 100).toFixed(1);
  }
  $$self.$$.on_mount.push(function() {
    if (plugin === void 0 && !("plugin" in $$props || $$self.$$.bound[$$self.$$.props["plugin"]])) {
      console_13.warn("<StatisticsUI> was created without expected prop 'plugin'");
    }
  });
  const writable_props = ["plugin"];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_13.warn(`<StatisticsUI> was created with unknown prop '${key}'`);
  });
  const click_handler = (e) => handleTouchClick(loadStatistics, e);
  const touchend_handler = (e) => handleTouchClick(loadStatistics, e);
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      deckFilterContainer = $$value;
      $$invalidate(4, deckFilterContainer);
    });
  }
  function div1_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      timeframeFilterContainer = $$value;
      $$invalidate(5, timeframeFilterContainer);
    });
  }
  const func_3 = async (days) => {
    return await plugin.getReviewCounts(days);
  };
  function reviewheatmap_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      heatmapComponent = $$value;
      $$invalidate(3, heatmapComponent);
    });
  }
  const click_handler_1 = (e) => handleTouchClick(() => dispatch("close"), e);
  const touchend_handler_1 = (e) => handleTouchClick(() => dispatch("close"), e);
  $$self.$$set = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
  };
  $$self.$capture_state = () => ({
    __awaiter,
    onMount,
    createEventDispatcher,
    tick,
    Setting: import_obsidian7.Setting,
    ReviewHeatmap: ReviewHeatmap_default,
    plugin,
    dispatch,
    loading,
    statistics,
    selectedDeckFilter,
    selectedTimeframe,
    availableDecks,
    availableTags,
    heatmapComponent,
    deckFilterContainer,
    timeframeFilterContainer,
    lastEventTime,
    lastEventType,
    todayStats,
    weekStats,
    monthStats,
    yearStats,
    mountFilterComponents,
    loadDecksAndTags,
    handleTouchClick,
    loadStatistics,
    handleFilterChange,
    formatDate: formatDate2,
    formatTime,
    formatPace,
    getTodayStats,
    getTimeframeStats,
    calculateAverageEase,
    calculateAverageInterval,
    getDueToday,
    getDueTomorrow,
    calculateBarHeight,
    getMaturityRatio
  });
  $$self.$inject_state = ($$props2) => {
    if ("plugin" in $$props2)
      $$invalidate(0, plugin = $$props2.plugin);
    if ("loading" in $$props2)
      $$invalidate(1, loading = $$props2.loading);
    if ("statistics" in $$props2)
      $$invalidate(2, statistics = $$props2.statistics);
    if ("selectedDeckFilter" in $$props2)
      selectedDeckFilter = $$props2.selectedDeckFilter;
    if ("selectedTimeframe" in $$props2)
      selectedTimeframe = $$props2.selectedTimeframe;
    if ("availableDecks" in $$props2)
      availableDecks = $$props2.availableDecks;
    if ("availableTags" in $$props2)
      availableTags = $$props2.availableTags;
    if ("heatmapComponent" in $$props2)
      $$invalidate(3, heatmapComponent = $$props2.heatmapComponent);
    if ("deckFilterContainer" in $$props2)
      $$invalidate(4, deckFilterContainer = $$props2.deckFilterContainer);
    if ("timeframeFilterContainer" in $$props2)
      $$invalidate(5, timeframeFilterContainer = $$props2.timeframeFilterContainer);
    if ("lastEventTime" in $$props2)
      lastEventTime = $$props2.lastEventTime;
    if ("lastEventType" in $$props2)
      lastEventType = $$props2.lastEventType;
    if ("todayStats" in $$props2)
      $$invalidate(6, todayStats = $$props2.todayStats);
    if ("weekStats" in $$props2)
      $$invalidate(7, weekStats = $$props2.weekStats);
    if ("monthStats" in $$props2)
      $$invalidate(8, monthStats = $$props2.monthStats);
    if ("yearStats" in $$props2)
      $$invalidate(9, yearStats = $$props2.yearStats);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  return [
    plugin,
    loading,
    statistics,
    heatmapComponent,
    deckFilterContainer,
    timeframeFilterContainer,
    todayStats,
    weekStats,
    monthStats,
    yearStats,
    dispatch,
    handleTouchClick,
    loadStatistics,
    calculateAverageEase,
    calculateAverageInterval,
    getDueToday,
    getDueTomorrow,
    getMaturityRatio,
    click_handler,
    touchend_handler,
    div0_binding,
    div1_binding,
    func_3,
    reviewheatmap_binding,
    click_handler_1,
    touchend_handler_1
  ];
}
var StatisticsUI = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance5, create_fragment5, safe_not_equal, { plugin: 0 }, null, [-1, -1]);
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "StatisticsUI",
      options,
      id: create_fragment5.name
    });
  }
  get plugin() {
    throw new Error("<StatisticsUI>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set plugin(value) {
    throw new Error("<StatisticsUI>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var StatisticsUI_default = StatisticsUI;

// src/components/StatisticsModal.ts
var StatisticsModal = class extends import_obsidian8.Modal {
  constructor(plugin) {
    super(plugin.app);
    this.component = null;
    this.plugin = plugin;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    const modalEl = this.containerEl.querySelector(".modal");
    if (modalEl instanceof HTMLElement) {
      modalEl.addClass("statistics-modal");
      if (window.innerWidth <= 768) {
        modalEl.addClass("statistics-modal-mobile");
      }
    }
    this.containerEl.addClass("statistics-modal-container");
    contentEl.addClass("statistics-modal-content");
    const titleEl = contentEl.createEl("h2", { text: "Overall Statistics" });
    titleEl.addClass("statistics-modal-title");
    const componentContainer = contentEl.createDiv("statistics-container");
    componentContainer.addClass("statistics-modal-component-container");
    this.component = new StatisticsUI_default({
      target: componentContainer,
      props: {
        plugin: this.plugin
      }
    });
    this.component.$on("close", () => {
      this.close();
    });
    const handleResize = () => {
      if (modalEl instanceof HTMLElement) {
        if (window.innerWidth <= 768) {
          modalEl.addClass("statistics-modal-mobile");
        } else {
          modalEl.removeClass("statistics-modal-mobile");
        }
      }
    };
    window.addEventListener("resize", handleResize);
    this._resizeHandler = handleResize;
  }
  onClose() {
    const { contentEl } = this;
    if (this._resizeHandler) {
      window.removeEventListener("resize", this._resizeHandler);
      delete this._resizeHandler;
    }
    if (this.component) {
      this.component.$destroy();
      this.component = null;
    }
    contentEl.empty();
  }
};

// src/components/FlashcardReviewModalWrapper.ts
var import_obsidian9 = require("obsidian");

// src/components/FlashcardReviewModal.svelte
var { console: console_14 } = globals;
var file6 = "src/components/FlashcardReviewModal.svelte";
function create_if_block_33(ctx) {
  let div1;
  let div0;
  const block = {
    c: function create() {
      div1 = element("div");
      div0 = element("div");
      attr_dev(div0, "class", "progress-fill svelte-4svjm9");
      set_style(
        div0,
        "width",
        /*progress*/
        ctx[10] + "%"
      );
      add_location(div0, file6, 255, 12, 7985);
      attr_dev(div1, "class", "review-progress-bar svelte-4svjm9");
      add_location(div1, file6, 254, 8, 7939);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div1, anchor);
      append_dev(div1, div0);
    },
    p: function update2(ctx2, dirty) {
      if (dirty & /*progress*/
      1024) {
        set_style(
          div0,
          "width",
          /*progress*/
          ctx2[10] + "%"
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div1);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_33.name,
    type: "if",
    source: "(254:4) {#if settings?.review?.showProgress !== false}",
    ctx
  });
  return block;
}
function create_else_block4(ctx) {
  let div;
  let p;
  const block = {
    c: function create() {
      div = element("div");
      p = element("p");
      p.textContent = "No cards to review";
      add_location(p, file6, 343, 12, 11340);
      attr_dev(div, "class", "empty-state svelte-4svjm9");
      add_location(div, file6, 342, 8, 11302);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div, anchor);
      append_dev(div, p);
    },
    p: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_else_block4.name,
    type: "else",
    source: "(342:4) {:else}",
    ctx
  });
  return block;
}
function create_if_block3(ctx) {
  let div5;
  let div1;
  let div0;
  let t0;
  let div4;
  let div2;
  let t1;
  let div3;
  let t2;
  let div6;
  let t3;
  let if_block0 = !/*showAnswer*/
  ctx[4] && create_if_block_23(ctx);
  let if_block1 = (
    /*showAnswer*/
    ctx[4] && /*schedulingInfo*/
    ctx[8] && create_if_block_14(ctx)
  );
  const block = {
    c: function create() {
      div5 = element("div");
      div1 = element("div");
      div0 = element("div");
      t0 = space();
      div4 = element("div");
      div2 = element("div");
      t1 = space();
      div3 = element("div");
      t2 = space();
      div6 = element("div");
      if (if_block0)
        if_block0.c();
      t3 = space();
      if (if_block1)
        if_block1.c();
      attr_dev(div0, "class", "card-side front svelte-4svjm9");
      add_location(div0, file6, 262, 16, 8188);
      attr_dev(div1, "class", "question-section svelte-4svjm9");
      add_location(div1, file6, 261, 12, 8141);
      attr_dev(div2, "class", "separator svelte-4svjm9");
      add_location(div2, file6, 266, 16, 8348);
      attr_dev(div3, "class", "card-side back svelte-4svjm9");
      add_location(div3, file6, 267, 16, 8394);
      attr_dev(div4, "class", "answer-section svelte-4svjm9");
      toggle_class(div4, "hidden", !/*showAnswer*/
      ctx[4]);
      add_location(div4, file6, 265, 12, 8276);
      attr_dev(div5, "class", "card-content svelte-4svjm9");
      add_location(div5, file6, 260, 8, 8102);
      attr_dev(div6, "class", "action-buttons svelte-4svjm9");
      add_location(div6, file6, 271, 8, 8491);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div5, anchor);
      append_dev(div5, div1);
      append_dev(div1, div0);
      ctx[19](div0);
      append_dev(div5, t0);
      append_dev(div5, div4);
      append_dev(div4, div2);
      append_dev(div4, t1);
      append_dev(div4, div3);
      ctx[20](div3);
      insert_dev(target, t2, anchor);
      insert_dev(target, div6, anchor);
      if (if_block0)
        if_block0.m(div6, null);
      append_dev(div6, t3);
      if (if_block1)
        if_block1.m(div6, null);
    },
    p: function update2(ctx2, dirty) {
      if (dirty & /*showAnswer*/
      16) {
        toggle_class(div4, "hidden", !/*showAnswer*/
        ctx2[4]);
      }
      if (!/*showAnswer*/
      ctx2[4]) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_23(ctx2);
          if_block0.c();
          if_block0.m(div6, t3);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (
        /*showAnswer*/
        ctx2[4] && /*schedulingInfo*/
        ctx2[8]
      ) {
        if (if_block1) {
          if_block1.p(ctx2, dirty);
        } else {
          if_block1 = create_if_block_14(ctx2);
          if_block1.c();
          if_block1.m(div6, null);
        }
      } else if (if_block1) {
        if_block1.d(1);
        if_block1 = null;
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div5);
      ctx[19](null);
      ctx[20](null);
      if (detaching)
        detach_dev(t2);
      if (detaching)
        detach_dev(div6);
      if (if_block0)
        if_block0.d();
      if (if_block1)
        if_block1.d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block3.name,
    type: "if",
    source: "(260:4) {#if currentCard}",
    ctx
  });
  return block;
}
function create_if_block_23(ctx) {
  let button;
  let span0;
  let t1;
  let span1;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      button = element("button");
      span0 = element("span");
      span0.textContent = "Show Answer";
      t1 = space();
      span1 = element("span");
      span1.textContent = "Space";
      add_location(span0, file6, 280, 20, 8838);
      attr_dev(span1, "class", "shortcut svelte-4svjm9");
      add_location(span1, file6, 281, 20, 8883);
      attr_dev(button, "class", "show-answer-button svelte-4svjm9");
      button.disabled = /*isLoading*/
      ctx[5];
      set_style(button, "touch-action", "manipulation");
      attr_dev(button, "type", "button");
      add_location(button, file6, 273, 16, 8566);
    },
    m: function mount(target, anchor) {
      insert_dev(target, button, anchor);
      append_dev(button, span0);
      append_dev(button, t1);
      append_dev(button, span1);
      if (!mounted) {
        dispose = listen_dev(
          button,
          "pointerup",
          /*onShowAnswer*/
          ctx[11],
          false,
          false,
          false,
          false
        );
        mounted = true;
      }
    },
    p: function update2(ctx2, dirty) {
      if (dirty & /*isLoading*/
      32) {
        prop_dev(
          button,
          "disabled",
          /*isLoading*/
          ctx2[5]
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(button);
      mounted = false;
      dispose();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_23.name,
    type: "if",
    source: "(273:12) {#if !showAnswer}",
    ctx
  });
  return block;
}
function create_if_block_14(ctx) {
  let div12;
  let button0;
  let div0;
  let t1;
  let div1;
  let t2_value = getIntervalDisplay(
    /*schedulingInfo*/
    ctx[8].again.interval
  ) + "";
  let t2;
  let t3;
  let div2;
  let bindRate_action;
  let t5;
  let button1;
  let div3;
  let t7;
  let div4;
  let t8_value = getIntervalDisplay(
    /*schedulingInfo*/
    ctx[8].hard.interval
  ) + "";
  let t8;
  let t9;
  let div5;
  let bindRate_action_1;
  let t11;
  let button2;
  let div6;
  let t13;
  let div7;
  let t14_value = getIntervalDisplay(
    /*schedulingInfo*/
    ctx[8].good.interval
  ) + "";
  let t14;
  let t15;
  let div8;
  let bindRate_action_2;
  let t17;
  let button3;
  let div9;
  let t19;
  let div10;
  let t20_value = getIntervalDisplay(
    /*schedulingInfo*/
    ctx[8].easy.interval
  ) + "";
  let t20;
  let t21;
  let div11;
  let bindRate_action_3;
  let mounted;
  let dispose;
  const block = {
    c: function create() {
      div12 = element("div");
      button0 = element("button");
      div0 = element("div");
      div0.textContent = "Again";
      t1 = space();
      div1 = element("div");
      t2 = text(t2_value);
      t3 = space();
      div2 = element("div");
      div2.textContent = "1";
      t5 = space();
      button1 = element("button");
      div3 = element("div");
      div3.textContent = "Hard";
      t7 = space();
      div4 = element("div");
      t8 = text(t8_value);
      t9 = space();
      div5 = element("div");
      div5.textContent = "2";
      t11 = space();
      button2 = element("button");
      div6 = element("div");
      div6.textContent = "Good";
      t13 = space();
      div7 = element("div");
      t14 = text(t14_value);
      t15 = space();
      div8 = element("div");
      div8.textContent = "3";
      t17 = space();
      button3 = element("button");
      div9 = element("div");
      div9.textContent = "Easy";
      t19 = space();
      div10 = element("div");
      t20 = text(t20_value);
      t21 = space();
      div11 = element("div");
      div11.textContent = "4";
      attr_dev(div0, "class", "button-label svelte-4svjm9");
      add_location(div0, file6, 293, 24, 9323);
      attr_dev(div1, "class", "interval svelte-4svjm9");
      add_location(div1, file6, 294, 24, 9385);
      attr_dev(div2, "class", "shortcut svelte-4svjm9");
      add_location(div2, file6, 297, 24, 9543);
      attr_dev(button0, "class", "difficulty-button again rate-btn svelte-4svjm9");
      button0.disabled = /*isLoading*/
      ctx[5];
      attr_dev(button0, "type", "button");
      add_location(button0, file6, 287, 20, 9080);
      attr_dev(div3, "class", "button-label svelte-4svjm9");
      add_location(div3, file6, 306, 24, 9866);
      attr_dev(div4, "class", "interval svelte-4svjm9");
      add_location(div4, file6, 307, 24, 9927);
      attr_dev(div5, "class", "shortcut svelte-4svjm9");
      add_location(div5, file6, 310, 24, 10084);
      attr_dev(button1, "class", "difficulty-button hard rate-btn svelte-4svjm9");
      button1.disabled = /*isLoading*/
      ctx[5];
      attr_dev(button1, "type", "button");
      add_location(button1, file6, 300, 20, 9624);
      attr_dev(div6, "class", "button-label svelte-4svjm9");
      add_location(div6, file6, 319, 24, 10407);
      attr_dev(div7, "class", "interval svelte-4svjm9");
      add_location(div7, file6, 320, 24, 10468);
      attr_dev(div8, "class", "shortcut svelte-4svjm9");
      add_location(div8, file6, 323, 24, 10625);
      attr_dev(button2, "class", "difficulty-button good rate-btn svelte-4svjm9");
      button2.disabled = /*isLoading*/
      ctx[5];
      attr_dev(button2, "type", "button");
      add_location(button2, file6, 313, 20, 10165);
      attr_dev(div9, "class", "button-label svelte-4svjm9");
      add_location(div9, file6, 332, 24, 10948);
      attr_dev(div10, "class", "interval svelte-4svjm9");
      add_location(div10, file6, 333, 24, 11009);
      attr_dev(div11, "class", "shortcut svelte-4svjm9");
      add_location(div11, file6, 336, 24, 11166);
      attr_dev(button3, "class", "difficulty-button easy rate-btn svelte-4svjm9");
      button3.disabled = /*isLoading*/
      ctx[5];
      attr_dev(button3, "type", "button");
      add_location(button3, file6, 326, 20, 10706);
      attr_dev(div12, "class", "difficulty-buttons svelte-4svjm9");
      add_location(div12, file6, 286, 16, 9027);
    },
    m: function mount(target, anchor) {
      insert_dev(target, div12, anchor);
      append_dev(div12, button0);
      append_dev(button0, div0);
      append_dev(button0, t1);
      append_dev(button0, div1);
      append_dev(div1, t2);
      append_dev(button0, t3);
      append_dev(button0, div2);
      append_dev(div12, t5);
      append_dev(div12, button1);
      append_dev(button1, div3);
      append_dev(button1, t7);
      append_dev(button1, div4);
      append_dev(div4, t8);
      append_dev(button1, t9);
      append_dev(button1, div5);
      append_dev(div12, t11);
      append_dev(div12, button2);
      append_dev(button2, div6);
      append_dev(button2, t13);
      append_dev(button2, div7);
      append_dev(div7, t14);
      append_dev(button2, t15);
      append_dev(button2, div8);
      append_dev(div12, t17);
      append_dev(div12, button3);
      append_dev(button3, div9);
      append_dev(button3, t19);
      append_dev(button3, div10);
      append_dev(div10, t20);
      append_dev(button3, t21);
      append_dev(button3, div11);
      if (!mounted) {
        dispose = [
          action_destroyer(bindRate_action = /*bindRate*/
          ctx[12].call(null, button0, 1)),
          action_destroyer(bindRate_action_1 = /*bindRate*/
          ctx[12].call(null, button1, 2)),
          action_destroyer(bindRate_action_2 = /*bindRate*/
          ctx[12].call(null, button2, 3)),
          action_destroyer(bindRate_action_3 = /*bindRate*/
          ctx[12].call(null, button3, 4))
        ];
        mounted = true;
      }
    },
    p: function update2(ctx2, dirty) {
      if (dirty & /*schedulingInfo*/
      256 && t2_value !== (t2_value = getIntervalDisplay(
        /*schedulingInfo*/
        ctx2[8].again.interval
      ) + ""))
        set_data_dev(t2, t2_value);
      if (dirty & /*isLoading*/
      32) {
        prop_dev(
          button0,
          "disabled",
          /*isLoading*/
          ctx2[5]
        );
      }
      if (dirty & /*schedulingInfo*/
      256 && t8_value !== (t8_value = getIntervalDisplay(
        /*schedulingInfo*/
        ctx2[8].hard.interval
      ) + ""))
        set_data_dev(t8, t8_value);
      if (dirty & /*isLoading*/
      32) {
        prop_dev(
          button1,
          "disabled",
          /*isLoading*/
          ctx2[5]
        );
      }
      if (dirty & /*schedulingInfo*/
      256 && t14_value !== (t14_value = getIntervalDisplay(
        /*schedulingInfo*/
        ctx2[8].good.interval
      ) + ""))
        set_data_dev(t14, t14_value);
      if (dirty & /*isLoading*/
      32) {
        prop_dev(
          button2,
          "disabled",
          /*isLoading*/
          ctx2[5]
        );
      }
      if (dirty & /*schedulingInfo*/
      256 && t20_value !== (t20_value = getIntervalDisplay(
        /*schedulingInfo*/
        ctx2[8].easy.interval
      ) + ""))
        set_data_dev(t20, t20_value);
      if (dirty & /*isLoading*/
      32) {
        prop_dev(
          button3,
          "disabled",
          /*isLoading*/
          ctx2[5]
        );
      }
    },
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div12);
      mounted = false;
      run_all(dispose);
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_if_block_14.name,
    type: "if",
    source: "(286:12) {#if showAnswer && schedulingInfo}",
    ctx
  });
  return block;
}
function create_fragment6(ctx) {
  var _a, _b;
  let div2;
  let div1;
  let h3;
  let t0;
  let t1_value = (
    /*deck*/
    ctx[0].name + ""
  );
  let t1;
  let t2;
  let div0;
  let span0;
  let t3;
  let t4_value = (
    /*sessionProgress*/
    (ctx[3] ? (
      /*sessionProgress*/
      ctx[3].doneUnique
    ) : (
      /*reviewedCount*/
      ctx[9]
    )) + ""
  );
  let t4;
  let t5;
  let span1;
  let t6;
  let t7_value = (
    /*sessionProgress*/
    ctx[3] ? `${/*sessionProgress*/
    ctx[3].goalTotal - /*sessionProgress*/
    ctx[3].doneUnique} remaining` : (
      /*currentCard*/
      ctx[2] ? "More cards available" : "Session complete"
    )
  );
  let t7;
  let t8;
  let t9;
  let t10;
  let if_block0 = (
    /*settings*/
    ((_b = (_a = ctx[1]) == null ? void 0 : _a.review) == null ? void 0 : _b.showProgress) !== false && create_if_block_33(ctx)
  );
  function select_block_type(ctx2, dirty) {
    if (
      /*currentCard*/
      ctx2[2]
    )
      return create_if_block3;
    return create_else_block4;
  }
  let current_block_type = select_block_type(ctx, -1);
  let if_block1 = current_block_type(ctx);
  const block = {
    c: function create() {
      div2 = element("div");
      div1 = element("div");
      h3 = element("h3");
      t0 = text("Review Session - ");
      t1 = text(t1_value);
      t2 = space();
      div0 = element("div");
      span0 = element("span");
      t3 = text("Reviewed: ");
      t4 = text(t4_value);
      t5 = space();
      span1 = element("span");
      t6 = text("(");
      t7 = text(t7_value);
      t8 = text(")");
      t9 = space();
      if (if_block0)
        if_block0.c();
      t10 = space();
      if_block1.c();
      attr_dev(h3, "class", "svelte-4svjm9");
      add_location(h3, file6, 236, 8, 7302);
      add_location(span0, file6, 238, 12, 7388);
      attr_dev(span1, "class", "remaining svelte-4svjm9");
      add_location(span1, file6, 243, 12, 7556);
      attr_dev(div0, "class", "progress-info svelte-4svjm9");
      add_location(div0, file6, 237, 8, 7348);
      attr_dev(div1, "class", "modal-header svelte-4svjm9");
      add_location(div1, file6, 235, 4, 7267);
      attr_dev(div2, "class", "review-modal svelte-4svjm9");
      add_location(div2, file6, 234, 0, 7236);
    },
    l: function claim(nodes) {
      throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    },
    m: function mount(target, anchor) {
      insert_dev(target, div2, anchor);
      append_dev(div2, div1);
      append_dev(div1, h3);
      append_dev(h3, t0);
      append_dev(h3, t1);
      append_dev(div1, t2);
      append_dev(div1, div0);
      append_dev(div0, span0);
      append_dev(span0, t3);
      append_dev(span0, t4);
      append_dev(div0, t5);
      append_dev(div0, span1);
      append_dev(span1, t6);
      append_dev(span1, t7);
      append_dev(span1, t8);
      append_dev(div2, t9);
      if (if_block0)
        if_block0.m(div2, null);
      append_dev(div2, t10);
      if_block1.m(div2, null);
    },
    p: function update2(ctx2, [dirty]) {
      var _a2, _b2;
      if (dirty & /*deck*/
      1 && t1_value !== (t1_value = /*deck*/
      ctx2[0].name + ""))
        set_data_dev(t1, t1_value);
      if (dirty & /*sessionProgress, reviewedCount*/
      520 && t4_value !== (t4_value = /*sessionProgress*/
      (ctx2[3] ? (
        /*sessionProgress*/
        ctx2[3].doneUnique
      ) : (
        /*reviewedCount*/
        ctx2[9]
      )) + ""))
        set_data_dev(t4, t4_value);
      if (dirty & /*sessionProgress, currentCard*/
      12 && t7_value !== (t7_value = /*sessionProgress*/
      ctx2[3] ? `${/*sessionProgress*/
      ctx2[3].goalTotal - /*sessionProgress*/
      ctx2[3].doneUnique} remaining` : (
        /*currentCard*/
        ctx2[2] ? "More cards available" : "Session complete"
      )))
        set_data_dev(t7, t7_value);
      if (
        /*settings*/
        ((_b2 = (_a2 = ctx2[1]) == null ? void 0 : _a2.review) == null ? void 0 : _b2.showProgress) !== false
      ) {
        if (if_block0) {
          if_block0.p(ctx2, dirty);
        } else {
          if_block0 = create_if_block_33(ctx2);
          if_block0.c();
          if_block0.m(div2, t10);
        }
      } else if (if_block0) {
        if_block0.d(1);
        if_block0 = null;
      }
      if (current_block_type === (current_block_type = select_block_type(ctx2, dirty)) && if_block1) {
        if_block1.p(ctx2, dirty);
      } else {
        if_block1.d(1);
        if_block1 = current_block_type(ctx2);
        if (if_block1) {
          if_block1.c();
          if_block1.m(div2, null);
        }
      }
    },
    i: noop,
    o: noop,
    d: function destroy(detaching) {
      if (detaching)
        detach_dev(div2);
      if (if_block0)
        if_block0.d();
      if_block1.d();
    }
  };
  dispatch_dev("SvelteRegisterBlock", {
    block,
    id: create_fragment6.name,
    type: "component",
    source: "",
    ctx
  });
  return block;
}
function getIntervalDisplay(minutes) {
  if (minutes < 60) {
    return `${Math.round(minutes)}m`;
  } else if (minutes < 1440) {
    const hours = Math.round(minutes / 60);
    return `${hours}h`;
  } else {
    const days = Math.round(minutes / 1440);
    return `${days}d`;
  }
}
function instance6($$self, $$props, $$invalidate) {
  let progress;
  let { $$slots: slots = {}, $$scope } = $$props;
  validate_slots("FlashcardReviewModal", slots, []);
  let { deck } = $$props;
  let { initialCard = null } = $$props;
  let { onClose } = $$props;
  let { onReview } = $$props;
  let { renderMarkdown } = $$props;
  let { settings } = $$props;
  let { scheduler } = $$props;
  let { onCardReviewed = void 0 } = $$props;
  const dispatch = createEventDispatcher();
  let showAnswer = false;
  let isLoading = false;
  let frontEl;
  let backEl;
  let schedulingInfo = null;
  let reviewedCount = 0;
  let cardStartTime = 0;
  let currentCard = initialCard;
  let sessionId = null;
  let sessionProgress = null;
  let lastEventTime = 0;
  let lastEventType = "";
  onMount(() => __awaiter(void 0, void 0, void 0, function* () {
    sessionId = yield scheduler.startFreshSession(deck.id);
    scheduler.setCurrentSession(sessionId);
    $$invalidate(3, sessionProgress = yield scheduler.getSessionProgress(sessionId));
    if (!currentCard) {
      $$invalidate(2, currentCard = yield scheduler.getNext(/* @__PURE__ */ new Date(), deck.id, { allowNew: true }));
    }
    if (currentCard) {
      yield loadCard();
    } else {
      dispatch("complete", { reason: "no-more-cards", reviewed: 0 });
    }
    window.addEventListener("keydown", handleKeydown);
  }));
  function loadCard() {
    return __awaiter(this, void 0, void 0, function* () {
      if (!currentCard)
        return;
      $$invalidate(4, showAnswer = false);
      try {
        $$invalidate(8, schedulingInfo = yield scheduler.preview(currentCard.id));
      } catch (error) {
        console.error("Error getting scheduling preview:", error);
        $$invalidate(8, schedulingInfo = null);
      }
      cardStartTime = Date.now();
      if (frontEl) {
        frontEl.empty();
        renderMarkdown(currentCard.front, frontEl);
      }
      tick().then(() => {
        if (backEl && currentCard) {
          backEl.empty();
          renderMarkdown(currentCard.back, backEl);
        }
      });
    });
  }
  function revealAnswer() {
    $$invalidate(4, showAnswer = true);
    tick().then(() => {
      if (backEl && currentCard) {
        backEl.empty();
        renderMarkdown(currentCard.back, backEl);
      }
    });
  }
  function handleReview(rating) {
    return __awaiter(this, void 0, void 0, function* () {
      if (!currentCard || isLoading)
        return;
      $$invalidate(5, isLoading = true);
      try {
        const timeElapsed = Date.now() - cardStartTime;
        yield onReview(currentCard, rating, timeElapsed);
        $$invalidate(9, reviewedCount++, reviewedCount);
        if (sessionId) {
          $$invalidate(3, sessionProgress = yield scheduler.getSessionProgress(sessionId));
        }
        if (onCardReviewed) {
          yield onCardReviewed(currentCard);
        }
        $$invalidate(2, currentCard = yield scheduler.getNext(/* @__PURE__ */ new Date(), deck.id, { allowNew: true }));
        if (currentCard) {
          yield loadCard();
        } else {
          if (sessionId) {
            yield scheduler.endReviewSession(sessionId);
            scheduler.setCurrentSession(null);
          }
          dispatch("complete", {
            reason: "no-more-cards",
            reviewed: sessionProgress ? sessionProgress.doneUnique : reviewedCount
          });
          onClose();
        }
      } catch (error) {
        console.error("Error reviewing card:", error);
      } finally {
        $$invalidate(5, isLoading = false);
      }
    });
  }
  function handleKeydown(event) {
    if (isLoading)
      return;
    const now = Date.now();
    const eventType = "keyboard";
    if (now - lastEventTime < 100 && lastEventType === eventType) {
      return;
    }
    if (!showAnswer && event.key === " ") {
      event.preventDefault();
      lastEventTime = now;
      lastEventType = eventType;
      revealAnswer();
    } else if (showAnswer) {
      lastEventTime = now;
      lastEventType = eventType;
      switch (event.key) {
        case "1":
          handleReview("again");
          break;
        case "2":
          handleReview("hard");
          break;
        case "3":
        case " ":
          handleReview("good");
          break;
        case "4":
          handleReview("easy");
          break;
      }
    }
  }
  function rate(v) {
    if (v === 1)
      handleReview("again");
    else if (v === 2)
      handleReview("hard");
    else if (v === 3)
      handleReview("good");
    else if (v === 4)
      handleReview("easy");
  }
  const onShowAnswer = (e) => {
    e.preventDefault();
    console.log("Show answer event:", e.type, "pointerType:", e.pointerType);
    revealAnswer();
  };
  function bindRate(node, value) {
    const h = (e) => {
      e.preventDefault();
      console.log("Direct binding event:", e.type, "value:", value);
      rate(value);
    };
    node.addEventListener("pointerup", h, { passive: false });
    node.style.touchAction = "manipulation";
    ["pointerdown", "pointerup", "click", "touchend"].forEach((t) => node.addEventListener(t, (e) => console.log("evt", t, e.pointerType)));
    return {
      destroy() {
        node.removeEventListener("pointerup", h);
      }
    };
  }
  onDestroy(() => __awaiter(void 0, void 0, void 0, function* () {
    window.removeEventListener("keydown", handleKeydown);
    dispatch("complete", {
      reason: "manual-close",
      reviewed: sessionProgress ? sessionProgress.doneUnique : reviewedCount
    });
    onClose();
  }));
  $$self.$$.on_mount.push(function() {
    if (deck === void 0 && !("deck" in $$props || $$self.$$.bound[$$self.$$.props["deck"]])) {
      console_14.warn("<FlashcardReviewModal> was created without expected prop 'deck'");
    }
    if (onClose === void 0 && !("onClose" in $$props || $$self.$$.bound[$$self.$$.props["onClose"]])) {
      console_14.warn("<FlashcardReviewModal> was created without expected prop 'onClose'");
    }
    if (onReview === void 0 && !("onReview" in $$props || $$self.$$.bound[$$self.$$.props["onReview"]])) {
      console_14.warn("<FlashcardReviewModal> was created without expected prop 'onReview'");
    }
    if (renderMarkdown === void 0 && !("renderMarkdown" in $$props || $$self.$$.bound[$$self.$$.props["renderMarkdown"]])) {
      console_14.warn("<FlashcardReviewModal> was created without expected prop 'renderMarkdown'");
    }
    if (settings === void 0 && !("settings" in $$props || $$self.$$.bound[$$self.$$.props["settings"]])) {
      console_14.warn("<FlashcardReviewModal> was created without expected prop 'settings'");
    }
    if (scheduler === void 0 && !("scheduler" in $$props || $$self.$$.bound[$$self.$$.props["scheduler"]])) {
      console_14.warn("<FlashcardReviewModal> was created without expected prop 'scheduler'");
    }
  });
  const writable_props = [
    "deck",
    "initialCard",
    "onClose",
    "onReview",
    "renderMarkdown",
    "settings",
    "scheduler",
    "onCardReviewed"
  ];
  Object.keys($$props).forEach((key) => {
    if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$" && key !== "slot")
      console_14.warn(`<FlashcardReviewModal> was created with unknown prop '${key}'`);
  });
  function div0_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      frontEl = $$value;
      $$invalidate(6, frontEl);
    });
  }
  function div3_binding($$value) {
    binding_callbacks[$$value ? "unshift" : "push"](() => {
      backEl = $$value;
      $$invalidate(7, backEl);
    });
  }
  $$self.$$set = ($$props2) => {
    if ("deck" in $$props2)
      $$invalidate(0, deck = $$props2.deck);
    if ("initialCard" in $$props2)
      $$invalidate(13, initialCard = $$props2.initialCard);
    if ("onClose" in $$props2)
      $$invalidate(14, onClose = $$props2.onClose);
    if ("onReview" in $$props2)
      $$invalidate(15, onReview = $$props2.onReview);
    if ("renderMarkdown" in $$props2)
      $$invalidate(16, renderMarkdown = $$props2.renderMarkdown);
    if ("settings" in $$props2)
      $$invalidate(1, settings = $$props2.settings);
    if ("scheduler" in $$props2)
      $$invalidate(17, scheduler = $$props2.scheduler);
    if ("onCardReviewed" in $$props2)
      $$invalidate(18, onCardReviewed = $$props2.onCardReviewed);
  };
  $$self.$capture_state = () => ({
    __awaiter,
    createEventDispatcher,
    onMount,
    onDestroy,
    tick,
    deck,
    initialCard,
    onClose,
    onReview,
    renderMarkdown,
    settings,
    scheduler,
    onCardReviewed,
    dispatch,
    showAnswer,
    isLoading,
    frontEl,
    backEl,
    schedulingInfo,
    reviewedCount,
    cardStartTime,
    currentCard,
    sessionId,
    sessionProgress,
    lastEventTime,
    lastEventType,
    loadCard,
    revealAnswer,
    handleReview,
    getIntervalDisplay,
    handleKeydown,
    rate,
    onShowAnswer,
    bindRate,
    progress
  });
  $$self.$inject_state = ($$props2) => {
    if ("deck" in $$props2)
      $$invalidate(0, deck = $$props2.deck);
    if ("initialCard" in $$props2)
      $$invalidate(13, initialCard = $$props2.initialCard);
    if ("onClose" in $$props2)
      $$invalidate(14, onClose = $$props2.onClose);
    if ("onReview" in $$props2)
      $$invalidate(15, onReview = $$props2.onReview);
    if ("renderMarkdown" in $$props2)
      $$invalidate(16, renderMarkdown = $$props2.renderMarkdown);
    if ("settings" in $$props2)
      $$invalidate(1, settings = $$props2.settings);
    if ("scheduler" in $$props2)
      $$invalidate(17, scheduler = $$props2.scheduler);
    if ("onCardReviewed" in $$props2)
      $$invalidate(18, onCardReviewed = $$props2.onCardReviewed);
    if ("showAnswer" in $$props2)
      $$invalidate(4, showAnswer = $$props2.showAnswer);
    if ("isLoading" in $$props2)
      $$invalidate(5, isLoading = $$props2.isLoading);
    if ("frontEl" in $$props2)
      $$invalidate(6, frontEl = $$props2.frontEl);
    if ("backEl" in $$props2)
      $$invalidate(7, backEl = $$props2.backEl);
    if ("schedulingInfo" in $$props2)
      $$invalidate(8, schedulingInfo = $$props2.schedulingInfo);
    if ("reviewedCount" in $$props2)
      $$invalidate(9, reviewedCount = $$props2.reviewedCount);
    if ("cardStartTime" in $$props2)
      cardStartTime = $$props2.cardStartTime;
    if ("currentCard" in $$props2)
      $$invalidate(2, currentCard = $$props2.currentCard);
    if ("sessionId" in $$props2)
      sessionId = $$props2.sessionId;
    if ("sessionProgress" in $$props2)
      $$invalidate(3, sessionProgress = $$props2.sessionProgress);
    if ("lastEventTime" in $$props2)
      lastEventTime = $$props2.lastEventTime;
    if ("lastEventType" in $$props2)
      lastEventType = $$props2.lastEventType;
    if ("progress" in $$props2)
      $$invalidate(10, progress = $$props2.progress);
  };
  if ($$props && "$$inject" in $$props) {
    $$self.$inject_state($$props.$$inject);
  }
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*sessionProgress*/
    8) {
      $:
        $$invalidate(10, progress = sessionProgress ? sessionProgress.progress : 0);
    }
    if ($$self.$$.dirty & /*currentCard*/
    4) {
      $:
        if (currentCard) {
          loadCard();
        }
    }
  };
  return [
    deck,
    settings,
    currentCard,
    sessionProgress,
    showAnswer,
    isLoading,
    frontEl,
    backEl,
    schedulingInfo,
    reviewedCount,
    progress,
    onShowAnswer,
    bindRate,
    initialCard,
    onClose,
    onReview,
    renderMarkdown,
    scheduler,
    onCardReviewed,
    div0_binding,
    div3_binding
  ];
}
var FlashcardReviewModal = class extends SvelteComponentDev {
  constructor(options) {
    super(options);
    init(this, options, instance6, create_fragment6, safe_not_equal, {
      deck: 0,
      initialCard: 13,
      onClose: 14,
      onReview: 15,
      renderMarkdown: 16,
      settings: 1,
      scheduler: 17,
      onCardReviewed: 18
    });
    dispatch_dev("SvelteRegisterComponent", {
      component: this,
      tagName: "FlashcardReviewModal",
      options,
      id: create_fragment6.name
    });
  }
  get deck() {
    throw new Error("<FlashcardReviewModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set deck(value) {
    throw new Error("<FlashcardReviewModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get initialCard() {
    throw new Error("<FlashcardReviewModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set initialCard(value) {
    throw new Error("<FlashcardReviewModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get onClose() {
    throw new Error("<FlashcardReviewModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set onClose(value) {
    throw new Error("<FlashcardReviewModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get onReview() {
    throw new Error("<FlashcardReviewModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set onReview(value) {
    throw new Error("<FlashcardReviewModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get renderMarkdown() {
    throw new Error("<FlashcardReviewModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set renderMarkdown(value) {
    throw new Error("<FlashcardReviewModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get settings() {
    throw new Error("<FlashcardReviewModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set settings(value) {
    throw new Error("<FlashcardReviewModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get scheduler() {
    throw new Error("<FlashcardReviewModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set scheduler(value) {
    throw new Error("<FlashcardReviewModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  get onCardReviewed() {
    throw new Error("<FlashcardReviewModal>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
  set onCardReviewed(value) {
    throw new Error("<FlashcardReviewModal>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
  }
};
var FlashcardReviewModal_default = FlashcardReviewModal;

// src/components/FlashcardReviewModalWrapper.ts
var FlashcardReviewModalWrapper = class extends import_obsidian9.Modal {
  constructor(app, deck, flashcards, scheduler, settings, reviewFlashcard, renderMarkdown, refreshStats, refreshStatsById) {
    super(app);
    this.component = null;
    this.markdownComponents = [];
    this.deck = deck;
    this.initialCard = flashcards.length > 0 ? flashcards[0] : null;
    this.scheduler = scheduler;
    this.settings = settings;
    this.reviewFlashcard = reviewFlashcard;
    this.renderMarkdown = renderMarkdown;
    this.refreshStats = refreshStats;
    this.refreshStatsById = refreshStatsById;
  }
  async onOpen() {
    const { contentEl } = this;
    contentEl.empty();
    contentEl.addClass("deck-review-modal");
    const modalEl = this.containerEl.querySelector(".modal");
    if (modalEl instanceof HTMLElement && window.innerWidth <= 768) {
      modalEl.addClass("deck-review-modal-mobile");
    }
    const container = contentEl.createDiv();
    this.component = new FlashcardReviewModal_default({
      target: container,
      props: {
        initialCard: this.initialCard,
        deck: this.deck,
        onClose: () => this.close(),
        onReview: async (card, rating, timeElapsed) => {
          await this.reviewFlashcard(this.deck, card, rating, timeElapsed);
        },
        renderMarkdown: (content, el) => {
          const component = this.renderMarkdown(content, el);
          if (component) {
            this.markdownComponents.push(component);
          }
        },
        settings: this.settings,
        scheduler: this.scheduler,
        onCardReviewed: async (reviewedCard) => {
          if (reviewedCard) {
            await this.refreshStatsById(reviewedCard.deckId);
          }
        }
      }
    });
    this.component.$on("complete", async (event) => {
      var _a, _b;
      const { reason, reviewed } = event.detail;
      let message = `Review session complete for ${this.deck.name}!`;
      if (reason === "no-more-cards") {
        message = `All available cards reviewed! Completed ${reviewed} cards from ${this.deck.name}.`;
      }
      if (((_b = (_a = this.settings) == null ? void 0 : _a.ui) == null ? void 0 : _b.enableNotices) !== false) {
        new import_obsidian9.Notice(message);
      }
      console.log("complete");
      await this.refreshStatsById(this.deck.id);
    });
    const handleResize = () => {
      const modalEl2 = this.containerEl.querySelector(".modal");
      if (modalEl2 instanceof HTMLElement) {
        if (window.innerWidth <= 768) {
          modalEl2.addClass("deck-review-modal-mobile");
        } else {
          modalEl2.removeClass("deck-review-modal-mobile");
        }
      }
    };
    window.addEventListener("resize", handleResize);
    this._resizeHandler = handleResize;
  }
  async onClose() {
    await this.scheduler.save();
    if (this._resizeHandler) {
      window.removeEventListener("resize", this._resizeHandler);
      delete this._resizeHandler;
    }
    if (this.component) {
      this.component.$destroy();
      this.component = null;
    }
    this.markdownComponents.forEach((comp) => comp.unload());
    this.markdownComponents = [];
    this.refreshStatsById(this.deck.id);
  }
};

// src/main.ts
var VIEW_TYPE_DECKS = "decks-view";
function deepMergeIgnoreNull(target, source) {
  if (source === null || source === void 0) {
    return target;
  }
  if (typeof source !== "object" || Array.isArray(source)) {
    return source;
  }
  const result = { ...target };
  for (const key in source) {
    if (source.hasOwnProperty(key)) {
      const sourceValue = source[key];
      if (sourceValue === null || sourceValue === void 0) {
        continue;
      }
      if (typeof sourceValue === "object" && !Array.isArray(sourceValue) && target[key]) {
        result[key] = deepMergeIgnoreNull(target[key], sourceValue);
      } else {
        result[key] = sourceValue;
      }
    }
  }
  return result;
}
var DecksPlugin = class extends import_obsidian10.Plugin {
  constructor() {
    super(...arguments);
    this.view = null;
    this.progressNotice = null;
    this.hasShownInitialProgress = false;
  }
  /**
   * Helper method for timing operations
   */
  formatTime(ms) {
    if (ms < 1e3) {
      return `${ms.toFixed(2)}ms`;
    } else {
      return `${(ms / 1e3).toFixed(2)}s`;
    }
  }
  // Debug logging utility
  debugLog(message, ...args) {
    var _a, _b;
    if ((_b = (_a = this.settings) == null ? void 0 : _a.debug) == null ? void 0 : _b.enableLogging) {
      console.log(`[Decks Debug] ${message}`, ...args);
      this.writeToLogFile(message, ...args);
    }
  }
  async writeToLogFile(message, ...args) {
    try {
      const adapter = this.app.vault.adapter;
      const logPath = `${this.app.vault.configDir}/plugins/decks/debug.log`;
      const timestamp = (/* @__PURE__ */ new Date()).toISOString();
      const argsStr = args.length > 0 ? ` ${args.map(
        (arg) => typeof arg === "object" ? JSON.stringify(arg) : String(arg)
      ).join(" ")}` : "";
      const logEntry = `[${timestamp}] ${message}${argsStr}
`;
      let existingContent = "";
      if (await adapter.exists(logPath)) {
        existingContent = await adapter.read(logPath);
      }
      await adapter.write(logPath, existingContent + logEntry);
    } catch (error) {
      console.error("[Decks Debug] Failed to write to log file:", error);
    }
  }
  // Performance logging utility
  performanceLog(message, ...args) {
    var _a, _b;
    if ((_b = (_a = this.settings) == null ? void 0 : _a.debug) == null ? void 0 : _b.performanceLogs) {
      console.log(`[Decks Performance] ${message}`, ...args);
    }
  }
  // Progress tracking utility
  updateProgress(message, progress = 0) {
    if (this.progressNotice) {
      const progressBar = this.createProgressBar(progress);
      this.progressNotice.setMessage(`${message}
${progressBar}`);
    }
  }
  createProgressBar(progress) {
    const width = 25;
    const filled = Math.round(progress / 100 * width);
    const empty2 = width - filled;
    const bar = "\u2588".repeat(filled) + "\u2591".repeat(empty2);
    const percentage = Math.round(progress);
    return `[${bar}] ${percentage}%`;
  }
  showProgressNotice(message) {
    var _a, _b, _c, _d;
    this.debugLog(`showProgressNotice called with: ${message}`);
    this.debugLog(`enableNotices setting: ${(_b = (_a = this.settings) == null ? void 0 : _a.ui) == null ? void 0 : _b.enableNotices}`);
    if (((_d = (_c = this.settings) == null ? void 0 : _c.ui) == null ? void 0 : _d.enableNotices) !== false) {
      this.debugLog("Creating progress notice");
      this.progressNotice = new import_obsidian10.Notice(message, 0);
    } else {
      this.debugLog("Notices disabled, not showing progress notice");
    }
  }
  hideProgressNotice() {
    if (this.progressNotice) {
      this.progressNotice.hide();
      this.progressNotice = null;
    }
  }
  async onload() {
    var _a, _b;
    this.debugLog("Loading Decks plugin");
    await this.loadSettings();
    try {
      const adapter = this.app.vault.adapter;
      const pluginDir = `${this.app.vault.configDir}/plugins/decks`;
      if (!await adapter.exists(pluginDir)) {
        await adapter.mkdir(pluginDir);
      }
      const databasePath = `${this.app.vault.configDir}/plugins/decks/flashcards.db`;
      this.db = new DatabaseService(
        databasePath,
        adapter,
        this.debugLog.bind(this)
      );
      await this.db.initialize();
      this.deckManager = new DeckManager(
        this.app.vault,
        this.app.metadataCache,
        this.db,
        this
      );
      this.deckSynchronizer = new DeckSynchronizer(
        this.db,
        this.deckManager,
        this.debugLog.bind(this),
        this.performanceLog.bind(this)
      );
      this.scheduler = new Scheduler(this.db);
      this.registerView(
        VIEW_TYPE_DECKS,
        (leaf) => new DecksView(
          this,
          leaf,
          this.deckSynchronizer,
          this.scheduler,
          this.settings,
          this.debugLog.bind(this),
          this.performSync.bind(this),
          this.getDecks.bind(this),
          this.getDeckStats.bind(this),
          this.getDeckStatsById.bind(this),
          this.getReviewCounts.bind(this),
          this.updateDeckConfig.bind(this),
          this.openStatisticsModal.bind(this),
          this.deckSynchronizer.syncDeck.bind(this.deckSynchronizer),
          this.db.getDailyReviewCounts.bind(this.db),
          this.reviewFlashcard.bind(this),
          this.renderMarkdown.bind(this),
          (view) => {
            this.view = view;
          }
        )
      );
      this.app.workspace.onLayoutReady(() => {
        setTimeout(() => {
          this.performInitialSync();
        }, 2e3);
      });
      this.addRibbonIcon("brain", "Flashcards", () => {
        this.activateView();
      });
      this.addCommand({
        id: "show-flashcards-panel",
        name: "Show Flashcards Panel",
        callback: () => {
          this.activateView();
        }
      });
      this.registerEvent(
        this.app.vault.on("modify", async (file7) => {
          if (file7 instanceof import_obsidian10.TFile && file7.extension === "md") {
            await this.handleFileChange(file7);
          }
        })
      );
      this.registerEvent(
        this.app.vault.on("delete", async (file7) => {
          if (file7 instanceof import_obsidian10.TFile && file7.extension === "md") {
            await this.handleFileDelete(file7);
          }
        })
      );
      this.registerEvent(
        this.app.vault.on("rename", async (file7, oldPath) => {
          if (file7 instanceof import_obsidian10.TFile && file7.extension === "md") {
            await this.handleFileRename(file7, oldPath);
          }
        })
      );
      this.addSettingTab(
        new DecksSettingTab(
          this.app,
          this,
          this.settings,
          this.saveSettings.bind(this),
          this.performSync.bind(this),
          async () => {
            if (this.view) {
              await this.view.refreshStats();
            }
          },
          () => {
            if (this.view) {
              this.view.restartBackgroundRefresh();
            }
          },
          () => {
            if (this.view) {
              this.view.startBackgroundRefresh();
            }
          },
          () => {
            if (this.view) {
              this.view.stopBackgroundRefresh();
            }
          },
          this.db.purgeDatabase.bind(this.db)
        )
      );
      this.debugLog("Decks plugin loaded successfully");
    } catch (error) {
      console.error("Error loading Decks plugin:", error);
      if (((_b = (_a = this.settings) == null ? void 0 : _a.ui) == null ? void 0 : _b.enableNotices) !== false) {
        new import_obsidian10.Notice("Failed to load Decks plugin. Check console for details.");
      }
    }
  }
  async onunload() {
    this.debugLog("Unloading Decks plugin");
    if (this.db) {
      await this.db.close();
    }
  }
  async loadSettings() {
    const loadedData = await this.loadData();
    this.settings = deepMergeIgnoreNull(DEFAULT_SETTINGS, loadedData);
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf = null;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_DECKS);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      if (leaf) {
        await leaf.setViewState({
          type: VIEW_TYPE_DECKS,
          active: true
        });
      }
    }
    if (leaf) {
      workspace.revealLeaf(leaf);
    }
  }
  async handleFileChange(file7) {
    const metadata = this.app.metadataCache.getFileCache(file7);
    this.debugLog(`File changed: ${file7.path}, metadata:`, metadata);
    if (!metadata)
      return;
    const allTags = [];
    if (metadata.tags) {
      allTags.push(...metadata.tags.map((t) => t.tag));
    }
    if (metadata.frontmatter && metadata.frontmatter.tags) {
      const frontmatterTags = Array.isArray(metadata.frontmatter.tags) ? metadata.frontmatter.tags : [metadata.frontmatter.tags];
      allTags.push(
        ...frontmatterTags.map(
          (tag) => tag.startsWith("#") ? tag : `#${tag}`
        )
      );
    }
    const hasFlashcardsTag = allTags.some(
      (tag) => tag.startsWith("#flashcards")
    );
    this.debugLog(`File ${file7.path} has flashcards tag:`, hasFlashcardsTag);
    if (hasFlashcardsTag) {
      const existingDeck = await this.db.getDeckByFilepath(file7.path);
      if (existingDeck) {
        const newTag = allTags.find((tag) => tag.startsWith("#flashcards")) || "#flashcards";
        if (existingDeck.tag !== newTag) {
          this.debugLog(
            `Updating deck tag from ${existingDeck.tag} to ${newTag}`
          );
          await this.db.updateDeck(existingDeck.id, { tag: newTag });
        }
        await yieldToUI();
        await this.deckSynchronizer.syncDeck(existingDeck.id);
        if (this.view) {
          await this.view.refreshStatsById(existingDeck.id);
        }
      } else {
        const newTag = allTags.find((tag) => tag.startsWith("#flashcards")) || "#flashcards";
        await this.deckSynchronizer.createDeckForFile(file7.path, newTag);
        await yieldToUI();
        const newDeck = await this.db.getDeckByFilepath(file7.path);
        if (newDeck) {
          await this.deckSynchronizer.syncDeck(newDeck.id);
        }
        if (this.view) {
          await this.view.refreshStats();
        }
      }
    }
  }
  async performInitialSync() {
    try {
      const startTime = performance.now();
      this.debugLog("Performing initial background sync...");
      await new Promise((resolve) => setTimeout(resolve, 100));
      await this.performSync(false);
      if (this.view) {
        const updatedDecks = await this.getDecks();
        const deckStats = await this.getDeckStats();
        this.view.update(updatedDecks, deckStats);
      }
      const totalTime = performance.now() - startTime;
      this.performanceLog(
        `Initial sync completed successfully in ${this.formatTime(totalTime)}`
      );
    } catch (error) {
      console.error("Error during initial sync:", error);
    }
  }
  async performSync(forceSync = false) {
    const result = await this.deckSynchronizer.performSync({
      forceSync,
      showProgress: true,
      onProgress: (progress) => {
        this.debugLog(
          `Progress: ${progress.percentage}% - ${progress.message}`
        );
        if (!this.hasShownInitialProgress) {
          const message = forceSync ? "\u{1F504} Force refreshing flashcards...\n" + this.createProgressBar(progress.percentage) : "\u{1F504} Syncing flashcards...\n" + this.createProgressBar(progress.percentage);
          this.debugLog(`Showing initial progress notice: ${message}`);
          this.showProgressNotice(message);
          this.hasShownInitialProgress = true;
        }
        this.updateProgress(progress.message, progress.percentage);
        if (progress.percentage === 100) {
          this.debugLog("Sync complete, hiding progress notice");
          this.hasShownInitialProgress = false;
          setTimeout(() => this.hideProgressNotice(), 3e3);
        }
      }
    });
    if (!result.success && result.error) {
      this.updateProgress("\u274C Sync failed - check console for details", 0);
      this.hasShownInitialProgress = false;
      setTimeout(() => this.hideProgressNotice(), 5e3);
      throw result.error;
    }
  }
  async handleFileDelete(file7) {
    await this.db.deleteDeckByFilepath(file7.path);
    if (this.view) {
      await this.view.refreshStats();
    }
  }
  async handleFileRename(file7, oldPath) {
    const oldDeck = await this.db.getDeckByFilepath(oldPath);
    if (oldDeck) {
      const oldDeckId = oldDeck.id;
      const newDeckId = this.deckManager.generateDeckId(file7.path);
      this.debugLog(`File renamed from ${oldPath} to ${file7.path}`);
      this.debugLog(`Updating deck ID from ${oldDeckId} to ${newDeckId}`);
      await this.db.renameDeck(oldDeckId, newDeckId, file7.basename, file7.path);
      await this.deckSynchronizer.updateFlashcardDeckIds(oldDeckId, newDeckId);
      if (this.view) {
        await this.view.refreshStats();
      }
    }
  }
  async syncDecks() {
    await this.deckManager.syncDecks();
  }
  async syncFlashcardsForDeck(deckId) {
    await this.deckSynchronizer.syncDeck(deckId);
  }
  async getReviewCounts(days = 365) {
    return await this.db.getReviewCountsByDate(days);
  }
  async getDecks() {
    return this.db.getAllDecks();
  }
  async getDeckStats() {
    const stats = await this.db.getAllDeckStats();
    const statsMap = /* @__PURE__ */ new Map();
    for (const stat of stats) {
      statsMap.set(stat.deckId, stat);
    }
    return statsMap;
  }
  async getDueFlashcards(deckId) {
    return await this.db.getDueFlashcards(deckId);
  }
  async getFlashcardsByDeck(deckId) {
    return await this.db.getFlashcardsByDeck(deckId);
  }
  async getNextCard(deckId) {
    return await this.scheduler.getNext(/* @__PURE__ */ new Date(), deckId, {});
  }
  async getDailyReviewCounts(deckId) {
    return await this.db.getDailyReviewCounts(deckId);
  }
  async getDeckStatsById(deckId) {
    const stats = await this.db.getDeckStats(deckId);
    return stats;
  }
  async updateDeckConfig(deckId, config) {
    var _a, _b;
    if (((_a = config.fsrs) == null ? void 0 : _a.profile) && !["INTENSIVE", "STANDARD"].includes(config.fsrs.profile)) {
      throw new Error(`Invalid profile: ${config.fsrs.profile}`);
    }
    if (((_b = config.fsrs) == null ? void 0 : _b.requestRetention) !== void 0) {
      const rr = config.fsrs.requestRetention;
      if (rr <= 0.5 || rr >= 0.995) {
        throw new Error(
          `requestRetention must be in range (0.5, 0.995), got ${rr}`
        );
      }
    }
    const currentConfig = await this.getDeckConfig(deckId);
    if (!currentConfig) {
      throw new Error(`Deck not found: ${deckId}`);
    }
    const headerLevelChanged = config.headerLevel !== void 0 && config.headerLevel !== currentConfig.headerLevel;
    const updatedConfig = {
      ...currentConfig,
      ...config,
      fsrs: {
        ...currentConfig.fsrs,
        ...config.fsrs
      }
    };
    await this.db.updateDeck(deckId, { config: updatedConfig });
    if (headerLevelChanged) {
      const deck = await this.db.getDeckById(deckId);
      if (deck) {
        this.debugLog(
          `Header level changed for deck ${deck.name}, forcing resync`
        );
        await yieldToUI();
        await this.deckSynchronizer.syncDeck(deck.filepath, true);
      }
    }
    if (this.view) {
      await this.view.refreshStatsById(deckId);
    }
  }
  /**
   * Get deck configuration
   */
  async getDeckConfig(deckId) {
    const decks = await this.db.getAllDecks();
    const deck = decks.find((d) => d.id === deckId);
    return deck ? deck.config : null;
  }
  /**
   * Schedule preview for a card showing all four rating outcomes
   */
  async schedulePreview(cardId, now = /* @__PURE__ */ new Date()) {
    return await this.scheduler.preview(cardId, now);
  }
  async reviewFlashcard(deck, flashcard, difficulty, timeElapsed) {
    await this.scheduler.rate(
      flashcard.id,
      difficulty,
      /* @__PURE__ */ new Date(),
      timeElapsed
    );
    await this.db.updateDeckLastReviewed(flashcard.deckId);
    if (this.view) {
      await this.view.refreshStatsById(flashcard.deckId);
      await this.view.refreshHeatmap();
    }
  }
  async getOverallStatistics(deckFilter = "all", timeframe = "12months") {
    return await this.db.getOverallStatistics(deckFilter, timeframe);
  }
  openStatisticsModal() {
    const modal = new StatisticsModal(this);
    modal.open();
  }
  renderMarkdown(content, el) {
    const component = new import_obsidian10.Component();
    component.load();
    import_obsidian10.MarkdownRenderer.renderMarkdown(content, el, "", component);
    return component;
  }
};
var DecksView = class extends import_obsidian10.ItemView {
  constructor(plugin, leaf, deckSynchronizer, scheduler, settings, debugLog, performSync, getDecks, getDeckStats, getDeckStatsById, getReviewCounts, updateDeckConfig, openStatisticsModal, syncFlashcardsForDeck, getDailyReviewCounts, reviewFlashcard, renderMarkdown, setViewReference) {
    super(leaf);
    this.component = null;
    this.markdownComponents = [];
    this.statsRefreshTimeout = null;
    this.backgroundRefreshInterval = null;
    this.plugin = plugin;
    this.deckSynchronizer = deckSynchronizer;
    this.scheduler = scheduler;
    this.settings = settings;
    this.debugLog = debugLog;
    this.performSync = performSync;
    this.getDecks = getDecks;
    this.getDeckStats = getDeckStats;
    this.getDeckStatsById = getDeckStatsById;
    this.getReviewCounts = getReviewCounts;
    this.updateDeckConfig = updateDeckConfig;
    this.openStatisticsModal = openStatisticsModal;
    this.syncFlashcardsForDeck = syncFlashcardsForDeck;
    this.getDailyReviewCounts = getDailyReviewCounts;
    this.reviewFlashcard = reviewFlashcard;
    this.renderMarkdown = renderMarkdown;
    this.setViewReference = setViewReference;
    this.setViewReference(this);
  }
  getViewType() {
    return VIEW_TYPE_DECKS;
  }
  getDisplayText() {
    return "Decks";
  }
  getIcon() {
    return "brain";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("decks-view");
    this.component = new DeckListPanel_default({
      target: container,
      props: {
        onDeckClick: (deck) => this.startReview(deck),
        onRefresh: async () => {
          this.debugLog("onRefresh callback invoked");
          await this.refresh(false);
        },
        onForceRefreshDeck: async (deckFilepath) => {
          var _a;
          this.debugLog(
            "onForceRefreshDeck callback invoked for deck:",
            deckFilepath
          );
          const deckDisplayName = ((_a = deckFilepath.split("/").pop()) == null ? void 0 : _a.replace(".md", "")) || deckFilepath;
          this.plugin.showProgressNotice(
            `\u{1F504} Force refreshing deck: ${deckDisplayName}...`
          );
          try {
            await this.deckSynchronizer.syncDeck(
              deckFilepath,
              true,
              (progress) => {
                this.plugin.updateProgress(
                  progress.message,
                  progress.percentage
                );
                if (progress.percentage === 100) {
                  setTimeout(() => this.plugin.hideProgressNotice(), 2e3);
                }
              }
            );
            await this.refreshStats();
          } catch (error) {
            this.plugin.updateProgress(
              "\u274C Deck refresh failed - check console for details",
              0
            );
            setTimeout(() => this.plugin.hideProgressNotice(), 3e3);
            throw error;
          }
        },
        getReviewCounts: async (days) => {
          return await this.getReviewCounts(days);
        },
        onUpdateDeckConfig: async (deckId, config) => {
          await this.updateDeckConfig(deckId, config);
        },
        onOpenStatistics: () => {
          this.openStatisticsModal();
        },
        plugin: this.plugin
      }
    });
    if (this.settings.ui.enableBackgroundRefresh) {
      this.startBackgroundRefresh();
    }
  }
  async onClose() {
    if (this.component) {
      this.component.$destroy();
      this.component = null;
    }
    if (this.statsRefreshTimeout) {
      clearTimeout(this.statsRefreshTimeout);
      this.statsRefreshTimeout = null;
    }
    this.stopBackgroundRefresh();
    this.markdownComponents.forEach((comp) => comp.unload());
    this.markdownComponents = [];
    this.setViewReference(null);
  }
  async update(updatedDecks, deckStats) {
    var _a, _b;
    (_a = this.component) == null ? void 0 : _a.updateDecks(updatedDecks);
    (_b = this.component) == null ? void 0 : _b.updateStats(deckStats);
  }
  async refresh(force = false) {
    var _a, _b;
    this.debugLog("DecksView.refresh() called");
    try {
      await this.performSync(force);
      const updatedDecks = await this.getDecks();
      const deckStats = await this.getDeckStats();
      this.update(updatedDecks, deckStats);
      this.debugLog("Refresh complete");
    } catch (error) {
      console.error("Error refreshing decks:", error);
      if (((_b = (_a = this.settings) == null ? void 0 : _a.ui) == null ? void 0 : _b.enableNotices) !== false) {
        new import_obsidian10.Notice("Error refreshing decks. Check console for details.");
      }
    }
  }
  async refreshStats() {
    this.debugLog("DecksView.refreshStats() executing");
    try {
      const deckStats = await this.getDeckStats();
      this.debugLog("Updated deck stats:", deckStats);
      if (this.component) {
        this.component.updateStats(deckStats);
      }
    } catch (error) {
      console.error("Error refreshing stats:", error);
    }
  }
  async refreshStatsById(deckId) {
    this.debugLog(`DecksView.refreshStatsById() executing for deck: ${deckId}`);
    try {
      const deckStats = await this.getDeckStatsById(deckId);
      this.debugLog("Updated all deck stats");
      if (this.component && deckStats) {
        this.component.updateStatsById(deckId, deckStats);
      }
    } catch (error) {
      console.error("Error refreshing stats by ID:", error);
    }
  }
  startBackgroundRefresh() {
    if (!this.settings.ui.enableBackgroundRefresh) {
      return;
    }
    this.stopBackgroundRefresh();
    this.debugLog(
      `Starting background refresh job (every ${this.settings.ui.backgroundRefreshInterval} seconds)`
    );
    this.backgroundRefreshInterval = setInterval(async () => {
      this.debugLog("Background refresh tick");
      this.refresh();
    }, this.settings.ui.backgroundRefreshInterval * 1e3);
  }
  stopBackgroundRefresh() {
    if (this.backgroundRefreshInterval) {
      this.debugLog("Stopping background refresh job");
      clearInterval(this.backgroundRefreshInterval);
      this.backgroundRefreshInterval = null;
    }
  }
  restartBackgroundRefresh() {
    this.stopBackgroundRefresh();
    if (this.settings.ui.enableBackgroundRefresh) {
      this.startBackgroundRefresh();
    }
  }
  async refreshHeatmap() {
    if (this.component) {
      this.component.refreshHeatmap();
    }
  }
  // Test method to check if background job is running
  checkBackgroundJobStatus() {
    this.debugLog("Background job status:", {
      isRunning: !!this.backgroundRefreshInterval,
      intervalId: this.backgroundRefreshInterval,
      componentExists: !!this.component,
      refreshInterval: this.settings.ui.backgroundRefreshInterval
    });
  }
  async startReview(deck) {
    var _a, _b, _c, _d, _e, _f;
    try {
      this.debugLog(`Syncing cards for deck before review: ${deck.name}`);
      await this.syncFlashcardsForDeck(deck.id);
      const dailyCounts = await this.getDailyReviewCounts(deck.id);
      const config = deck.config;
      const remainingNew = hasNewCardsLimit(config) ? config.newCardsPerDay === 0 ? "none" : Math.max(0, config.newCardsPerDay - dailyCounts.newCount) : "unlimited";
      const remainingReview = hasReviewCardsLimit(config) ? config.reviewCardsPerDay === 0 ? "none" : Math.max(0, config.reviewCardsPerDay - dailyCounts.reviewCount) : "unlimited";
      const nextCard = await this.scheduler.getNext(/* @__PURE__ */ new Date(), deck.id, {
        allowNew: true
      });
      if (!nextCard) {
        let message = `No cards due for review in ${deck.name}`;
        const newLimitReached = hasNewCardsLimit(config) && (remainingNew === 0 || remainingNew === "none");
        const reviewLimitReached = hasReviewCardsLimit(config) && (remainingReview === 0 || remainingReview === "none");
        if (newLimitReached && reviewLimitReached) {
          message += `

Daily limits reached:`;
          message += `
New cards: ${config.newCardsPerDay}/${config.newCardsPerDay}`;
          message += `
Review cards: ${config.reviewCardsPerDay}/${config.reviewCardsPerDay}`;
        } else if (newLimitReached) {
          message += `

Daily new cards limit reached: ${config.newCardsPerDay}/${config.newCardsPerDay}`;
        } else if (reviewLimitReached) {
          message += `

Daily review cards limit reached: ${config.reviewCardsPerDay}/${config.reviewCardsPerDay}`;
        }
        if (((_b = (_a = this.settings) == null ? void 0 : _a.ui) == null ? void 0 : _b.enableNotices) !== false) {
          new import_obsidian10.Notice(message);
        }
        return;
      }
      if (hasNewCardsLimit(config) || hasReviewCardsLimit(config)) {
        let limitInfo = `Daily progress for ${deck.name}:
`;
        if (hasNewCardsLimit(config)) {
          if (config.newCardsPerDay === 0) {
            limitInfo += `New cards: DISABLED (0 allowed per day)
`;
          } else if (dailyCounts.newCount >= config.newCardsPerDay) {
            limitInfo += `New cards: ${dailyCounts.newCount}/${config.newCardsPerDay} (LIMIT EXCEEDED)
`;
          } else {
            limitInfo += `New cards: ${dailyCounts.newCount}/${config.newCardsPerDay} (${remainingNew} remaining)
`;
          }
        }
        if (hasReviewCardsLimit(config)) {
          if (config.reviewCardsPerDay === 0) {
            limitInfo += `Review cards: DISABLED (0 allowed per day)
`;
          } else if (dailyCounts.reviewCount >= config.reviewCardsPerDay) {
            limitInfo += `Review cards: ${dailyCounts.reviewCount}/${config.reviewCardsPerDay} (LIMIT EXCEEDED)
`;
          } else {
            limitInfo += `Review cards: ${dailyCounts.reviewCount}/${config.reviewCardsPerDay} (${remainingReview} remaining)
`;
          }
        }
        const newLimitExceeded = hasNewCardsLimit(config) && (config.newCardsPerDay === 0 || dailyCounts.newCount >= config.newCardsPerDay);
        const reviewLimitExceeded = hasReviewCardsLimit(config) && (config.reviewCardsPerDay === 0 || dailyCounts.reviewCount >= config.reviewCardsPerDay);
        if (newLimitExceeded || reviewLimitExceeded) {
          limitInfo += `

Note: Only learning cards will be shown (limits exceeded)`;
        }
        if (((_d = (_c = this.settings) == null ? void 0 : _c.ui) == null ? void 0 : _d.enableNotices) !== false) {
          new import_obsidian10.Notice(limitInfo, 5e3);
        }
      }
      new FlashcardReviewModalWrapper(
        this.app,
        deck,
        [nextCard],
        this.scheduler,
        this.settings,
        this.reviewFlashcard.bind(this),
        this.renderMarkdown,
        this.refresh.bind(this),
        this.refreshStatsById.bind(this)
      ).open();
    } catch (error) {
      console.error("Error starting review:", error);
      if (((_f = (_e = this.settings) == null ? void 0 : _e.ui) == null ? void 0 : _f.enableNotices) !== false) {
        new import_obsidian10.Notice("Error starting review. Check console for details.");
      }
    }
  }
};
//# sourceMappingURL=data:application/json;base64,
