import esbuild from "esbuild";
import process from "process";
import builtins from "builtin-modules";
import * as fs from "fs";
import * as path from "path";
import { fileURLToPath } from "url";
import sveltePlugin from "esbuild-svelte";
import sveltePreprocess from "svelte-preprocess";
import copy from "esbuild-plugin-copy";

const banner = `/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/
`;

const prod = process.argv[2] === "production";

// Set up directories
const __dirname = path.dirname(fileURLToPath(import.meta.url));
const outDir = path.join(__dirname, "demo_vault/.obsidian/plugins/decks");
const srcDir = path.join(__dirname, "src");

// Ensure output directory exists
if (!fs.existsSync(outDir)) {
  fs.mkdirSync(outDir, { recursive: true });
}

console.log(
  `Building Decks plugin in ${prod ? "production" : "development"} mode...`,
);

// Build options
const buildOptions = {
  banner: {
    js: banner,
  },
  entryPoints: [path.join(srcDir, "main.ts")],
  bundle: true,
  external: [
    "obsidian",
    "electron",
    "@codemirror/autocomplete",
    "@codemirror/collab",
    "@codemirror/commands",
    "@codemirror/language",
    "@codemirror/lint",
    "@codemirror/search",
    "@codemirror/state",
    "@codemirror/view",
    "@lezer/common",
    "@lezer/highlight",
    "@lezer/lr",
    ...builtins,
  ],
  format: "cjs",
  target: "es2018",
  logLevel: "info",
  sourcemap: prod ? false : "inline",
  treeShaking: true,
  minify: prod,
  keepNames: prod,
  outfile: path.join(outDir, "main.js"),
  plugins: [
    sveltePlugin({
      preprocess: sveltePreprocess({
        sourceMap: !prod,
      }),
      compilerOptions: {
        dev: !prod,
        css: "injected",
      },
    }),
    copy({
      assets: [
        {
          from: path.join(__dirname, "manifest.json"),
          to: path.join(outDir, "manifest.json"),
        },
      ],
    }),
  ],
};

// Build
esbuild
  .build(buildOptions)
  .then(() => {
    console.log(`✅ Build completed successfully!`);
    console.log(`📁 Output: ${buildOptions.outfile}`);
    const stats = fs.statSync(buildOptions.outfile);
    console.log(`📊 Size: ${(stats.size / 1024).toFixed(1)} KB`);
  })
  .catch((err) => {
    console.error("❌ Build failed:");
    console.error(err);
    process.exit(1);
  });
